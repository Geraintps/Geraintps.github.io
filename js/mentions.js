(function () {
    'use strict';

    function __$styleInject (css, returnValue) {
      if (typeof document === 'undefined') {
        return returnValue;
      }
      css = css || '';
      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';
      head.appendChild(style);

      if (style.styleSheet){
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
      return returnValue;
    }

    // ::- Persistent data structure representing an ordered mapping from
    // strings to values, with some convenient update methods.
    function OrderedMap(content) {
      this.content = content;
    }

    OrderedMap.prototype = {
      constructor: OrderedMap,

      find: function(key) {
        for (var i = 0; i < this.content.length; i += 2)
          if (this.content[i] === key) return i
        return -1
      },

      // :: (string) → ?any
      // Retrieve the value stored under `key`, or return undefined when
      // no such key exists.
      get: function(key) {
        var found = this.find(key);
        return found == -1 ? undefined : this.content[found + 1]
      },

      // :: (string, any, ?string) → OrderedMap
      // Create a new map by replacing the value of `key` with a new
      // value, or adding a binding to the end of the map. If `newKey` is
      // given, the key of the binding will be replaced with that key.
      update: function(key, value, newKey) {
        var self = newKey && newKey != key ? this.remove(newKey) : this;
        var found = self.find(key), content = self.content.slice();
        if (found == -1) {
          content.push(newKey || key, value);
        } else {
          content[found + 1] = value;
          if (newKey) content[found] = newKey;
        }
        return new OrderedMap(content)
      },

      // :: (string) → OrderedMap
      // Return a map with the given key removed, if it existed.
      remove: function(key) {
        var found = this.find(key);
        if (found == -1) return this
        var content = this.content.slice();
        content.splice(found, 2);
        return new OrderedMap(content)
      },

      // :: (string, any) → OrderedMap
      // Add a new key to the start of the map.
      addToStart: function(key, value) {
        return new OrderedMap([key, value].concat(this.remove(key).content))
      },

      // :: (string, any) → OrderedMap
      // Add a new key to the end of the map.
      addToEnd: function(key, value) {
        var content = this.remove(key).content.slice();
        content.push(key, value);
        return new OrderedMap(content)
      },

      // :: (string, string, any) → OrderedMap
      // Add a key after the given key. If `place` is not found, the new
      // key is added to the end.
      addBefore: function(place, key, value) {
        var without = this.remove(key), content = without.content.slice();
        var found = without.find(place);
        content.splice(found == -1 ? content.length : found, 0, key, value);
        return new OrderedMap(content)
      },

      // :: ((key: string, value: any))
      // Call the given function for each key/value pair in the map, in
      // order.
      forEach: function(f) {
        for (var i = 0; i < this.content.length; i += 2)
          f(this.content[i], this.content[i + 1]);
      },

      // :: (union<Object, OrderedMap>) → OrderedMap
      // Create a new map by prepending the keys in this map that don't
      // appear in `map` before the keys in `map`.
      prepend: function(map) {
        map = OrderedMap.from(map);
        if (!map.size) return this
        return new OrderedMap(map.content.concat(this.subtract(map).content))
      },

      // :: (union<Object, OrderedMap>) → OrderedMap
      // Create a new map by appending the keys in this map that don't
      // appear in `map` after the keys in `map`.
      append: function(map) {
        map = OrderedMap.from(map);
        if (!map.size) return this
        return new OrderedMap(this.subtract(map).content.concat(map.content))
      },

      // :: (union<Object, OrderedMap>) → OrderedMap
      // Create a map containing all the keys in this map that don't
      // appear in `map`.
      subtract: function(map) {
        var result = this;
        map = OrderedMap.from(map);
        for (var i = 0; i < map.content.length; i += 2)
          result = result.remove(map.content[i]);
        return result
      },

      // :: () → Object
      // Turn ordered map into a plain object.
      toObject: function() {
        var result = {};
        this.forEach(function(key, value) { result[key] = value; });
        return result
      },

      // :: number
      // The amount of keys in this map.
      get size() {
        return this.content.length >> 1
      }
    };

    // :: (?union<Object, OrderedMap>) → OrderedMap
    // Return a map with the given content. If null, create an empty
    // map. If given an ordered map, return that map itself. If given an
    // object, create a map from the object's properties.
    OrderedMap.from = function(value) {
      if (value instanceof OrderedMap) return value
      var content = [];
      if (value) for (var prop in value) content.push(prop, value[prop]);
      return new OrderedMap(content)
    };

    function findDiffStart(a, b, pos) {
        for (let i = 0;; i++) {
            if (i == a.childCount || i == b.childCount)
                return a.childCount == b.childCount ? null : pos;
            let childA = a.child(i), childB = b.child(i);
            if (childA == childB) {
                pos += childA.nodeSize;
                continue;
            }
            if (!childA.sameMarkup(childB))
                return pos;
            if (childA.isText && childA.text != childB.text) {
                for (let j = 0; childA.text[j] == childB.text[j]; j++)
                    pos++;
                return pos;
            }
            if (childA.content.size || childB.content.size) {
                let inner = findDiffStart(childA.content, childB.content, pos + 1);
                if (inner != null)
                    return inner;
            }
            pos += childA.nodeSize;
        }
    }
    function findDiffEnd(a, b, posA, posB) {
        for (let iA = a.childCount, iB = b.childCount;;) {
            if (iA == 0 || iB == 0)
                return iA == iB ? null : { a: posA, b: posB };
            let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize;
            if (childA == childB) {
                posA -= size;
                posB -= size;
                continue;
            }
            if (!childA.sameMarkup(childB))
                return { a: posA, b: posB };
            if (childA.isText && childA.text != childB.text) {
                let same = 0, minSize = Math.min(childA.text.length, childB.text.length);
                while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {
                    same++;
                    posA--;
                    posB--;
                }
                return { a: posA, b: posB };
            }
            if (childA.content.size || childB.content.size) {
                let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);
                if (inner)
                    return inner;
            }
            posA -= size;
            posB -= size;
        }
    }

    /**
    A fragment represents a node's collection of child nodes.

    Like nodes, fragments are persistent data structures, and you
    should not mutate them or their content. Rather, you create new
    instances whenever needed. The API tries to make this easy.
    */
    class Fragment {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        content, size) {
            this.content = content;
            this.size = size || 0;
            if (size == null)
                for (let i = 0; i < content.length; i++)
                    this.size += content[i].nodeSize;
        }
        /**
        Invoke a callback for all descendant nodes between the given two
        positions (relative to start of this fragment). Doesn't descend
        into a node when the callback returns `false`.
        */
        nodesBetween(from, to, f, nodeStart = 0, parent) {
            for (let i = 0, pos = 0; pos < to; i++) {
                let child = this.content[i], end = pos + child.nodeSize;
                if (end > from && f(child, nodeStart + pos, parent || null, i) !== false && child.content.size) {
                    let start = pos + 1;
                    child.nodesBetween(Math.max(0, from - start), Math.min(child.content.size, to - start), f, nodeStart + start);
                }
                pos = end;
            }
        }
        /**
        Call the given callback for every descendant node. `pos` will be
        relative to the start of the fragment. The callback may return
        `false` to prevent traversal of a given node's children.
        */
        descendants(f) {
            this.nodesBetween(0, this.size, f);
        }
        /**
        Extract the text between `from` and `to`. See the same method on
        [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
        */
        textBetween(from, to, blockSeparator, leafText) {
            let text = "", separated = true;
            this.nodesBetween(from, to, (node, pos) => {
                if (node.isText) {
                    text += node.text.slice(Math.max(from, pos) - pos, to - pos);
                    separated = !blockSeparator;
                }
                else if (node.isLeaf) {
                    if (leafText) {
                        text += typeof leafText === "function" ? leafText(node) : leafText;
                    }
                    else if (node.type.spec.leafText) {
                        text += node.type.spec.leafText(node);
                    }
                    separated = !blockSeparator;
                }
                else if (!separated && node.isBlock) {
                    text += blockSeparator;
                    separated = true;
                }
            }, 0);
            return text;
        }
        /**
        Create a new fragment containing the combined content of this
        fragment and the other.
        */
        append(other) {
            if (!other.size)
                return this;
            if (!this.size)
                return other;
            let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0;
            if (last.isText && last.sameMarkup(first)) {
                content[content.length - 1] = last.withText(last.text + first.text);
                i = 1;
            }
            for (; i < other.content.length; i++)
                content.push(other.content[i]);
            return new Fragment(content, this.size + other.size);
        }
        /**
        Cut out the sub-fragment between the two given positions.
        */
        cut(from, to = this.size) {
            if (from == 0 && to == this.size)
                return this;
            let result = [], size = 0;
            if (to > from)
                for (let i = 0, pos = 0; pos < to; i++) {
                    let child = this.content[i], end = pos + child.nodeSize;
                    if (end > from) {
                        if (pos < from || end > to) {
                            if (child.isText)
                                child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos));
                            else
                                child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1));
                        }
                        result.push(child);
                        size += child.nodeSize;
                    }
                    pos = end;
                }
            return new Fragment(result, size);
        }
        /**
        @internal
        */
        cutByIndex(from, to) {
            if (from == to)
                return Fragment.empty;
            if (from == 0 && to == this.content.length)
                return this;
            return new Fragment(this.content.slice(from, to));
        }
        /**
        Create a new fragment in which the node at the given index is
        replaced by the given node.
        */
        replaceChild(index, node) {
            let current = this.content[index];
            if (current == node)
                return this;
            let copy = this.content.slice();
            let size = this.size + node.nodeSize - current.nodeSize;
            copy[index] = node;
            return new Fragment(copy, size);
        }
        /**
        Create a new fragment by prepending the given node to this
        fragment.
        */
        addToStart(node) {
            return new Fragment([node].concat(this.content), this.size + node.nodeSize);
        }
        /**
        Create a new fragment by appending the given node to this
        fragment.
        */
        addToEnd(node) {
            return new Fragment(this.content.concat(node), this.size + node.nodeSize);
        }
        /**
        Compare this fragment to another one.
        */
        eq(other) {
            if (this.content.length != other.content.length)
                return false;
            for (let i = 0; i < this.content.length; i++)
                if (!this.content[i].eq(other.content[i]))
                    return false;
            return true;
        }
        /**
        The first child of the fragment, or `null` if it is empty.
        */
        get firstChild() { return this.content.length ? this.content[0] : null; }
        /**
        The last child of the fragment, or `null` if it is empty.
        */
        get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null; }
        /**
        The number of child nodes in this fragment.
        */
        get childCount() { return this.content.length; }
        /**
        Get the child node at the given index. Raise an error when the
        index is out of range.
        */
        child(index) {
            let found = this.content[index];
            if (!found)
                throw new RangeError("Index " + index + " out of range for " + this);
            return found;
        }
        /**
        Get the child node at the given index, if it exists.
        */
        maybeChild(index) {
            return this.content[index] || null;
        }
        /**
        Call `f` for every child node, passing the node, its offset
        into this parent node, and its index.
        */
        forEach(f) {
            for (let i = 0, p = 0; i < this.content.length; i++) {
                let child = this.content[i];
                f(child, p, i);
                p += child.nodeSize;
            }
        }
        /**
        Find the first position at which this fragment and another
        fragment differ, or `null` if they are the same.
        */
        findDiffStart(other, pos = 0) {
            return findDiffStart(this, other, pos);
        }
        /**
        Find the first position, searching from the end, at which this
        fragment and the given fragment differ, or `null` if they are
        the same. Since this position will not be the same in both
        nodes, an object with two separate positions is returned.
        */
        findDiffEnd(other, pos = this.size, otherPos = other.size) {
            return findDiffEnd(this, other, pos, otherPos);
        }
        /**
        Find the index and inner offset corresponding to a given relative
        position in this fragment. The result object will be reused
        (overwritten) the next time the function is called. (Not public.)
        */
        findIndex(pos, round = -1) {
            if (pos == 0)
                return retIndex(0, pos);
            if (pos == this.size)
                return retIndex(this.content.length, pos);
            if (pos > this.size || pos < 0)
                throw new RangeError(`Position ${pos} outside of fragment (${this})`);
            for (let i = 0, curPos = 0;; i++) {
                let cur = this.child(i), end = curPos + cur.nodeSize;
                if (end >= pos) {
                    if (end == pos || round > 0)
                        return retIndex(i + 1, end);
                    return retIndex(i, curPos);
                }
                curPos = end;
            }
        }
        /**
        Return a debugging string that describes this fragment.
        */
        toString() { return "<" + this.toStringInner() + ">"; }
        /**
        @internal
        */
        toStringInner() { return this.content.join(", "); }
        /**
        Create a JSON-serializeable representation of this fragment.
        */
        toJSON() {
            return this.content.length ? this.content.map(n => n.toJSON()) : null;
        }
        /**
        Deserialize a fragment from its JSON representation.
        */
        static fromJSON(schema, value) {
            if (!value)
                return Fragment.empty;
            if (!Array.isArray(value))
                throw new RangeError("Invalid input for Fragment.fromJSON");
            return new Fragment(value.map(schema.nodeFromJSON));
        }
        /**
        Build a fragment from an array of nodes. Ensures that adjacent
        text nodes with the same marks are joined together.
        */
        static fromArray(array) {
            if (!array.length)
                return Fragment.empty;
            let joined, size = 0;
            for (let i = 0; i < array.length; i++) {
                let node = array[i];
                size += node.nodeSize;
                if (i && node.isText && array[i - 1].sameMarkup(node)) {
                    if (!joined)
                        joined = array.slice(0, i);
                    joined[joined.length - 1] = node
                        .withText(joined[joined.length - 1].text + node.text);
                }
                else if (joined) {
                    joined.push(node);
                }
            }
            return new Fragment(joined || array, size);
        }
        /**
        Create a fragment from something that can be interpreted as a
        set of nodes. For `null`, it returns the empty fragment. For a
        fragment, the fragment itself. For a node or array of nodes, a
        fragment containing those nodes.
        */
        static from(nodes) {
            if (!nodes)
                return Fragment.empty;
            if (nodes instanceof Fragment)
                return nodes;
            if (Array.isArray(nodes))
                return this.fromArray(nodes);
            if (nodes.attrs)
                return new Fragment([nodes], nodes.nodeSize);
            throw new RangeError("Can not convert " + nodes + " to a Fragment" +
                (nodes.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
        }
    }
    /**
    An empty fragment. Intended to be reused whenever a node doesn't
    contain anything (rather than allocating a new empty fragment for
    each leaf node).
    */
    Fragment.empty = new Fragment([], 0);
    const found = { index: 0, offset: 0 };
    function retIndex(index, offset) {
        found.index = index;
        found.offset = offset;
        return found;
    }

    function compareDeep(a, b) {
        if (a === b)
            return true;
        if (!(a && typeof a == "object") ||
            !(b && typeof b == "object"))
            return false;
        let array = Array.isArray(a);
        if (Array.isArray(b) != array)
            return false;
        if (array) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++)
                if (!compareDeep(a[i], b[i]))
                    return false;
        }
        else {
            for (let p in a)
                if (!(p in b) || !compareDeep(a[p], b[p]))
                    return false;
            for (let p in b)
                if (!(p in a))
                    return false;
        }
        return true;
    }

    /**
    A mark is a piece of information that can be attached to a node,
    such as it being emphasized, in code font, or a link. It has a
    type and optionally a set of attributes that provide further
    information (such as the target of the link). Marks are created
    through a `Schema`, which controls which types exist and which
    attributes they have.
    */
    class Mark {
        /**
        @internal
        */
        constructor(
        /**
        The type of this mark.
        */
        type,
        /**
        The attributes associated with this mark.
        */
        attrs) {
            this.type = type;
            this.attrs = attrs;
        }
        /**
        Given a set of marks, create a new set which contains this one as
        well, in the right position. If this mark is already in the set,
        the set itself is returned. If any marks that are set to be
        [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
        those are replaced by this one.
        */
        addToSet(set) {
            let copy, placed = false;
            for (let i = 0; i < set.length; i++) {
                let other = set[i];
                if (this.eq(other))
                    return set;
                if (this.type.excludes(other.type)) {
                    if (!copy)
                        copy = set.slice(0, i);
                }
                else if (other.type.excludes(this.type)) {
                    return set;
                }
                else {
                    if (!placed && other.type.rank > this.type.rank) {
                        if (!copy)
                            copy = set.slice(0, i);
                        copy.push(this);
                        placed = true;
                    }
                    if (copy)
                        copy.push(other);
                }
            }
            if (!copy)
                copy = set.slice();
            if (!placed)
                copy.push(this);
            return copy;
        }
        /**
        Remove this mark from the given set, returning a new set. If this
        mark is not in the set, the set itself is returned.
        */
        removeFromSet(set) {
            for (let i = 0; i < set.length; i++)
                if (this.eq(set[i]))
                    return set.slice(0, i).concat(set.slice(i + 1));
            return set;
        }
        /**
        Test whether this mark is in the given set of marks.
        */
        isInSet(set) {
            for (let i = 0; i < set.length; i++)
                if (this.eq(set[i]))
                    return true;
            return false;
        }
        /**
        Test whether this mark has the same type and attributes as
        another mark.
        */
        eq(other) {
            return this == other ||
                (this.type == other.type && compareDeep(this.attrs, other.attrs));
        }
        /**
        Convert this mark to a JSON-serializeable representation.
        */
        toJSON() {
            let obj = { type: this.type.name };
            for (let _ in this.attrs) {
                obj.attrs = this.attrs;
                break;
            }
            return obj;
        }
        /**
        Deserialize a mark from JSON.
        */
        static fromJSON(schema, json) {
            if (!json)
                throw new RangeError("Invalid input for Mark.fromJSON");
            let type = schema.marks[json.type];
            if (!type)
                throw new RangeError(`There is no mark type ${json.type} in this schema`);
            return type.create(json.attrs);
        }
        /**
        Test whether two sets of marks are identical.
        */
        static sameSet(a, b) {
            if (a == b)
                return true;
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++)
                if (!a[i].eq(b[i]))
                    return false;
            return true;
        }
        /**
        Create a properly sorted mark set from null, a single mark, or an
        unsorted array of marks.
        */
        static setFrom(marks) {
            if (!marks || Array.isArray(marks) && marks.length == 0)
                return Mark.none;
            if (marks instanceof Mark)
                return [marks];
            let copy = marks.slice();
            copy.sort((a, b) => a.type.rank - b.type.rank);
            return copy;
        }
    }
    /**
    The empty set of marks.
    */
    Mark.none = [];

    /**
    Error type raised by [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) when
    given an invalid replacement.
    */
    class ReplaceError extends Error {
    }
    /*
    ReplaceError = function(this: any, message: string) {
      let err = Error.call(this, message)
      ;(err as any).__proto__ = ReplaceError.prototype
      return err
    } as any

    ReplaceError.prototype = Object.create(Error.prototype)
    ReplaceError.prototype.constructor = ReplaceError
    ReplaceError.prototype.name = "ReplaceError"
    */
    /**
    A slice represents a piece cut out of a larger document. It
    stores not only a fragment, but also the depth up to which nodes on
    both side are ‘open’ (cut through).
    */
    class Slice {
        /**
        Create a slice. When specifying a non-zero open depth, you must
        make sure that there are nodes of at least that depth at the
        appropriate side of the fragment—i.e. if the fragment is an
        empty paragraph node, `openStart` and `openEnd` can't be greater
        than 1.

        It is not necessary for the content of open nodes to conform to
        the schema's content constraints, though it should be a valid
        start/end/middle for such a node, depending on which sides are
        open.
        */
        constructor(
        /**
        The slice's content.
        */
        content,
        /**
        The open depth at the start of the fragment.
        */
        openStart,
        /**
        The open depth at the end.
        */
        openEnd) {
            this.content = content;
            this.openStart = openStart;
            this.openEnd = openEnd;
        }
        /**
        The size this slice would add when inserted into a document.
        */
        get size() {
            return this.content.size - this.openStart - this.openEnd;
        }
        /**
        @internal
        */
        insertAt(pos, fragment) {
            let content = insertInto(this.content, pos + this.openStart, fragment);
            return content && new Slice(content, this.openStart, this.openEnd);
        }
        /**
        @internal
        */
        removeBetween(from, to) {
            return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd);
        }
        /**
        Tests whether this slice is equal to another slice.
        */
        eq(other) {
            return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;
        }
        /**
        @internal
        */
        toString() {
            return this.content + "(" + this.openStart + "," + this.openEnd + ")";
        }
        /**
        Convert a slice to a JSON-serializable representation.
        */
        toJSON() {
            if (!this.content.size)
                return null;
            let json = { content: this.content.toJSON() };
            if (this.openStart > 0)
                json.openStart = this.openStart;
            if (this.openEnd > 0)
                json.openEnd = this.openEnd;
            return json;
        }
        /**
        Deserialize a slice from its JSON representation.
        */
        static fromJSON(schema, json) {
            if (!json)
                return Slice.empty;
            let openStart = json.openStart || 0, openEnd = json.openEnd || 0;
            if (typeof openStart != "number" || typeof openEnd != "number")
                throw new RangeError("Invalid input for Slice.fromJSON");
            return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd);
        }
        /**
        Create a slice from a fragment by taking the maximum possible
        open value on both side of the fragment.
        */
        static maxOpen(fragment, openIsolating = true) {
            let openStart = 0, openEnd = 0;
            for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild)
                openStart++;
            for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild)
                openEnd++;
            return new Slice(fragment, openStart, openEnd);
        }
    }
    /**
    The empty slice.
    */
    Slice.empty = new Slice(Fragment.empty, 0, 0);
    function removeRange(content, from, to) {
        let { index, offset } = content.findIndex(from), child = content.maybeChild(index);
        let { index: indexTo, offset: offsetTo } = content.findIndex(to);
        if (offset == from || child.isText) {
            if (offsetTo != to && !content.child(indexTo).isText)
                throw new RangeError("Removing non-flat range");
            return content.cut(0, from).append(content.cut(to));
        }
        if (index != indexTo)
            throw new RangeError("Removing non-flat range");
        return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)));
    }
    function insertInto(content, dist, insert, parent) {
        let { index, offset } = content.findIndex(dist), child = content.maybeChild(index);
        if (offset == dist || child.isText) {
            if (parent && !parent.canReplace(index, index, insert))
                return null;
            return content.cut(0, dist).append(insert).append(content.cut(dist));
        }
        let inner = insertInto(child.content, dist - offset - 1, insert);
        return inner && content.replaceChild(index, child.copy(inner));
    }
    function replace($from, $to, slice) {
        if (slice.openStart > $from.depth)
            throw new ReplaceError("Inserted content deeper than insertion position");
        if ($from.depth - slice.openStart != $to.depth - slice.openEnd)
            throw new ReplaceError("Inconsistent open depths");
        return replaceOuter($from, $to, slice, 0);
    }
    function replaceOuter($from, $to, slice, depth) {
        let index = $from.index(depth), node = $from.node(depth);
        if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {
            let inner = replaceOuter($from, $to, slice, depth + 1);
            return node.copy(node.content.replaceChild(index, inner));
        }
        else if (!slice.content.size) {
            return close(node, replaceTwoWay($from, $to, depth));
        }
        else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case
            let parent = $from.parent, content = parent.content;
            return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)));
        }
        else {
            let { start, end } = prepareSliceForReplace(slice, $from);
            return close(node, replaceThreeWay($from, start, end, $to, depth));
        }
    }
    function checkJoin(main, sub) {
        if (!sub.type.compatibleContent(main.type))
            throw new ReplaceError("Cannot join " + sub.type.name + " onto " + main.type.name);
    }
    function joinable($before, $after, depth) {
        let node = $before.node(depth);
        checkJoin(node, $after.node(depth));
        return node;
    }
    function addNode(child, target) {
        let last = target.length - 1;
        if (last >= 0 && child.isText && child.sameMarkup(target[last]))
            target[last] = child.withText(target[last].text + child.text);
        else
            target.push(child);
    }
    function addRange($start, $end, depth, target) {
        let node = ($end || $start).node(depth);
        let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount;
        if ($start) {
            startIndex = $start.index(depth);
            if ($start.depth > depth) {
                startIndex++;
            }
            else if ($start.textOffset) {
                addNode($start.nodeAfter, target);
                startIndex++;
            }
        }
        for (let i = startIndex; i < endIndex; i++)
            addNode(node.child(i), target);
        if ($end && $end.depth == depth && $end.textOffset)
            addNode($end.nodeBefore, target);
    }
    function close(node, content) {
        node.type.checkContent(content);
        return node.copy(content);
    }
    function replaceThreeWay($from, $start, $end, $to, depth) {
        let openStart = $from.depth > depth && joinable($from, $start, depth + 1);
        let openEnd = $to.depth > depth && joinable($end, $to, depth + 1);
        let content = [];
        addRange(null, $from, depth, content);
        if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {
            checkJoin(openStart, openEnd);
            addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);
        }
        else {
            if (openStart)
                addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content);
            addRange($start, $end, depth, content);
            if (openEnd)
                addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content);
        }
        addRange($to, null, depth, content);
        return new Fragment(content);
    }
    function replaceTwoWay($from, $to, depth) {
        let content = [];
        addRange(null, $from, depth, content);
        if ($from.depth > depth) {
            let type = joinable($from, $to, depth + 1);
            addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);
        }
        addRange($to, null, depth, content);
        return new Fragment(content);
    }
    function prepareSliceForReplace(slice, $along) {
        let extra = $along.depth - slice.openStart, parent = $along.node(extra);
        let node = parent.copy(slice.content);
        for (let i = extra - 1; i >= 0; i--)
            node = $along.node(i).copy(Fragment.from(node));
        return { start: node.resolveNoCache(slice.openStart + extra),
            end: node.resolveNoCache(node.content.size - slice.openEnd - extra) };
    }

    /**
    You can [_resolve_](https://prosemirror.net/docs/ref/#model.Node.resolve) a position to get more
    information about it. Objects of this class represent such a
    resolved position, providing various pieces of context
    information, and some helper methods.

    Throughout this interface, methods that take an optional `depth`
    parameter will interpret undefined as `this.depth` and negative
    numbers as `this.depth + value`.
    */
    class ResolvedPos {
        /**
        @internal
        */
        constructor(
        /**
        The position that was resolved.
        */
        pos,
        /**
        @internal
        */
        path,
        /**
        The offset this position has into its parent node.
        */
        parentOffset) {
            this.pos = pos;
            this.path = path;
            this.parentOffset = parentOffset;
            this.depth = path.length / 3 - 1;
        }
        /**
        @internal
        */
        resolveDepth(val) {
            if (val == null)
                return this.depth;
            if (val < 0)
                return this.depth + val;
            return val;
        }
        /**
        The parent node that the position points into. Note that even if
        a position points into a text node, that node is not considered
        the parent—text nodes are ‘flat’ in this model, and have no content.
        */
        get parent() { return this.node(this.depth); }
        /**
        The root node in which the position was resolved.
        */
        get doc() { return this.node(0); }
        /**
        The ancestor node at the given level. `p.node(p.depth)` is the
        same as `p.parent`.
        */
        node(depth) { return this.path[this.resolveDepth(depth) * 3]; }
        /**
        The index into the ancestor at the given level. If this points
        at the 3rd node in the 2nd paragraph on the top level, for
        example, `p.index(0)` is 1 and `p.index(1)` is 2.
        */
        index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1]; }
        /**
        The index pointing after this position into the ancestor at the
        given level.
        */
        indexAfter(depth) {
            depth = this.resolveDepth(depth);
            return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);
        }
        /**
        The (absolute) position at the start of the node at the given
        level.
        */
        start(depth) {
            depth = this.resolveDepth(depth);
            return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
        }
        /**
        The (absolute) position at the end of the node at the given
        level.
        */
        end(depth) {
            depth = this.resolveDepth(depth);
            return this.start(depth) + this.node(depth).content.size;
        }
        /**
        The (absolute) position directly before the wrapping node at the
        given level, or, when `depth` is `this.depth + 1`, the original
        position.
        */
        before(depth) {
            depth = this.resolveDepth(depth);
            if (!depth)
                throw new RangeError("There is no position before the top-level node");
            return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];
        }
        /**
        The (absolute) position directly after the wrapping node at the
        given level, or the original position when `depth` is `this.depth + 1`.
        */
        after(depth) {
            depth = this.resolveDepth(depth);
            if (!depth)
                throw new RangeError("There is no position after the top-level node");
            return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;
        }
        /**
        When this position points into a text node, this returns the
        distance between the position and the start of the text node.
        Will be zero for positions that point between nodes.
        */
        get textOffset() { return this.pos - this.path[this.path.length - 1]; }
        /**
        Get the node directly after the position, if any. If the position
        points into a text node, only the part of that node after the
        position is returned.
        */
        get nodeAfter() {
            let parent = this.parent, index = this.index(this.depth);
            if (index == parent.childCount)
                return null;
            let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index);
            return dOff ? parent.child(index).cut(dOff) : child;
        }
        /**
        Get the node directly before the position, if any. If the
        position points into a text node, only the part of that node
        before the position is returned.
        */
        get nodeBefore() {
            let index = this.index(this.depth);
            let dOff = this.pos - this.path[this.path.length - 1];
            if (dOff)
                return this.parent.child(index).cut(0, dOff);
            return index == 0 ? null : this.parent.child(index - 1);
        }
        /**
        Get the position at the given index in the parent node at the
        given depth (which defaults to `this.depth`).
        */
        posAtIndex(index, depth) {
            depth = this.resolveDepth(depth);
            let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
            for (let i = 0; i < index; i++)
                pos += node.child(i).nodeSize;
            return pos;
        }
        /**
        Get the marks at this position, factoring in the surrounding
        marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
        position is at the start of a non-empty node, the marks of the
        node after it (if any) are returned.
        */
        marks() {
            let parent = this.parent, index = this.index();
            // In an empty parent, return the empty array
            if (parent.content.size == 0)
                return Mark.none;
            // When inside a text node, just return the text node's marks
            if (this.textOffset)
                return parent.child(index).marks;
            let main = parent.maybeChild(index - 1), other = parent.maybeChild(index);
            // If the `after` flag is true of there is no node before, make
            // the node after this position the main reference.
            if (!main) {
                let tmp = main;
                main = other;
                other = tmp;
            }
            // Use all marks in the main node, except those that have
            // `inclusive` set to false and are not present in the other node.
            let marks = main.marks;
            for (var i = 0; i < marks.length; i++)
                if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))
                    marks = marks[i--].removeFromSet(marks);
            return marks;
        }
        /**
        Get the marks after the current position, if any, except those
        that are non-inclusive and not present at position `$end`. This
        is mostly useful for getting the set of marks to preserve after a
        deletion. Will return `null` if this position is at the end of
        its parent node or its parent node isn't a textblock (in which
        case no marks should be preserved).
        */
        marksAcross($end) {
            let after = this.parent.maybeChild(this.index());
            if (!after || !after.isInline)
                return null;
            let marks = after.marks, next = $end.parent.maybeChild($end.index());
            for (var i = 0; i < marks.length; i++)
                if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))
                    marks = marks[i--].removeFromSet(marks);
            return marks;
        }
        /**
        The depth up to which this position and the given (non-resolved)
        position share the same parent nodes.
        */
        sharedDepth(pos) {
            for (let depth = this.depth; depth > 0; depth--)
                if (this.start(depth) <= pos && this.end(depth) >= pos)
                    return depth;
            return 0;
        }
        /**
        Returns a range based on the place where this position and the
        given position diverge around block content. If both point into
        the same textblock, for example, a range around that textblock
        will be returned. If they point into different blocks, the range
        around those blocks in their shared ancestor is returned. You can
        pass in an optional predicate that will be called with a parent
        node to see if a range into that parent is acceptable.
        */
        blockRange(other = this, pred) {
            if (other.pos < this.pos)
                return other.blockRange(this);
            for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)
                if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))
                    return new NodeRange(this, other, d);
            return null;
        }
        /**
        Query whether the given position shares the same parent node.
        */
        sameParent(other) {
            return this.pos - this.parentOffset == other.pos - other.parentOffset;
        }
        /**
        Return the greater of this and the given position.
        */
        max(other) {
            return other.pos > this.pos ? other : this;
        }
        /**
        Return the smaller of this and the given position.
        */
        min(other) {
            return other.pos < this.pos ? other : this;
        }
        /**
        @internal
        */
        toString() {
            let str = "";
            for (let i = 1; i <= this.depth; i++)
                str += (str ? "/" : "") + this.node(i).type.name + "_" + this.index(i - 1);
            return str + ":" + this.parentOffset;
        }
        /**
        @internal
        */
        static resolve(doc, pos) {
            if (!(pos >= 0 && pos <= doc.content.size))
                throw new RangeError("Position " + pos + " out of range");
            let path = [];
            let start = 0, parentOffset = pos;
            for (let node = doc;;) {
                let { index, offset } = node.content.findIndex(parentOffset);
                let rem = parentOffset - offset;
                path.push(node, index, start + offset);
                if (!rem)
                    break;
                node = node.child(index);
                if (node.isText)
                    break;
                parentOffset = rem - 1;
                start += offset + 1;
            }
            return new ResolvedPos(pos, path, parentOffset);
        }
        /**
        @internal
        */
        static resolveCached(doc, pos) {
            for (let i = 0; i < resolveCache.length; i++) {
                let cached = resolveCache[i];
                if (cached.pos == pos && cached.doc == doc)
                    return cached;
            }
            let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);
            resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;
            return result;
        }
    }
    let resolveCache = [];
    let resolveCachePos = 0;
    let resolveCacheSize = 12;
    /**
    Represents a flat range of content, i.e. one that starts and
    ends in the same node.
    */
    class NodeRange {
        /**
        Construct a node range. `$from` and `$to` should point into the
        same node until at least the given `depth`, since a node range
        denotes an adjacent set of nodes in a single parent node.
        */
        constructor(
        /**
        A resolved position along the start of the content. May have a
        `depth` greater than this object's `depth` property, since
        these are the positions that were used to compute the range,
        not re-resolved positions directly at its boundaries.
        */
        $from,
        /**
        A position along the end of the content. See
        caveat for [`$from`](https://prosemirror.net/docs/ref/#model.NodeRange.$from).
        */
        $to,
        /**
        The depth of the node that this range points into.
        */
        depth) {
            this.$from = $from;
            this.$to = $to;
            this.depth = depth;
        }
        /**
        The position at the start of the range.
        */
        get start() { return this.$from.before(this.depth + 1); }
        /**
        The position at the end of the range.
        */
        get end() { return this.$to.after(this.depth + 1); }
        /**
        The parent node that the range points into.
        */
        get parent() { return this.$from.node(this.depth); }
        /**
        The start index of the range in the parent node.
        */
        get startIndex() { return this.$from.index(this.depth); }
        /**
        The end index of the range in the parent node.
        */
        get endIndex() { return this.$to.indexAfter(this.depth); }
    }

    const emptyAttrs = Object.create(null);
    /**
    This class represents a node in the tree that makes up a
    ProseMirror document. So a document is an instance of `Node`, with
    children that are also instances of `Node`.

    Nodes are persistent data structures. Instead of changing them, you
    create new ones with the content you want. Old ones keep pointing
    at the old document shape. This is made cheaper by sharing
    structure between the old and new data as much as possible, which a
    tree shape like this (without back pointers) makes easy.

    **Do not** directly mutate the properties of a `Node` object. See
    [the guide](/docs/guide/#doc) for more information.
    */
    class Node$1 {
        /**
        @internal
        */
        constructor(
        /**
        The type of node that this is.
        */
        type,
        /**
        An object mapping attribute names to values. The kind of
        attributes allowed and required are
        [determined](https://prosemirror.net/docs/ref/#model.NodeSpec.attrs) by the node type.
        */
        attrs,
        // A fragment holding the node's children.
        content,
        /**
        The marks (things like whether it is emphasized or part of a
        link) applied to this node.
        */
        marks = Mark.none) {
            this.type = type;
            this.attrs = attrs;
            this.marks = marks;
            this.content = content || Fragment.empty;
        }
        /**
        The size of this node, as defined by the integer-based [indexing
        scheme](/docs/guide/#doc.indexing). For text nodes, this is the
        amount of characters. For other leaf nodes, it is one. For
        non-leaf nodes, it is the size of the content plus two (the
        start and end token).
        */
        get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size; }
        /**
        The number of children that the node has.
        */
        get childCount() { return this.content.childCount; }
        /**
        Get the child node at the given index. Raises an error when the
        index is out of range.
        */
        child(index) { return this.content.child(index); }
        /**
        Get the child node at the given index, if it exists.
        */
        maybeChild(index) { return this.content.maybeChild(index); }
        /**
        Call `f` for every child node, passing the node, its offset
        into this parent node, and its index.
        */
        forEach(f) { this.content.forEach(f); }
        /**
        Invoke a callback for all descendant nodes recursively between
        the given two positions that are relative to start of this
        node's content. The callback is invoked with the node, its
        parent-relative position, its parent node, and its child index.
        When the callback returns false for a given node, that node's
        children will not be recursed over. The last parameter can be
        used to specify a starting position to count from.
        */
        nodesBetween(from, to, f, startPos = 0) {
            this.content.nodesBetween(from, to, f, startPos, this);
        }
        /**
        Call the given callback for every descendant node. Doesn't
        descend into a node when the callback returns `false`.
        */
        descendants(f) {
            this.nodesBetween(0, this.content.size, f);
        }
        /**
        Concatenates all the text nodes found in this fragment and its
        children.
        */
        get textContent() {
            return (this.isLeaf && this.type.spec.leafText)
                ? this.type.spec.leafText(this)
                : this.textBetween(0, this.content.size, "");
        }
        /**
        Get all text between positions `from` and `to`. When
        `blockSeparator` is given, it will be inserted to separate text
        from different block nodes. If `leafText` is given, it'll be
        inserted for every non-text leaf node encountered, otherwise
        [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
        */
        textBetween(from, to, blockSeparator, leafText) {
            return this.content.textBetween(from, to, blockSeparator, leafText);
        }
        /**
        Returns this node's first child, or `null` if there are no
        children.
        */
        get firstChild() { return this.content.firstChild; }
        /**
        Returns this node's last child, or `null` if there are no
        children.
        */
        get lastChild() { return this.content.lastChild; }
        /**
        Test whether two nodes represent the same piece of document.
        */
        eq(other) {
            return this == other || (this.sameMarkup(other) && this.content.eq(other.content));
        }
        /**
        Compare the markup (type, attributes, and marks) of this node to
        those of another. Returns `true` if both have the same markup.
        */
        sameMarkup(other) {
            return this.hasMarkup(other.type, other.attrs, other.marks);
        }
        /**
        Check whether this node's markup correspond to the given type,
        attributes, and marks.
        */
        hasMarkup(type, attrs, marks) {
            return this.type == type &&
                compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&
                Mark.sameSet(this.marks, marks || Mark.none);
        }
        /**
        Create a new node with the same markup as this node, containing
        the given content (or empty, if no content is given).
        */
        copy(content = null) {
            if (content == this.content)
                return this;
            return new Node$1(this.type, this.attrs, content, this.marks);
        }
        /**
        Create a copy of this node, with the given set of marks instead
        of the node's own marks.
        */
        mark(marks) {
            return marks == this.marks ? this : new Node$1(this.type, this.attrs, this.content, marks);
        }
        /**
        Create a copy of this node with only the content between the
        given positions. If `to` is not given, it defaults to the end of
        the node.
        */
        cut(from, to = this.content.size) {
            if (from == 0 && to == this.content.size)
                return this;
            return this.copy(this.content.cut(from, to));
        }
        /**
        Cut out the part of the document between the given positions, and
        return it as a `Slice` object.
        */
        slice(from, to = this.content.size, includeParents = false) {
            if (from == to)
                return Slice.empty;
            let $from = this.resolve(from), $to = this.resolve(to);
            let depth = includeParents ? 0 : $from.sharedDepth(to);
            let start = $from.start(depth), node = $from.node(depth);
            let content = node.content.cut($from.pos - start, $to.pos - start);
            return new Slice(content, $from.depth - depth, $to.depth - depth);
        }
        /**
        Replace the part of the document between the given positions with
        the given slice. The slice must 'fit', meaning its open sides
        must be able to connect to the surrounding content, and its
        content nodes must be valid children for the node they are placed
        into. If any of this is violated, an error of type
        [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
        */
        replace(from, to, slice) {
            return replace(this.resolve(from), this.resolve(to), slice);
        }
        /**
        Find the node directly after the given position.
        */
        nodeAt(pos) {
            for (let node = this;;) {
                let { index, offset } = node.content.findIndex(pos);
                node = node.maybeChild(index);
                if (!node)
                    return null;
                if (offset == pos || node.isText)
                    return node;
                pos -= offset + 1;
            }
        }
        /**
        Find the (direct) child node after the given offset, if any,
        and return it along with its index and offset relative to this
        node.
        */
        childAfter(pos) {
            let { index, offset } = this.content.findIndex(pos);
            return { node: this.content.maybeChild(index), index, offset };
        }
        /**
        Find the (direct) child node before the given offset, if any,
        and return it along with its index and offset relative to this
        node.
        */
        childBefore(pos) {
            if (pos == 0)
                return { node: null, index: 0, offset: 0 };
            let { index, offset } = this.content.findIndex(pos);
            if (offset < pos)
                return { node: this.content.child(index), index, offset };
            let node = this.content.child(index - 1);
            return { node, index: index - 1, offset: offset - node.nodeSize };
        }
        /**
        Resolve the given position in the document, returning an
        [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
        */
        resolve(pos) { return ResolvedPos.resolveCached(this, pos); }
        /**
        @internal
        */
        resolveNoCache(pos) { return ResolvedPos.resolve(this, pos); }
        /**
        Test whether a given mark or mark type occurs in this document
        between the two given positions.
        */
        rangeHasMark(from, to, type) {
            let found = false;
            if (to > from)
                this.nodesBetween(from, to, node => {
                    if (type.isInSet(node.marks))
                        found = true;
                    return !found;
                });
            return found;
        }
        /**
        True when this is a block (non-inline node)
        */
        get isBlock() { return this.type.isBlock; }
        /**
        True when this is a textblock node, a block node with inline
        content.
        */
        get isTextblock() { return this.type.isTextblock; }
        /**
        True when this node allows inline content.
        */
        get inlineContent() { return this.type.inlineContent; }
        /**
        True when this is an inline node (a text node or a node that can
        appear among text).
        */
        get isInline() { return this.type.isInline; }
        /**
        True when this is a text node.
        */
        get isText() { return this.type.isText; }
        /**
        True when this is a leaf node.
        */
        get isLeaf() { return this.type.isLeaf; }
        /**
        True when this is an atom, i.e. when it does not have directly
        editable content. This is usually the same as `isLeaf`, but can
        be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
        on a node's spec (typically used when the node is displayed as
        an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
        */
        get isAtom() { return this.type.isAtom; }
        /**
        Return a string representation of this node for debugging
        purposes.
        */
        toString() {
            if (this.type.spec.toDebugString)
                return this.type.spec.toDebugString(this);
            let name = this.type.name;
            if (this.content.size)
                name += "(" + this.content.toStringInner() + ")";
            return wrapMarks(this.marks, name);
        }
        /**
        Get the content match in this node at the given index.
        */
        contentMatchAt(index) {
            let match = this.type.contentMatch.matchFragment(this.content, 0, index);
            if (!match)
                throw new Error("Called contentMatchAt on a node with invalid content");
            return match;
        }
        /**
        Test whether replacing the range between `from` and `to` (by
        child index) with the given replacement fragment (which defaults
        to the empty fragment) would leave the node's content valid. You
        can optionally pass `start` and `end` indices into the
        replacement fragment.
        */
        canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {
            let one = this.contentMatchAt(from).matchFragment(replacement, start, end);
            let two = one && one.matchFragment(this.content, to);
            if (!two || !two.validEnd)
                return false;
            for (let i = start; i < end; i++)
                if (!this.type.allowsMarks(replacement.child(i).marks))
                    return false;
            return true;
        }
        /**
        Test whether replacing the range `from` to `to` (by index) with
        a node of the given type would leave the node's content valid.
        */
        canReplaceWith(from, to, type, marks) {
            if (marks && !this.type.allowsMarks(marks))
                return false;
            let start = this.contentMatchAt(from).matchType(type);
            let end = start && start.matchFragment(this.content, to);
            return end ? end.validEnd : false;
        }
        /**
        Test whether the given node's content could be appended to this
        node. If that node is empty, this will only return true if there
        is at least one node type that can appear in both nodes (to avoid
        merging completely incompatible nodes).
        */
        canAppend(other) {
            if (other.content.size)
                return this.canReplace(this.childCount, this.childCount, other.content);
            else
                return this.type.compatibleContent(other.type);
        }
        /**
        Check whether this node and its descendants conform to the
        schema, and raise error when they do not.
        */
        check() {
            this.type.checkContent(this.content);
            let copy = Mark.none;
            for (let i = 0; i < this.marks.length; i++)
                copy = this.marks[i].addToSet(copy);
            if (!Mark.sameSet(copy, this.marks))
                throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`);
            this.content.forEach(node => node.check());
        }
        /**
        Return a JSON-serializeable representation of this node.
        */
        toJSON() {
            let obj = { type: this.type.name };
            for (let _ in this.attrs) {
                obj.attrs = this.attrs;
                break;
            }
            if (this.content.size)
                obj.content = this.content.toJSON();
            if (this.marks.length)
                obj.marks = this.marks.map(n => n.toJSON());
            return obj;
        }
        /**
        Deserialize a node from its JSON representation.
        */
        static fromJSON(schema, json) {
            if (!json)
                throw new RangeError("Invalid input for Node.fromJSON");
            let marks = null;
            if (json.marks) {
                if (!Array.isArray(json.marks))
                    throw new RangeError("Invalid mark data for Node.fromJSON");
                marks = json.marks.map(schema.markFromJSON);
            }
            if (json.type == "text") {
                if (typeof json.text != "string")
                    throw new RangeError("Invalid text node in JSON");
                return schema.text(json.text, marks);
            }
            let content = Fragment.fromJSON(schema, json.content);
            return schema.nodeType(json.type).create(json.attrs, content, marks);
        }
    }
    Node$1.prototype.text = undefined;
    class TextNode extends Node$1 {
        /**
        @internal
        */
        constructor(type, attrs, content, marks) {
            super(type, attrs, null, marks);
            if (!content)
                throw new RangeError("Empty text nodes are not allowed");
            this.text = content;
        }
        toString() {
            if (this.type.spec.toDebugString)
                return this.type.spec.toDebugString(this);
            return wrapMarks(this.marks, JSON.stringify(this.text));
        }
        get textContent() { return this.text; }
        textBetween(from, to) { return this.text.slice(from, to); }
        get nodeSize() { return this.text.length; }
        mark(marks) {
            return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks);
        }
        withText(text) {
            if (text == this.text)
                return this;
            return new TextNode(this.type, this.attrs, text, this.marks);
        }
        cut(from = 0, to = this.text.length) {
            if (from == 0 && to == this.text.length)
                return this;
            return this.withText(this.text.slice(from, to));
        }
        eq(other) {
            return this.sameMarkup(other) && this.text == other.text;
        }
        toJSON() {
            let base = super.toJSON();
            base.text = this.text;
            return base;
        }
    }
    function wrapMarks(marks, str) {
        for (let i = marks.length - 1; i >= 0; i--)
            str = marks[i].type.name + "(" + str + ")";
        return str;
    }

    /**
    Instances of this class represent a match state of a node type's
    [content expression](https://prosemirror.net/docs/ref/#model.NodeSpec.content), and can be used to
    find out whether further content matches here, and whether a given
    position is a valid end of the node.
    */
    class ContentMatch {
        /**
        @internal
        */
        constructor(
        /**
        True when this match state represents a valid end of the node.
        */
        validEnd) {
            this.validEnd = validEnd;
            /**
            @internal
            */
            this.next = [];
            /**
            @internal
            */
            this.wrapCache = [];
        }
        /**
        @internal
        */
        static parse(string, nodeTypes) {
            let stream = new TokenStream(string, nodeTypes);
            if (stream.next == null)
                return ContentMatch.empty;
            let expr = parseExpr(stream);
            if (stream.next)
                stream.err("Unexpected trailing text");
            let match = dfa(nfa(expr));
            checkForDeadEnds(match, stream);
            return match;
        }
        /**
        Match a node type, returning a match after that node if
        successful.
        */
        matchType(type) {
            for (let i = 0; i < this.next.length; i++)
                if (this.next[i].type == type)
                    return this.next[i].next;
            return null;
        }
        /**
        Try to match a fragment. Returns the resulting match when
        successful.
        */
        matchFragment(frag, start = 0, end = frag.childCount) {
            let cur = this;
            for (let i = start; cur && i < end; i++)
                cur = cur.matchType(frag.child(i).type);
            return cur;
        }
        /**
        @internal
        */
        get inlineContent() {
            return this.next.length != 0 && this.next[0].type.isInline;
        }
        /**
        Get the first matching node type at this match position that can
        be generated.
        */
        get defaultType() {
            for (let i = 0; i < this.next.length; i++) {
                let { type } = this.next[i];
                if (!(type.isText || type.hasRequiredAttrs()))
                    return type;
            }
            return null;
        }
        /**
        @internal
        */
        compatible(other) {
            for (let i = 0; i < this.next.length; i++)
                for (let j = 0; j < other.next.length; j++)
                    if (this.next[i].type == other.next[j].type)
                        return true;
            return false;
        }
        /**
        Try to match the given fragment, and if that fails, see if it can
        be made to match by inserting nodes in front of it. When
        successful, return a fragment of inserted nodes (which may be
        empty if nothing had to be inserted). When `toEnd` is true, only
        return a fragment if the resulting match goes to the end of the
        content expression.
        */
        fillBefore(after, toEnd = false, startIndex = 0) {
            let seen = [this];
            function search(match, types) {
                let finished = match.matchFragment(after, startIndex);
                if (finished && (!toEnd || finished.validEnd))
                    return Fragment.from(types.map(tp => tp.createAndFill()));
                for (let i = 0; i < match.next.length; i++) {
                    let { type, next } = match.next[i];
                    if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {
                        seen.push(next);
                        let found = search(next, types.concat(type));
                        if (found)
                            return found;
                    }
                }
                return null;
            }
            return search(this, []);
        }
        /**
        Find a set of wrapping node types that would allow a node of the
        given type to appear at this position. The result may be empty
        (when it fits directly) and will be null when no such wrapping
        exists.
        */
        findWrapping(target) {
            for (let i = 0; i < this.wrapCache.length; i += 2)
                if (this.wrapCache[i] == target)
                    return this.wrapCache[i + 1];
            let computed = this.computeWrapping(target);
            this.wrapCache.push(target, computed);
            return computed;
        }
        /**
        @internal
        */
        computeWrapping(target) {
            let seen = Object.create(null), active = [{ match: this, type: null, via: null }];
            while (active.length) {
                let current = active.shift(), match = current.match;
                if (match.matchType(target)) {
                    let result = [];
                    for (let obj = current; obj.type; obj = obj.via)
                        result.push(obj.type);
                    return result.reverse();
                }
                for (let i = 0; i < match.next.length; i++) {
                    let { type, next } = match.next[i];
                    if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || next.validEnd)) {
                        active.push({ match: type.contentMatch, type, via: current });
                        seen[type.name] = true;
                    }
                }
            }
            return null;
        }
        /**
        The number of outgoing edges this node has in the finite
        automaton that describes the content expression.
        */
        get edgeCount() {
            return this.next.length;
        }
        /**
        Get the _n_​th outgoing edge from this node in the finite
        automaton that describes the content expression.
        */
        edge(n) {
            if (n >= this.next.length)
                throw new RangeError(`There's no ${n}th edge in this content match`);
            return this.next[n];
        }
        /**
        @internal
        */
        toString() {
            let seen = [];
            function scan(m) {
                seen.push(m);
                for (let i = 0; i < m.next.length; i++)
                    if (seen.indexOf(m.next[i].next) == -1)
                        scan(m.next[i].next);
            }
            scan(this);
            return seen.map((m, i) => {
                let out = i + (m.validEnd ? "*" : " ") + " ";
                for (let i = 0; i < m.next.length; i++)
                    out += (i ? ", " : "") + m.next[i].type.name + "->" + seen.indexOf(m.next[i].next);
                return out;
            }).join("\n");
        }
    }
    /**
    @internal
    */
    ContentMatch.empty = new ContentMatch(true);
    class TokenStream {
        constructor(string, nodeTypes) {
            this.string = string;
            this.nodeTypes = nodeTypes;
            this.inline = null;
            this.pos = 0;
            this.tokens = string.split(/\s*(?=\b|\W|$)/);
            if (this.tokens[this.tokens.length - 1] == "")
                this.tokens.pop();
            if (this.tokens[0] == "")
                this.tokens.shift();
        }
        get next() { return this.tokens[this.pos]; }
        eat(tok) { return this.next == tok && (this.pos++ || true); }
        err(str) { throw new SyntaxError(str + " (in content expression '" + this.string + "')"); }
    }
    function parseExpr(stream) {
        let exprs = [];
        do {
            exprs.push(parseExprSeq(stream));
        } while (stream.eat("|"));
        return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
    }
    function parseExprSeq(stream) {
        let exprs = [];
        do {
            exprs.push(parseExprSubscript(stream));
        } while (stream.next && stream.next != ")" && stream.next != "|");
        return exprs.length == 1 ? exprs[0] : { type: "seq", exprs };
    }
    function parseExprSubscript(stream) {
        let expr = parseExprAtom(stream);
        for (;;) {
            if (stream.eat("+"))
                expr = { type: "plus", expr };
            else if (stream.eat("*"))
                expr = { type: "star", expr };
            else if (stream.eat("?"))
                expr = { type: "opt", expr };
            else if (stream.eat("{"))
                expr = parseExprRange(stream, expr);
            else
                break;
        }
        return expr;
    }
    function parseNum(stream) {
        if (/\D/.test(stream.next))
            stream.err("Expected number, got '" + stream.next + "'");
        let result = Number(stream.next);
        stream.pos++;
        return result;
    }
    function parseExprRange(stream, expr) {
        let min = parseNum(stream), max = min;
        if (stream.eat(",")) {
            if (stream.next != "}")
                max = parseNum(stream);
            else
                max = -1;
        }
        if (!stream.eat("}"))
            stream.err("Unclosed braced range");
        return { type: "range", min, max, expr };
    }
    function resolveName(stream, name) {
        let types = stream.nodeTypes, type = types[name];
        if (type)
            return [type];
        let result = [];
        for (let typeName in types) {
            let type = types[typeName];
            if (type.groups.indexOf(name) > -1)
                result.push(type);
        }
        if (result.length == 0)
            stream.err("No node type or group '" + name + "' found");
        return result;
    }
    function parseExprAtom(stream) {
        if (stream.eat("(")) {
            let expr = parseExpr(stream);
            if (!stream.eat(")"))
                stream.err("Missing closing paren");
            return expr;
        }
        else if (!/\W/.test(stream.next)) {
            let exprs = resolveName(stream, stream.next).map(type => {
                if (stream.inline == null)
                    stream.inline = type.isInline;
                else if (stream.inline != type.isInline)
                    stream.err("Mixing inline and block content");
                return { type: "name", value: type };
            });
            stream.pos++;
            return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
        }
        else {
            stream.err("Unexpected token '" + stream.next + "'");
        }
    }
    /**
    Construct an NFA from an expression as returned by the parser. The
    NFA is represented as an array of states, which are themselves
    arrays of edges, which are `{term, to}` objects. The first state is
    the entry state and the last node is the success state.

    Note that unlike typical NFAs, the edge ordering in this one is
    significant, in that it is used to contruct filler content when
    necessary.
    */
    function nfa(expr) {
        let nfa = [[]];
        connect(compile(expr, 0), node());
        return nfa;
        function node() { return nfa.push([]) - 1; }
        function edge(from, to, term) {
            let edge = { term, to };
            nfa[from].push(edge);
            return edge;
        }
        function connect(edges, to) {
            edges.forEach(edge => edge.to = to);
        }
        function compile(expr, from) {
            if (expr.type == "choice") {
                return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), []);
            }
            else if (expr.type == "seq") {
                for (let i = 0;; i++) {
                    let next = compile(expr.exprs[i], from);
                    if (i == expr.exprs.length - 1)
                        return next;
                    connect(next, from = node());
                }
            }
            else if (expr.type == "star") {
                let loop = node();
                edge(from, loop);
                connect(compile(expr.expr, loop), loop);
                return [edge(loop)];
            }
            else if (expr.type == "plus") {
                let loop = node();
                connect(compile(expr.expr, from), loop);
                connect(compile(expr.expr, loop), loop);
                return [edge(loop)];
            }
            else if (expr.type == "opt") {
                return [edge(from)].concat(compile(expr.expr, from));
            }
            else if (expr.type == "range") {
                let cur = from;
                for (let i = 0; i < expr.min; i++) {
                    let next = node();
                    connect(compile(expr.expr, cur), next);
                    cur = next;
                }
                if (expr.max == -1) {
                    connect(compile(expr.expr, cur), cur);
                }
                else {
                    for (let i = expr.min; i < expr.max; i++) {
                        let next = node();
                        edge(cur, next);
                        connect(compile(expr.expr, cur), next);
                        cur = next;
                    }
                }
                return [edge(cur)];
            }
            else if (expr.type == "name") {
                return [edge(from, undefined, expr.value)];
            }
            else {
                throw new Error("Unknown expr type");
            }
        }
    }
    function cmp(a, b) { return b - a; }
    // Get the set of nodes reachable by null edges from `node`. Omit
    // nodes with only a single null-out-edge, since they may lead to
    // needless duplicated nodes.
    function nullFrom(nfa, node) {
        let result = [];
        scan(node);
        return result.sort(cmp);
        function scan(node) {
            let edges = nfa[node];
            if (edges.length == 1 && !edges[0].term)
                return scan(edges[0].to);
            result.push(node);
            for (let i = 0; i < edges.length; i++) {
                let { term, to } = edges[i];
                if (!term && result.indexOf(to) == -1)
                    scan(to);
            }
        }
    }
    // Compiles an NFA as produced by `nfa` into a DFA, modeled as a set
    // of state objects (`ContentMatch` instances) with transitions
    // between them.
    function dfa(nfa) {
        let labeled = Object.create(null);
        return explore(nullFrom(nfa, 0));
        function explore(states) {
            let out = [];
            states.forEach(node => {
                nfa[node].forEach(({ term, to }) => {
                    if (!term)
                        return;
                    let set;
                    for (let i = 0; i < out.length; i++)
                        if (out[i][0] == term)
                            set = out[i][1];
                    nullFrom(nfa, to).forEach(node => {
                        if (!set)
                            out.push([term, set = []]);
                        if (set.indexOf(node) == -1)
                            set.push(node);
                    });
                });
            });
            let state = labeled[states.join(",")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);
            for (let i = 0; i < out.length; i++) {
                let states = out[i][1].sort(cmp);
                state.next.push({ type: out[i][0], next: labeled[states.join(",")] || explore(states) });
            }
            return state;
        }
    }
    function checkForDeadEnds(match, stream) {
        for (let i = 0, work = [match]; i < work.length; i++) {
            let state = work[i], dead = !state.validEnd, nodes = [];
            for (let j = 0; j < state.next.length; j++) {
                let { type, next } = state.next[j];
                nodes.push(type.name);
                if (dead && !(type.isText || type.hasRequiredAttrs()))
                    dead = false;
                if (work.indexOf(next) == -1)
                    work.push(next);
            }
            if (dead)
                stream.err("Only non-generatable nodes (" + nodes.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
        }
    }

    // For node types where all attrs have a default value (or which don't
    // have any attributes), build up a single reusable default attribute
    // object, and use it for all nodes that don't specify specific
    // attributes.
    function defaultAttrs(attrs) {
        let defaults = Object.create(null);
        for (let attrName in attrs) {
            let attr = attrs[attrName];
            if (!attr.hasDefault)
                return null;
            defaults[attrName] = attr.default;
        }
        return defaults;
    }
    function computeAttrs(attrs, value) {
        let built = Object.create(null);
        for (let name in attrs) {
            let given = value && value[name];
            if (given === undefined) {
                let attr = attrs[name];
                if (attr.hasDefault)
                    given = attr.default;
                else
                    throw new RangeError("No value supplied for attribute " + name);
            }
            built[name] = given;
        }
        return built;
    }
    function initAttrs(attrs) {
        let result = Object.create(null);
        if (attrs)
            for (let name in attrs)
                result[name] = new Attribute(attrs[name]);
        return result;
    }
    /**
    Node types are objects allocated once per `Schema` and used to
    [tag](https://prosemirror.net/docs/ref/#model.Node.type) `Node` instances. They contain information
    about the node type, such as its name and what kind of node it
    represents.
    */
    class NodeType {
        /**
        @internal
        */
        constructor(
        /**
        The name the node type has in this schema.
        */
        name,
        /**
        A link back to the `Schema` the node type belongs to.
        */
        schema,
        /**
        The spec that this type is based on
        */
        spec) {
            this.name = name;
            this.schema = schema;
            this.spec = spec;
            /**
            The set of marks allowed in this node. `null` means all marks
            are allowed.
            */
            this.markSet = null;
            this.groups = spec.group ? spec.group.split(" ") : [];
            this.attrs = initAttrs(spec.attrs);
            this.defaultAttrs = defaultAttrs(this.attrs);
            this.contentMatch = null;
            this.inlineContent = null;
            this.isBlock = !(spec.inline || name == "text");
            this.isText = name == "text";
        }
        /**
        True if this is an inline type.
        */
        get isInline() { return !this.isBlock; }
        /**
        True if this is a textblock type, a block that contains inline
        content.
        */
        get isTextblock() { return this.isBlock && this.inlineContent; }
        /**
        True for node types that allow no content.
        */
        get isLeaf() { return this.contentMatch == ContentMatch.empty; }
        /**
        True when this node is an atom, i.e. when it does not have
        directly editable content.
        */
        get isAtom() { return this.isLeaf || !!this.spec.atom; }
        /**
        The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
        */
        get whitespace() {
            return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
        }
        /**
        Tells you whether this node type has any required attributes.
        */
        hasRequiredAttrs() {
            for (let n in this.attrs)
                if (this.attrs[n].isRequired)
                    return true;
            return false;
        }
        /**
        Indicates whether this node allows some of the same content as
        the given node type.
        */
        compatibleContent(other) {
            return this == other || this.contentMatch.compatible(other.contentMatch);
        }
        /**
        @internal
        */
        computeAttrs(attrs) {
            if (!attrs && this.defaultAttrs)
                return this.defaultAttrs;
            else
                return computeAttrs(this.attrs, attrs);
        }
        /**
        Create a `Node` of this type. The given attributes are
        checked and defaulted (you can pass `null` to use the type's
        defaults entirely, if no required attributes exist). `content`
        may be a `Fragment`, a node, an array of nodes, or
        `null`. Similarly `marks` may be `null` to default to the empty
        set of marks.
        */
        create(attrs = null, content, marks) {
            if (this.isText)
                throw new Error("NodeType.create can't construct text nodes");
            return new Node$1(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks));
        }
        /**
        Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
        against the node type's content restrictions, and throw an error
        if it doesn't match.
        */
        createChecked(attrs = null, content, marks) {
            content = Fragment.from(content);
            this.checkContent(content);
            return new Node$1(this, this.computeAttrs(attrs), content, Mark.setFrom(marks));
        }
        /**
        Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
        necessary to add nodes to the start or end of the given fragment
        to make it fit the node. If no fitting wrapping can be found,
        return null. Note that, due to the fact that required nodes can
        always be created, this will always succeed if you pass null or
        `Fragment.empty` as content.
        */
        createAndFill(attrs = null, content, marks) {
            attrs = this.computeAttrs(attrs);
            content = Fragment.from(content);
            if (content.size) {
                let before = this.contentMatch.fillBefore(content);
                if (!before)
                    return null;
                content = before.append(content);
            }
            let matched = this.contentMatch.matchFragment(content);
            let after = matched && matched.fillBefore(Fragment.empty, true);
            if (!after)
                return null;
            return new Node$1(this, attrs, content.append(after), Mark.setFrom(marks));
        }
        /**
        Returns true if the given fragment is valid content for this node
        type with the given attributes.
        */
        validContent(content) {
            let result = this.contentMatch.matchFragment(content);
            if (!result || !result.validEnd)
                return false;
            for (let i = 0; i < content.childCount; i++)
                if (!this.allowsMarks(content.child(i).marks))
                    return false;
            return true;
        }
        /**
        Throws a RangeError if the given fragment is not valid content for this
        node type.
        @internal
        */
        checkContent(content) {
            if (!this.validContent(content))
                throw new RangeError(`Invalid content for node ${this.name}: ${content.toString().slice(0, 50)}`);
        }
        /**
        Check whether the given mark type is allowed in this node.
        */
        allowsMarkType(markType) {
            return this.markSet == null || this.markSet.indexOf(markType) > -1;
        }
        /**
        Test whether the given set of marks are allowed in this node.
        */
        allowsMarks(marks) {
            if (this.markSet == null)
                return true;
            for (let i = 0; i < marks.length; i++)
                if (!this.allowsMarkType(marks[i].type))
                    return false;
            return true;
        }
        /**
        Removes the marks that are not allowed in this node from the given set.
        */
        allowedMarks(marks) {
            if (this.markSet == null)
                return marks;
            let copy;
            for (let i = 0; i < marks.length; i++) {
                if (!this.allowsMarkType(marks[i].type)) {
                    if (!copy)
                        copy = marks.slice(0, i);
                }
                else if (copy) {
                    copy.push(marks[i]);
                }
            }
            return !copy ? marks : copy.length ? copy : Mark.none;
        }
        /**
        @internal
        */
        static compile(nodes, schema) {
            let result = Object.create(null);
            nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec));
            let topType = schema.spec.topNode || "doc";
            if (!result[topType])
                throw new RangeError("Schema is missing its top node type ('" + topType + "')");
            if (!result.text)
                throw new RangeError("Every schema needs a 'text' type");
            for (let _ in result.text.attrs)
                throw new RangeError("The text node type should not have attributes");
            return result;
        }
    }
    // Attribute descriptors
    class Attribute {
        constructor(options) {
            this.hasDefault = Object.prototype.hasOwnProperty.call(options, "default");
            this.default = options.default;
        }
        get isRequired() {
            return !this.hasDefault;
        }
    }
    // Marks
    /**
    Like nodes, marks (which are associated with nodes to signify
    things like emphasis or being part of a link) are
    [tagged](https://prosemirror.net/docs/ref/#model.Mark.type) with type objects, which are
    instantiated once per `Schema`.
    */
    class MarkType {
        /**
        @internal
        */
        constructor(
        /**
        The name of the mark type.
        */
        name,
        /**
        @internal
        */
        rank,
        /**
        The schema that this mark type instance is part of.
        */
        schema,
        /**
        The spec on which the type is based.
        */
        spec) {
            this.name = name;
            this.rank = rank;
            this.schema = schema;
            this.spec = spec;
            this.attrs = initAttrs(spec.attrs);
            this.excluded = null;
            let defaults = defaultAttrs(this.attrs);
            this.instance = defaults ? new Mark(this, defaults) : null;
        }
        /**
        Create a mark of this type. `attrs` may be `null` or an object
        containing only some of the mark's attributes. The others, if
        they have defaults, will be added.
        */
        create(attrs = null) {
            if (!attrs && this.instance)
                return this.instance;
            return new Mark(this, computeAttrs(this.attrs, attrs));
        }
        /**
        @internal
        */
        static compile(marks, schema) {
            let result = Object.create(null), rank = 0;
            marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec));
            return result;
        }
        /**
        When there is a mark of this type in the given set, a new set
        without it is returned. Otherwise, the input set is returned.
        */
        removeFromSet(set) {
            for (var i = 0; i < set.length; i++)
                if (set[i].type == this) {
                    set = set.slice(0, i).concat(set.slice(i + 1));
                    i--;
                }
            return set;
        }
        /**
        Tests whether there is a mark of this type in the given set.
        */
        isInSet(set) {
            for (let i = 0; i < set.length; i++)
                if (set[i].type == this)
                    return set[i];
        }
        /**
        Queries whether a given mark type is
        [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
        */
        excludes(other) {
            return this.excluded.indexOf(other) > -1;
        }
    }
    /**
    A document schema. Holds [node](https://prosemirror.net/docs/ref/#model.NodeType) and [mark
    type](https://prosemirror.net/docs/ref/#model.MarkType) objects for the nodes and marks that may
    occur in conforming documents, and provides functionality for
    creating and deserializing such documents.

    When given, the type parameters provide the names of the nodes and
    marks in this schema.
    */
    class Schema {
        /**
        Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
        */
        constructor(spec) {
            /**
            An object for storing whatever values modules may want to
            compute and cache per schema. (If you want to store something
            in it, try to use property names unlikely to clash.)
            */
            this.cached = Object.create(null);
            let instanceSpec = this.spec = {};
            for (let prop in spec)
                instanceSpec[prop] = spec[prop];
            instanceSpec.nodes = OrderedMap.from(spec.nodes),
                instanceSpec.marks = OrderedMap.from(spec.marks || {}),
                this.nodes = NodeType.compile(this.spec.nodes, this);
            this.marks = MarkType.compile(this.spec.marks, this);
            let contentExprCache = Object.create(null);
            for (let prop in this.nodes) {
                if (prop in this.marks)
                    throw new RangeError(prop + " can not be both a node and a mark");
                let type = this.nodes[prop], contentExpr = type.spec.content || "", markExpr = type.spec.marks;
                type.contentMatch = contentExprCache[contentExpr] ||
                    (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));
                type.inlineContent = type.contentMatch.inlineContent;
                type.markSet = markExpr == "_" ? null :
                    markExpr ? gatherMarks(this, markExpr.split(" ")) :
                        markExpr == "" || !type.inlineContent ? [] : null;
            }
            for (let prop in this.marks) {
                let type = this.marks[prop], excl = type.spec.excludes;
                type.excluded = excl == null ? [type] : excl == "" ? [] : gatherMarks(this, excl.split(" "));
            }
            this.nodeFromJSON = this.nodeFromJSON.bind(this);
            this.markFromJSON = this.markFromJSON.bind(this);
            this.topNodeType = this.nodes[this.spec.topNode || "doc"];
            this.cached.wrappings = Object.create(null);
        }
        /**
        Create a node in this schema. The `type` may be a string or a
        `NodeType` instance. Attributes will be extended with defaults,
        `content` may be a `Fragment`, `null`, a `Node`, or an array of
        nodes.
        */
        node(type, attrs = null, content, marks) {
            if (typeof type == "string")
                type = this.nodeType(type);
            else if (!(type instanceof NodeType))
                throw new RangeError("Invalid node type: " + type);
            else if (type.schema != this)
                throw new RangeError("Node type from different schema used (" + type.name + ")");
            return type.createChecked(attrs, content, marks);
        }
        /**
        Create a text node in the schema. Empty text nodes are not
        allowed.
        */
        text(text, marks) {
            let type = this.nodes.text;
            return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks));
        }
        /**
        Create a mark with the given type and attributes.
        */
        mark(type, attrs) {
            if (typeof type == "string")
                type = this.marks[type];
            return type.create(attrs);
        }
        /**
        Deserialize a node from its JSON representation. This method is
        bound.
        */
        nodeFromJSON(json) {
            return Node$1.fromJSON(this, json);
        }
        /**
        Deserialize a mark from its JSON representation. This method is
        bound.
        */
        markFromJSON(json) {
            return Mark.fromJSON(this, json);
        }
        /**
        @internal
        */
        nodeType(name) {
            let found = this.nodes[name];
            if (!found)
                throw new RangeError("Unknown node type: " + name);
            return found;
        }
    }
    function gatherMarks(schema, marks) {
        let found = [];
        for (let i = 0; i < marks.length; i++) {
            let name = marks[i], mark = schema.marks[name], ok = mark;
            if (mark) {
                found.push(mark);
            }
            else {
                for (let prop in schema.marks) {
                    let mark = schema.marks[prop];
                    if (name == "_" || (mark.spec.group && mark.spec.group.split(" ").indexOf(name) > -1))
                        found.push(ok = mark);
                }
            }
            if (!ok)
                throw new SyntaxError("Unknown mark type: '" + marks[i] + "'");
        }
        return found;
    }

    /**
    A DOM parser represents a strategy for parsing DOM content into a
    ProseMirror document conforming to a given schema. Its behavior is
    defined by an array of [rules](https://prosemirror.net/docs/ref/#model.ParseRule).
    */
    class DOMParser {
        /**
        Create a parser that targets the given schema, using the given
        parsing rules.
        */
        constructor(
        /**
        The schema into which the parser parses.
        */
        schema,
        /**
        The set of [parse rules](https://prosemirror.net/docs/ref/#model.ParseRule) that the parser
        uses, in order of precedence.
        */
        rules) {
            this.schema = schema;
            this.rules = rules;
            /**
            @internal
            */
            this.tags = [];
            /**
            @internal
            */
            this.styles = [];
            rules.forEach(rule => {
                if (rule.tag)
                    this.tags.push(rule);
                else if (rule.style)
                    this.styles.push(rule);
            });
            // Only normalize list elements when lists in the schema can't directly contain themselves
            this.normalizeLists = !this.tags.some(r => {
                if (!/^(ul|ol)\b/.test(r.tag) || !r.node)
                    return false;
                let node = schema.nodes[r.node];
                return node.contentMatch.matchType(node);
            });
        }
        /**
        Parse a document from the content of a DOM node.
        */
        parse(dom, options = {}) {
            let context = new ParseContext(this, options, false);
            context.addAll(dom, options.from, options.to);
            return context.finish();
        }
        /**
        Parses the content of the given DOM node, like
        [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
        options. But unlike that method, which produces a whole node,
        this one returns a slice that is open at the sides, meaning that
        the schema constraints aren't applied to the start of nodes to
        the left of the input and the end of nodes at the end.
        */
        parseSlice(dom, options = {}) {
            let context = new ParseContext(this, options, true);
            context.addAll(dom, options.from, options.to);
            return Slice.maxOpen(context.finish());
        }
        /**
        @internal
        */
        matchTag(dom, context, after) {
            for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {
                let rule = this.tags[i];
                if (matches(dom, rule.tag) &&
                    (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&
                    (!rule.context || context.matchesContext(rule.context))) {
                    if (rule.getAttrs) {
                        let result = rule.getAttrs(dom);
                        if (result === false)
                            continue;
                        rule.attrs = result || undefined;
                    }
                    return rule;
                }
            }
        }
        /**
        @internal
        */
        matchStyle(prop, value, context, after) {
            for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {
                let rule = this.styles[i], style = rule.style;
                if (style.indexOf(prop) != 0 ||
                    rule.context && !context.matchesContext(rule.context) ||
                    // Test that the style string either precisely matches the prop,
                    // or has an '=' sign after the prop, followed by the given
                    // value.
                    style.length > prop.length &&
                        (style.charCodeAt(prop.length) != 61 || style.slice(prop.length + 1) != value))
                    continue;
                if (rule.getAttrs) {
                    let result = rule.getAttrs(value);
                    if (result === false)
                        continue;
                    rule.attrs = result || undefined;
                }
                return rule;
            }
        }
        /**
        @internal
        */
        static schemaRules(schema) {
            let result = [];
            function insert(rule) {
                let priority = rule.priority == null ? 50 : rule.priority, i = 0;
                for (; i < result.length; i++) {
                    let next = result[i], nextPriority = next.priority == null ? 50 : next.priority;
                    if (nextPriority < priority)
                        break;
                }
                result.splice(i, 0, rule);
            }
            for (let name in schema.marks) {
                let rules = schema.marks[name].spec.parseDOM;
                if (rules)
                    rules.forEach(rule => {
                        insert(rule = copy(rule));
                        if (!(rule.mark || rule.ignore || rule.clearMark))
                            rule.mark = name;
                    });
            }
            for (let name in schema.nodes) {
                let rules = schema.nodes[name].spec.parseDOM;
                if (rules)
                    rules.forEach(rule => {
                        insert(rule = copy(rule));
                        if (!(rule.node || rule.ignore || rule.mark))
                            rule.node = name;
                    });
            }
            return result;
        }
        /**
        Construct a DOM parser using the parsing rules listed in a
        schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
        [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
        */
        static fromSchema(schema) {
            return schema.cached.domParser ||
                (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)));
        }
    }
    const blockTags = {
        address: true, article: true, aside: true, blockquote: true, canvas: true,
        dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,
        footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,
        h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,
        output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true
    };
    const ignoreTags = {
        head: true, noscript: true, object: true, script: true, style: true, title: true
    };
    const listTags = { ol: true, ul: true };
    // Using a bitfield for node context options
    const OPT_PRESERVE_WS = 1;
    const OPT_PRESERVE_WS_FULL = 2;
    const OPT_OPEN_LEFT = 4;
    function wsOptionsFor(type, preserveWhitespace, base) {
        if (preserveWhitespace != null)
            return (preserveWhitespace ? OPT_PRESERVE_WS : 0) |
                (preserveWhitespace === "full" ? OPT_PRESERVE_WS_FULL : 0);
        return type && type.whitespace == "pre" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base & ~OPT_OPEN_LEFT;
    }
    class NodeContext {
        constructor(type, attrs,
        // Marks applied to this node itself
        marks,
        // Marks that can't apply here, but will be used in children if possible
        pendingMarks, solid, match, options) {
            this.type = type;
            this.attrs = attrs;
            this.marks = marks;
            this.pendingMarks = pendingMarks;
            this.solid = solid;
            this.options = options;
            this.content = [];
            // Marks applied to the node's children
            this.activeMarks = Mark.none;
            // Nested Marks with same type
            this.stashMarks = [];
            this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);
        }
        findWrapping(node) {
            if (!this.match) {
                if (!this.type)
                    return [];
                let fill = this.type.contentMatch.fillBefore(Fragment.from(node));
                if (fill) {
                    this.match = this.type.contentMatch.matchFragment(fill);
                }
                else {
                    let start = this.type.contentMatch, wrap;
                    if (wrap = start.findWrapping(node.type)) {
                        this.match = start;
                        return wrap;
                    }
                    else {
                        return null;
                    }
                }
            }
            return this.match.findWrapping(node.type);
        }
        finish(openEnd) {
            if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace
                let last = this.content[this.content.length - 1], m;
                if (last && last.isText && (m = /[ \t\r\n\u000c]+$/.exec(last.text))) {
                    let text = last;
                    if (last.text.length == m[0].length)
                        this.content.pop();
                    else
                        this.content[this.content.length - 1] = text.withText(text.text.slice(0, text.text.length - m[0].length));
                }
            }
            let content = Fragment.from(this.content);
            if (!openEnd && this.match)
                content = content.append(this.match.fillBefore(Fragment.empty, true));
            return this.type ? this.type.create(this.attrs, content, this.marks) : content;
        }
        popFromStashMark(mark) {
            for (let i = this.stashMarks.length - 1; i >= 0; i--)
                if (mark.eq(this.stashMarks[i]))
                    return this.stashMarks.splice(i, 1)[0];
        }
        applyPending(nextType) {
            for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {
                let mark = pending[i];
                if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&
                    !mark.isInSet(this.activeMarks)) {
                    this.activeMarks = mark.addToSet(this.activeMarks);
                    this.pendingMarks = mark.removeFromSet(this.pendingMarks);
                }
            }
        }
        inlineContext(node) {
            if (this.type)
                return this.type.inlineContent;
            if (this.content.length)
                return this.content[0].isInline;
            return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase());
        }
    }
    class ParseContext {
        constructor(
        // The parser we are using.
        parser,
        // The options passed to this parse.
        options, isOpen) {
            this.parser = parser;
            this.options = options;
            this.isOpen = isOpen;
            this.open = 0;
            let topNode = options.topNode, topContext;
            let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (isOpen ? OPT_OPEN_LEFT : 0);
            if (topNode)
                topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true, options.topMatch || topNode.type.contentMatch, topOptions);
            else if (isOpen)
                topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions);
            else
                topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions);
            this.nodes = [topContext];
            this.find = options.findPositions;
            this.needsBlock = false;
        }
        get top() {
            return this.nodes[this.open];
        }
        // Add a DOM node to the content. Text is inserted as text node,
        // otherwise, the node is passed to `addElement` or, if it has a
        // `style` attribute, `addElementWithStyles`.
        addDOM(dom) {
            if (dom.nodeType == 3) {
                this.addTextNode(dom);
            }
            else if (dom.nodeType == 1) {
                let style = dom.getAttribute("style");
                if (!style) {
                    this.addElement(dom);
                }
                else {
                    let marks = this.readStyles(parseStyles(style));
                    if (!marks)
                        return; // A style with ignore: true
                    let [addMarks, removeMarks] = marks, top = this.top;
                    for (let i = 0; i < removeMarks.length; i++)
                        this.removePendingMark(removeMarks[i], top);
                    for (let i = 0; i < addMarks.length; i++)
                        this.addPendingMark(addMarks[i]);
                    this.addElement(dom);
                    for (let i = 0; i < addMarks.length; i++)
                        this.removePendingMark(addMarks[i], top);
                    for (let i = 0; i < removeMarks.length; i++)
                        this.addPendingMark(removeMarks[i]);
                }
            }
        }
        addTextNode(dom) {
            let value = dom.nodeValue;
            let top = this.top;
            if (top.options & OPT_PRESERVE_WS_FULL ||
                top.inlineContext(dom) ||
                /[^ \t\r\n\u000c]/.test(value)) {
                if (!(top.options & OPT_PRESERVE_WS)) {
                    value = value.replace(/[ \t\r\n\u000c]+/g, " ");
                    // If this starts with whitespace, and there is no node before it, or
                    // a hard break, or a text node that ends with whitespace, strip the
                    // leading space.
                    if (/^[ \t\r\n\u000c]/.test(value) && this.open == this.nodes.length - 1) {
                        let nodeBefore = top.content[top.content.length - 1];
                        let domNodeBefore = dom.previousSibling;
                        if (!nodeBefore ||
                            (domNodeBefore && domNodeBefore.nodeName == 'BR') ||
                            (nodeBefore.isText && /[ \t\r\n\u000c]$/.test(nodeBefore.text)))
                            value = value.slice(1);
                    }
                }
                else if (!(top.options & OPT_PRESERVE_WS_FULL)) {
                    value = value.replace(/\r?\n|\r/g, " ");
                }
                else {
                    value = value.replace(/\r\n?/g, "\n");
                }
                if (value)
                    this.insertNode(this.parser.schema.text(value));
                this.findInText(dom);
            }
            else {
                this.findInside(dom);
            }
        }
        // Try to find a handler for the given tag and use that to parse. If
        // none is found, the element's content nodes are added directly.
        addElement(dom, matchAfter) {
            let name = dom.nodeName.toLowerCase(), ruleID;
            if (listTags.hasOwnProperty(name) && this.parser.normalizeLists)
                normalizeList(dom);
            let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||
                (ruleID = this.parser.matchTag(dom, this, matchAfter));
            if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {
                this.findInside(dom);
                this.ignoreFallback(dom);
            }
            else if (!rule || rule.skip || rule.closeParent) {
                if (rule && rule.closeParent)
                    this.open = Math.max(0, this.open - 1);
                else if (rule && rule.skip.nodeType)
                    dom = rule.skip;
                let sync, top = this.top, oldNeedsBlock = this.needsBlock;
                if (blockTags.hasOwnProperty(name)) {
                    if (top.content.length && top.content[0].isInline && this.open) {
                        this.open--;
                        top = this.top;
                    }
                    sync = true;
                    if (!top.type)
                        this.needsBlock = true;
                }
                else if (!dom.firstChild) {
                    this.leafFallback(dom);
                    return;
                }
                this.addAll(dom);
                if (sync)
                    this.sync(top);
                this.needsBlock = oldNeedsBlock;
            }
            else {
                this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : undefined);
            }
        }
        // Called for leaf DOM nodes that would otherwise be ignored
        leafFallback(dom) {
            if (dom.nodeName == "BR" && this.top.type && this.top.type.inlineContent)
                this.addTextNode(dom.ownerDocument.createTextNode("\n"));
        }
        // Called for ignored nodes
        ignoreFallback(dom) {
            // Ignored BR nodes should at least create an inline context
            if (dom.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent))
                this.findPlace(this.parser.schema.text("-"));
        }
        // Run any style parser associated with the node's styles. Either
        // return an array of marks, or null to indicate some of the styles
        // had a rule with `ignore` set.
        readStyles(styles) {
            let add = Mark.none, remove = Mark.none;
            style: for (let i = 0; i < styles.length; i += 2) {
                for (let after = undefined;;) {
                    let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after);
                    if (!rule)
                        continue style;
                    if (rule.ignore)
                        return null;
                    if (rule.clearMark) {
                        this.top.pendingMarks.forEach(m => {
                            if (rule.clearMark(m))
                                remove = m.addToSet(remove);
                        });
                    }
                    else {
                        add = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(add);
                    }
                    if (rule.consuming === false)
                        after = rule;
                    else
                        break;
                }
            }
            return [add, remove];
        }
        // Look up a handler for the given node. If none are found, return
        // false. Otherwise, apply it, use its return value to drive the way
        // the node's content is wrapped, and return true.
        addElementByRule(dom, rule, continueAfter) {
            let sync, nodeType, mark;
            if (rule.node) {
                nodeType = this.parser.schema.nodes[rule.node];
                if (!nodeType.isLeaf) {
                    sync = this.enter(nodeType, rule.attrs || null, rule.preserveWhitespace);
                }
                else if (!this.insertNode(nodeType.create(rule.attrs))) {
                    this.leafFallback(dom);
                }
            }
            else {
                let markType = this.parser.schema.marks[rule.mark];
                mark = markType.create(rule.attrs);
                this.addPendingMark(mark);
            }
            let startIn = this.top;
            if (nodeType && nodeType.isLeaf) {
                this.findInside(dom);
            }
            else if (continueAfter) {
                this.addElement(dom, continueAfter);
            }
            else if (rule.getContent) {
                this.findInside(dom);
                rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node));
            }
            else {
                let contentDOM = dom;
                if (typeof rule.contentElement == "string")
                    contentDOM = dom.querySelector(rule.contentElement);
                else if (typeof rule.contentElement == "function")
                    contentDOM = rule.contentElement(dom);
                else if (rule.contentElement)
                    contentDOM = rule.contentElement;
                this.findAround(dom, contentDOM, true);
                this.addAll(contentDOM);
            }
            if (sync && this.sync(startIn))
                this.open--;
            if (mark)
                this.removePendingMark(mark, startIn);
        }
        // Add all child nodes between `startIndex` and `endIndex` (or the
        // whole node, if not given). If `sync` is passed, use it to
        // synchronize after every block element.
        addAll(parent, startIndex, endIndex) {
            let index = startIndex || 0;
            for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index) {
                this.findAtPoint(parent, index);
                this.addDOM(dom);
            }
            this.findAtPoint(parent, index);
        }
        // Try to find a way to fit the given node type into the current
        // context. May add intermediate wrappers and/or leave non-solid
        // nodes that we're in.
        findPlace(node) {
            let route, sync;
            for (let depth = this.open; depth >= 0; depth--) {
                let cx = this.nodes[depth];
                let found = cx.findWrapping(node);
                if (found && (!route || route.length > found.length)) {
                    route = found;
                    sync = cx;
                    if (!found.length)
                        break;
                }
                if (cx.solid)
                    break;
            }
            if (!route)
                return false;
            this.sync(sync);
            for (let i = 0; i < route.length; i++)
                this.enterInner(route[i], null, false);
            return true;
        }
        // Try to insert the given node, adjusting the context when needed.
        insertNode(node) {
            if (node.isInline && this.needsBlock && !this.top.type) {
                let block = this.textblockFromContext();
                if (block)
                    this.enterInner(block);
            }
            if (this.findPlace(node)) {
                this.closeExtra();
                let top = this.top;
                top.applyPending(node.type);
                if (top.match)
                    top.match = top.match.matchType(node.type);
                let marks = top.activeMarks;
                for (let i = 0; i < node.marks.length; i++)
                    if (!top.type || top.type.allowsMarkType(node.marks[i].type))
                        marks = node.marks[i].addToSet(marks);
                top.content.push(node.mark(marks));
                return true;
            }
            return false;
        }
        // Try to start a node of the given type, adjusting the context when
        // necessary.
        enter(type, attrs, preserveWS) {
            let ok = this.findPlace(type.create(attrs));
            if (ok)
                this.enterInner(type, attrs, true, preserveWS);
            return ok;
        }
        // Open a node of the given type
        enterInner(type, attrs = null, solid = false, preserveWS) {
            this.closeExtra();
            let top = this.top;
            top.applyPending(type);
            top.match = top.match && top.match.matchType(type);
            let options = wsOptionsFor(type, preserveWS, top.options);
            if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0)
                options |= OPT_OPEN_LEFT;
            this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options));
            this.open++;
        }
        // Make sure all nodes above this.open are finished and added to
        // their parents
        closeExtra(openEnd = false) {
            let i = this.nodes.length - 1;
            if (i > this.open) {
                for (; i > this.open; i--)
                    this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd));
                this.nodes.length = this.open + 1;
            }
        }
        finish() {
            this.open = 0;
            this.closeExtra(this.isOpen);
            return this.nodes[0].finish(this.isOpen || this.options.topOpen);
        }
        sync(to) {
            for (let i = this.open; i >= 0; i--)
                if (this.nodes[i] == to) {
                    this.open = i;
                    return true;
                }
            return false;
        }
        get currentPos() {
            this.closeExtra();
            let pos = 0;
            for (let i = this.open; i >= 0; i--) {
                let content = this.nodes[i].content;
                for (let j = content.length - 1; j >= 0; j--)
                    pos += content[j].nodeSize;
                if (i)
                    pos++;
            }
            return pos;
        }
        findAtPoint(parent, offset) {
            if (this.find)
                for (let i = 0; i < this.find.length; i++) {
                    if (this.find[i].node == parent && this.find[i].offset == offset)
                        this.find[i].pos = this.currentPos;
                }
        }
        findInside(parent) {
            if (this.find)
                for (let i = 0; i < this.find.length; i++) {
                    if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))
                        this.find[i].pos = this.currentPos;
                }
        }
        findAround(parent, content, before) {
            if (parent != content && this.find)
                for (let i = 0; i < this.find.length; i++) {
                    if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {
                        let pos = content.compareDocumentPosition(this.find[i].node);
                        if (pos & (before ? 2 : 4))
                            this.find[i].pos = this.currentPos;
                    }
                }
        }
        findInText(textNode) {
            if (this.find)
                for (let i = 0; i < this.find.length; i++) {
                    if (this.find[i].node == textNode)
                        this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset);
                }
        }
        // Determines whether the given context string matches this context.
        matchesContext(context) {
            if (context.indexOf("|") > -1)
                return context.split(/\s*\|\s*/).some(this.matchesContext, this);
            let parts = context.split("/");
            let option = this.options.context;
            let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);
            let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);
            let match = (i, depth) => {
                for (; i >= 0; i--) {
                    let part = parts[i];
                    if (part == "") {
                        if (i == parts.length - 1 || i == 0)
                            continue;
                        for (; depth >= minDepth; depth--)
                            if (match(i - 1, depth))
                                return true;
                        return false;
                    }
                    else {
                        let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type
                            : option && depth >= minDepth ? option.node(depth - minDepth).type
                                : null;
                        if (!next || (next.name != part && next.groups.indexOf(part) == -1))
                            return false;
                        depth--;
                    }
                }
                return true;
            };
            return match(parts.length - 1, this.open);
        }
        textblockFromContext() {
            let $context = this.options.context;
            if ($context)
                for (let d = $context.depth; d >= 0; d--) {
                    let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;
                    if (deflt && deflt.isTextblock && deflt.defaultAttrs)
                        return deflt;
                }
            for (let name in this.parser.schema.nodes) {
                let type = this.parser.schema.nodes[name];
                if (type.isTextblock && type.defaultAttrs)
                    return type;
            }
        }
        addPendingMark(mark) {
            let found = findSameMarkInSet(mark, this.top.pendingMarks);
            if (found)
                this.top.stashMarks.push(found);
            this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);
        }
        removePendingMark(mark, upto) {
            for (let depth = this.open; depth >= 0; depth--) {
                let level = this.nodes[depth];
                let found = level.pendingMarks.lastIndexOf(mark);
                if (found > -1) {
                    level.pendingMarks = mark.removeFromSet(level.pendingMarks);
                }
                else {
                    level.activeMarks = mark.removeFromSet(level.activeMarks);
                    let stashMark = level.popFromStashMark(mark);
                    if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))
                        level.activeMarks = stashMark.addToSet(level.activeMarks);
                }
                if (level == upto)
                    break;
            }
        }
    }
    // Kludge to work around directly nested list nodes produced by some
    // tools and allowed by browsers to mean that the nested list is
    // actually part of the list item above it.
    function normalizeList(dom) {
        for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {
            let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;
            if (name && listTags.hasOwnProperty(name) && prevItem) {
                prevItem.appendChild(child);
                child = prevItem;
            }
            else if (name == "li") {
                prevItem = child;
            }
            else if (name) {
                prevItem = null;
            }
        }
    }
    // Apply a CSS selector.
    function matches(dom, selector) {
        return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);
    }
    // Tokenize a style attribute into property/value pairs.
    function parseStyles(style) {
        let re = /\s*([\w-]+)\s*:\s*([^;]+)/g, m, result = [];
        while (m = re.exec(style))
            result.push(m[1], m[2].trim());
        return result;
    }
    function copy(obj) {
        let copy = {};
        for (let prop in obj)
            copy[prop] = obj[prop];
        return copy;
    }
    // Used when finding a mark at the top level of a fragment parse.
    // Checks whether it would be reasonable to apply a given mark type to
    // a given node, by looking at the way the mark occurs in the schema.
    function markMayApply(markType, nodeType) {
        let nodes = nodeType.schema.nodes;
        for (let name in nodes) {
            let parent = nodes[name];
            if (!parent.allowsMarkType(markType))
                continue;
            let seen = [], scan = (match) => {
                seen.push(match);
                for (let i = 0; i < match.edgeCount; i++) {
                    let { type, next } = match.edge(i);
                    if (type == nodeType)
                        return true;
                    if (seen.indexOf(next) < 0 && scan(next))
                        return true;
                }
            };
            if (scan(parent.contentMatch))
                return true;
        }
    }
    function findSameMarkInSet(mark, set) {
        for (let i = 0; i < set.length; i++) {
            if (mark.eq(set[i]))
                return set[i];
        }
    }

    /**
    A DOM serializer knows how to convert ProseMirror nodes and
    marks of various types to DOM nodes.
    */
    class DOMSerializer {
        /**
        Create a serializer. `nodes` should map node names to functions
        that take a node and return a description of the corresponding
        DOM. `marks` does the same for mark names, but also gets an
        argument that tells it whether the mark's content is block or
        inline content (for typical use, it'll always be inline). A mark
        serializer may be `null` to indicate that marks of that type
        should not be serialized.
        */
        constructor(
        /**
        The node serialization functions.
        */
        nodes,
        /**
        The mark serialization functions.
        */
        marks) {
            this.nodes = nodes;
            this.marks = marks;
        }
        /**
        Serialize the content of this fragment to a DOM fragment. When
        not in the browser, the `document` option, containing a DOM
        document, should be passed so that the serializer can create
        nodes.
        */
        serializeFragment(fragment, options = {}, target) {
            if (!target)
                target = doc(options).createDocumentFragment();
            let top = target, active = [];
            fragment.forEach(node => {
                if (active.length || node.marks.length) {
                    let keep = 0, rendered = 0;
                    while (keep < active.length && rendered < node.marks.length) {
                        let next = node.marks[rendered];
                        if (!this.marks[next.type.name]) {
                            rendered++;
                            continue;
                        }
                        if (!next.eq(active[keep][0]) || next.type.spec.spanning === false)
                            break;
                        keep++;
                        rendered++;
                    }
                    while (keep < active.length)
                        top = active.pop()[1];
                    while (rendered < node.marks.length) {
                        let add = node.marks[rendered++];
                        let markDOM = this.serializeMark(add, node.isInline, options);
                        if (markDOM) {
                            active.push([add, top]);
                            top.appendChild(markDOM.dom);
                            top = markDOM.contentDOM || markDOM.dom;
                        }
                    }
                }
                top.appendChild(this.serializeNodeInner(node, options));
            });
            return target;
        }
        /**
        @internal
        */
        serializeNodeInner(node, options) {
            let { dom, contentDOM } = DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node));
            if (contentDOM) {
                if (node.isLeaf)
                    throw new RangeError("Content hole not allowed in a leaf node spec");
                this.serializeFragment(node.content, options, contentDOM);
            }
            return dom;
        }
        /**
        Serialize this node to a DOM node. This can be useful when you
        need to serialize a part of a document, as opposed to the whole
        document. To serialize a whole document, use
        [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
        its [content](https://prosemirror.net/docs/ref/#model.Node.content).
        */
        serializeNode(node, options = {}) {
            let dom = this.serializeNodeInner(node, options);
            for (let i = node.marks.length - 1; i >= 0; i--) {
                let wrap = this.serializeMark(node.marks[i], node.isInline, options);
                if (wrap) {
                    (wrap.contentDOM || wrap.dom).appendChild(dom);
                    dom = wrap.dom;
                }
            }
            return dom;
        }
        /**
        @internal
        */
        serializeMark(mark, inline, options = {}) {
            let toDOM = this.marks[mark.type.name];
            return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline));
        }
        /**
        Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If
        the spec has a hole (zero) in it, `contentDOM` will point at the
        node with the hole.
        */
        static renderSpec(doc, structure, xmlNS = null) {
            if (typeof structure == "string")
                return { dom: doc.createTextNode(structure) };
            if (structure.nodeType != null)
                return { dom: structure };
            if (structure.dom && structure.dom.nodeType != null)
                return structure;
            let tagName = structure[0], space = tagName.indexOf(" ");
            if (space > 0) {
                xmlNS = tagName.slice(0, space);
                tagName = tagName.slice(space + 1);
            }
            let contentDOM;
            let dom = (xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName));
            let attrs = structure[1], start = 1;
            if (attrs && typeof attrs == "object" && attrs.nodeType == null && !Array.isArray(attrs)) {
                start = 2;
                for (let name in attrs)
                    if (attrs[name] != null) {
                        let space = name.indexOf(" ");
                        if (space > 0)
                            dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name]);
                        else
                            dom.setAttribute(name, attrs[name]);
                    }
            }
            for (let i = start; i < structure.length; i++) {
                let child = structure[i];
                if (child === 0) {
                    if (i < structure.length - 1 || i > start)
                        throw new RangeError("Content hole must be the only child of its parent node");
                    return { dom, contentDOM: dom };
                }
                else {
                    let { dom: inner, contentDOM: innerContent } = DOMSerializer.renderSpec(doc, child, xmlNS);
                    dom.appendChild(inner);
                    if (innerContent) {
                        if (contentDOM)
                            throw new RangeError("Multiple content holes");
                        contentDOM = innerContent;
                    }
                }
            }
            return { dom, contentDOM };
        }
        /**
        Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
        properties in a schema's node and mark specs.
        */
        static fromSchema(schema) {
            return schema.cached.domSerializer ||
                (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));
        }
        /**
        Gather the serializers in a schema's node specs into an object.
        This can be useful as a base to build a custom serializer from.
        */
        static nodesFromSchema(schema) {
            let result = gatherToDOM(schema.nodes);
            if (!result.text)
                result.text = node => node.text;
            return result;
        }
        /**
        Gather the serializers in a schema's mark specs into an object.
        */
        static marksFromSchema(schema) {
            return gatherToDOM(schema.marks);
        }
    }
    function gatherToDOM(obj) {
        let result = {};
        for (let name in obj) {
            let toDOM = obj[name].spec.toDOM;
            if (toDOM)
                result[name] = toDOM;
        }
        return result;
    }
    function doc(options) {
        return options.document || window.document;
    }

    // Recovery values encode a range index and an offset. They are
    // represented as numbers, because tons of them will be created when
    // mapping, for example, a large number of decorations. The number's
    // lower 16 bits provide the index, the remaining bits the offset.
    //
    // Note: We intentionally don't use bit shift operators to en- and
    // decode these, since those clip to 32 bits, which we might in rare
    // cases want to overflow. A 64-bit float can represent 48-bit
    // integers precisely.
    const lower16 = 0xffff;
    const factor16 = Math.pow(2, 16);
    function makeRecover(index, offset) { return index + offset * factor16; }
    function recoverIndex(value) { return value & lower16; }
    function recoverOffset(value) { return (value - (value & lower16)) / factor16; }
    const DEL_BEFORE = 1;
    const DEL_AFTER = 2;
    const DEL_ACROSS = 4;
    const DEL_SIDE = 8;
    /**
    An object representing a mapped position with extra
    information.
    */
    class MapResult {
        /**
        @internal
        */
        constructor(
        /**
        The mapped version of the position.
        */
        pos,
        /**
        @internal
        */
        delInfo,
        /**
        @internal
        */
        recover) {
            this.pos = pos;
            this.delInfo = delInfo;
            this.recover = recover;
        }
        /**
        Tells you whether the position was deleted, that is, whether the
        step removed the token on the side queried (via the `assoc`)
        argument from the document.
        */
        get deleted() { return (this.delInfo & DEL_SIDE) > 0; }
        /**
        Tells you whether the token before the mapped position was deleted.
        */
        get deletedBefore() { return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0; }
        /**
        True when the token after the mapped position was deleted.
        */
        get deletedAfter() { return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0; }
        /**
        Tells whether any of the steps mapped through deletes across the
        position (including both the token before and after the
        position).
        */
        get deletedAcross() { return (this.delInfo & DEL_ACROSS) > 0; }
    }
    /**
    A map describing the deletions and insertions made by a step, which
    can be used to find the correspondence between positions in the
    pre-step version of a document and the same position in the
    post-step version.
    */
    class StepMap {
        /**
        Create a position map. The modifications to the document are
        represented as an array of numbers, in which each group of three
        represents a modified chunk as `[start, oldSize, newSize]`.
        */
        constructor(
        /**
        @internal
        */
        ranges,
        /**
        @internal
        */
        inverted = false) {
            this.ranges = ranges;
            this.inverted = inverted;
            if (!ranges.length && StepMap.empty)
                return StepMap.empty;
        }
        /**
        @internal
        */
        recover(value) {
            let diff = 0, index = recoverIndex(value);
            if (!this.inverted)
                for (let i = 0; i < index; i++)
                    diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];
            return this.ranges[index * 3] + diff + recoverOffset(value);
        }
        mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
        map(pos, assoc = 1) { return this._map(pos, assoc, true); }
        /**
        @internal
        */
        _map(pos, assoc, simple) {
            let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
            for (let i = 0; i < this.ranges.length; i += 3) {
                let start = this.ranges[i] - (this.inverted ? diff : 0);
                if (start > pos)
                    break;
                let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize;
                if (pos <= end) {
                    let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;
                    let result = start + diff + (side < 0 ? 0 : newSize);
                    if (simple)
                        return result;
                    let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start);
                    let del = pos == start ? DEL_AFTER : pos == end ? DEL_BEFORE : DEL_ACROSS;
                    if (assoc < 0 ? pos != start : pos != end)
                        del |= DEL_SIDE;
                    return new MapResult(result, del, recover);
                }
                diff += newSize - oldSize;
            }
            return simple ? pos + diff : new MapResult(pos + diff, 0, null);
        }
        /**
        @internal
        */
        touches(pos, recover) {
            let diff = 0, index = recoverIndex(recover);
            let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
            for (let i = 0; i < this.ranges.length; i += 3) {
                let start = this.ranges[i] - (this.inverted ? diff : 0);
                if (start > pos)
                    break;
                let oldSize = this.ranges[i + oldIndex], end = start + oldSize;
                if (pos <= end && i == index * 3)
                    return true;
                diff += this.ranges[i + newIndex] - oldSize;
            }
            return false;
        }
        /**
        Calls the given function on each of the changed ranges included in
        this map.
        */
        forEach(f) {
            let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
            for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {
                let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff);
                let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex];
                f(oldStart, oldStart + oldSize, newStart, newStart + newSize);
                diff += newSize - oldSize;
            }
        }
        /**
        Create an inverted version of this map. The result can be used to
        map positions in the post-step document to the pre-step document.
        */
        invert() {
            return new StepMap(this.ranges, !this.inverted);
        }
        /**
        @internal
        */
        toString() {
            return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
        }
        /**
        Create a map that moves all positions by offset `n` (which may be
        negative). This can be useful when applying steps meant for a
        sub-document to a larger document, or vice-versa.
        */
        static offset(n) {
            return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);
        }
    }
    /**
    A StepMap that contains no changed ranges.
    */
    StepMap.empty = new StepMap([]);
    /**
    A mapping represents a pipeline of zero or more [step
    maps](https://prosemirror.net/docs/ref/#transform.StepMap). It has special provisions for losslessly
    handling mapping positions through a series of steps in which some
    steps are inverted versions of earlier steps. (This comes up when
    ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for
    collaboration or history management.)
    */
    class Mapping {
        /**
        Create a new mapping with the given position maps.
        */
        constructor(
        /**
        The step maps in this mapping.
        */
        maps = [],
        /**
        @internal
        */
        mirror,
        /**
        The starting position in the `maps` array, used when `map` or
        `mapResult` is called.
        */
        from = 0,
        /**
        The end position in the `maps` array.
        */
        to = maps.length) {
            this.maps = maps;
            this.mirror = mirror;
            this.from = from;
            this.to = to;
        }
        /**
        Create a mapping that maps only through a part of this one.
        */
        slice(from = 0, to = this.maps.length) {
            return new Mapping(this.maps, this.mirror, from, to);
        }
        /**
        @internal
        */
        copy() {
            return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
        }
        /**
        Add a step map to the end of this mapping. If `mirrors` is
        given, it should be the index of the step map that is the mirror
        image of this one.
        */
        appendMap(map, mirrors) {
            this.to = this.maps.push(map);
            if (mirrors != null)
                this.setMirror(this.maps.length - 1, mirrors);
        }
        /**
        Add all the step maps in a given mapping to this one (preserving
        mirroring information).
        */
        appendMapping(mapping) {
            for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {
                let mirr = mapping.getMirror(i);
                this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : undefined);
            }
        }
        /**
        Finds the offset of the step map that mirrors the map at the
        given offset, in this mapping (as per the second argument to
        `appendMap`).
        */
        getMirror(n) {
            if (this.mirror)
                for (let i = 0; i < this.mirror.length; i++)
                    if (this.mirror[i] == n)
                        return this.mirror[i + (i % 2 ? -1 : 1)];
        }
        /**
        @internal
        */
        setMirror(n, m) {
            if (!this.mirror)
                this.mirror = [];
            this.mirror.push(n, m);
        }
        /**
        Append the inverse of the given mapping to this one.
        */
        appendMappingInverted(mapping) {
            for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {
                let mirr = mapping.getMirror(i);
                this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : undefined);
            }
        }
        /**
        Create an inverted version of this mapping.
        */
        invert() {
            let inverse = new Mapping;
            inverse.appendMappingInverted(this);
            return inverse;
        }
        /**
        Map a position through this mapping.
        */
        map(pos, assoc = 1) {
            if (this.mirror)
                return this._map(pos, assoc, true);
            for (let i = this.from; i < this.to; i++)
                pos = this.maps[i].map(pos, assoc);
            return pos;
        }
        /**
        Map a position through this mapping, returning a mapping
        result.
        */
        mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
        /**
        @internal
        */
        _map(pos, assoc, simple) {
            let delInfo = 0;
            for (let i = this.from; i < this.to; i++) {
                let map = this.maps[i], result = map.mapResult(pos, assoc);
                if (result.recover != null) {
                    let corr = this.getMirror(i);
                    if (corr != null && corr > i && corr < this.to) {
                        i = corr;
                        pos = this.maps[corr].recover(result.recover);
                        continue;
                    }
                }
                delInfo |= result.delInfo;
                pos = result.pos;
            }
            return simple ? pos : new MapResult(pos, delInfo, null);
        }
    }

    const stepsByID = Object.create(null);
    /**
    A step object represents an atomic change. It generally applies
    only to the document it was created for, since the positions
    stored in it will only make sense for that document.

    New steps are defined by creating classes that extend `Step`,
    overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`
    methods, and registering your class with a unique
    JSON-serialization identifier using
    [`Step.jsonID`](https://prosemirror.net/docs/ref/#transform.Step^jsonID).
    */
    class Step {
        /**
        Get the step map that represents the changes made by this step,
        and which can be used to transform between positions in the old
        and the new document.
        */
        getMap() { return StepMap.empty; }
        /**
        Try to merge this step with another one, to be applied directly
        after it. Returns the merged step when possible, null if the
        steps can't be merged.
        */
        merge(other) { return null; }
        /**
        Deserialize a step from its JSON representation. Will call
        through to the step class' own implementation of this method.
        */
        static fromJSON(schema, json) {
            if (!json || !json.stepType)
                throw new RangeError("Invalid input for Step.fromJSON");
            let type = stepsByID[json.stepType];
            if (!type)
                throw new RangeError(`No step type ${json.stepType} defined`);
            return type.fromJSON(schema, json);
        }
        /**
        To be able to serialize steps to JSON, each step needs a string
        ID to attach to its JSON representation. Use this method to
        register an ID for your step classes. Try to pick something
        that's unlikely to clash with steps from other modules.
        */
        static jsonID(id, stepClass) {
            if (id in stepsByID)
                throw new RangeError("Duplicate use of step JSON ID " + id);
            stepsByID[id] = stepClass;
            stepClass.prototype.jsonID = id;
            return stepClass;
        }
    }
    /**
    The result of [applying](https://prosemirror.net/docs/ref/#transform.Step.apply) a step. Contains either a
    new document or a failure value.
    */
    class StepResult {
        /**
        @internal
        */
        constructor(
        /**
        The transformed document, if successful.
        */
        doc,
        /**
        The failure message, if unsuccessful.
        */
        failed) {
            this.doc = doc;
            this.failed = failed;
        }
        /**
        Create a successful step result.
        */
        static ok(doc) { return new StepResult(doc, null); }
        /**
        Create a failed step result.
        */
        static fail(message) { return new StepResult(null, message); }
        /**
        Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
        arguments. Create a successful result if it succeeds, and a
        failed one if it throws a `ReplaceError`.
        */
        static fromReplace(doc, from, to, slice) {
            try {
                return StepResult.ok(doc.replace(from, to, slice));
            }
            catch (e) {
                if (e instanceof ReplaceError)
                    return StepResult.fail(e.message);
                throw e;
            }
        }
    }

    function mapFragment(fragment, f, parent) {
        let mapped = [];
        for (let i = 0; i < fragment.childCount; i++) {
            let child = fragment.child(i);
            if (child.content.size)
                child = child.copy(mapFragment(child.content, f, child));
            if (child.isInline)
                child = f(child, parent, i);
            mapped.push(child);
        }
        return Fragment.fromArray(mapped);
    }
    /**
    Add a mark to all inline content between two positions.
    */
    class AddMarkStep extends Step {
        /**
        Create a mark step.
        */
        constructor(
        /**
        The start of the marked range.
        */
        from,
        /**
        The end of the marked range.
        */
        to,
        /**
        The mark to add.
        */
        mark) {
            super();
            this.from = from;
            this.to = to;
            this.mark = mark;
        }
        apply(doc) {
            let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from);
            let parent = $from.node($from.sharedDepth(this.to));
            let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {
                if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type))
                    return node;
                return node.mark(this.mark.addToSet(node.marks));
            }, parent), oldSlice.openStart, oldSlice.openEnd);
            return StepResult.fromReplace(doc, this.from, this.to, slice);
        }
        invert() {
            return new RemoveMarkStep(this.from, this.to, this.mark);
        }
        map(mapping) {
            let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            if (from.deleted && to.deleted || from.pos >= to.pos)
                return null;
            return new AddMarkStep(from.pos, to.pos, this.mark);
        }
        merge(other) {
            if (other instanceof AddMarkStep &&
                other.mark.eq(this.mark) &&
                this.from <= other.to && this.to >= other.from)
                return new AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
            return null;
        }
        toJSON() {
            return { stepType: "addMark", mark: this.mark.toJSON(),
                from: this.from, to: this.to };
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number")
                throw new RangeError("Invalid input for AddMarkStep.fromJSON");
            return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
        }
    }
    Step.jsonID("addMark", AddMarkStep);
    /**
    Remove a mark from all inline content between two positions.
    */
    class RemoveMarkStep extends Step {
        /**
        Create a mark-removing step.
        */
        constructor(
        /**
        The start of the unmarked range.
        */
        from,
        /**
        The end of the unmarked range.
        */
        to,
        /**
        The mark to remove.
        */
        mark) {
            super();
            this.from = from;
            this.to = to;
            this.mark = mark;
        }
        apply(doc) {
            let oldSlice = doc.slice(this.from, this.to);
            let slice = new Slice(mapFragment(oldSlice.content, node => {
                return node.mark(this.mark.removeFromSet(node.marks));
            }, doc), oldSlice.openStart, oldSlice.openEnd);
            return StepResult.fromReplace(doc, this.from, this.to, slice);
        }
        invert() {
            return new AddMarkStep(this.from, this.to, this.mark);
        }
        map(mapping) {
            let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            if (from.deleted && to.deleted || from.pos >= to.pos)
                return null;
            return new RemoveMarkStep(from.pos, to.pos, this.mark);
        }
        merge(other) {
            if (other instanceof RemoveMarkStep &&
                other.mark.eq(this.mark) &&
                this.from <= other.to && this.to >= other.from)
                return new RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
            return null;
        }
        toJSON() {
            return { stepType: "removeMark", mark: this.mark.toJSON(),
                from: this.from, to: this.to };
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number")
                throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
            return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
        }
    }
    Step.jsonID("removeMark", RemoveMarkStep);
    /**
    Add a mark to a specific node.
    */
    class AddNodeMarkStep extends Step {
        /**
        Create a node mark step.
        */
        constructor(
        /**
        The position of the target node.
        */
        pos,
        /**
        The mark to add.
        */
        mark) {
            super();
            this.pos = pos;
            this.mark = mark;
        }
        apply(doc) {
            let node = doc.nodeAt(this.pos);
            if (!node)
                return StepResult.fail("No node at mark step's position");
            let updated = node.type.create(node.attrs, null, this.mark.addToSet(node.marks));
            return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
        }
        invert(doc) {
            let node = doc.nodeAt(this.pos);
            if (node) {
                let newSet = this.mark.addToSet(node.marks);
                if (newSet.length == node.marks.length) {
                    for (let i = 0; i < node.marks.length; i++)
                        if (!node.marks[i].isInSet(newSet))
                            return new AddNodeMarkStep(this.pos, node.marks[i]);
                    return new AddNodeMarkStep(this.pos, this.mark);
                }
            }
            return new RemoveNodeMarkStep(this.pos, this.mark);
        }
        map(mapping) {
            let pos = mapping.mapResult(this.pos, 1);
            return pos.deletedAfter ? null : new AddNodeMarkStep(pos.pos, this.mark);
        }
        toJSON() {
            return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.pos != "number")
                throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
            return new AddNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
        }
    }
    Step.jsonID("addNodeMark", AddNodeMarkStep);
    /**
    Remove a mark from a specific node.
    */
    class RemoveNodeMarkStep extends Step {
        /**
        Create a mark-removing step.
        */
        constructor(
        /**
        The position of the target node.
        */
        pos,
        /**
        The mark to remove.
        */
        mark) {
            super();
            this.pos = pos;
            this.mark = mark;
        }
        apply(doc) {
            let node = doc.nodeAt(this.pos);
            if (!node)
                return StepResult.fail("No node at mark step's position");
            let updated = node.type.create(node.attrs, null, this.mark.removeFromSet(node.marks));
            return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
        }
        invert(doc) {
            let node = doc.nodeAt(this.pos);
            if (!node || !this.mark.isInSet(node.marks))
                return this;
            return new AddNodeMarkStep(this.pos, this.mark);
        }
        map(mapping) {
            let pos = mapping.mapResult(this.pos, 1);
            return pos.deletedAfter ? null : new RemoveNodeMarkStep(pos.pos, this.mark);
        }
        toJSON() {
            return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.pos != "number")
                throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
            return new RemoveNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
        }
    }
    Step.jsonID("removeNodeMark", RemoveNodeMarkStep);

    /**
    Replace a part of the document with a slice of new content.
    */
    class ReplaceStep extends Step {
        /**
        The given `slice` should fit the 'gap' between `from` and
        `to`—the depths must line up, and the surrounding nodes must be
        able to be joined with the open sides of the slice. When
        `structure` is true, the step will fail if the content between
        from and to is not just a sequence of closing and then opening
        tokens (this is to guard against rebased replace steps
        overwriting something they weren't supposed to).
        */
        constructor(
        /**
        The start position of the replaced range.
        */
        from,
        /**
        The end position of the replaced range.
        */
        to,
        /**
        The slice to insert.
        */
        slice,
        /**
        @internal
        */
        structure = false) {
            super();
            this.from = from;
            this.to = to;
            this.slice = slice;
            this.structure = structure;
        }
        apply(doc) {
            if (this.structure && contentBetween(doc, this.from, this.to))
                return StepResult.fail("Structure replace would overwrite content");
            return StepResult.fromReplace(doc, this.from, this.to, this.slice);
        }
        getMap() {
            return new StepMap([this.from, this.to - this.from, this.slice.size]);
        }
        invert(doc) {
            return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to));
        }
        map(mapping) {
            let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            if (from.deletedAcross && to.deletedAcross)
                return null;
            return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice);
        }
        merge(other) {
            if (!(other instanceof ReplaceStep) || other.structure || this.structure)
                return null;
            if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {
                let slice = this.slice.size + other.slice.size == 0 ? Slice.empty
                    : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);
                return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure);
            }
            else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {
                let slice = this.slice.size + other.slice.size == 0 ? Slice.empty
                    : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);
                return new ReplaceStep(other.from, this.to, slice, this.structure);
            }
            else {
                return null;
            }
        }
        toJSON() {
            let json = { stepType: "replace", from: this.from, to: this.to };
            if (this.slice.size)
                json.slice = this.slice.toJSON();
            if (this.structure)
                json.structure = true;
            return json;
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number")
                throw new RangeError("Invalid input for ReplaceStep.fromJSON");
            return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure);
        }
    }
    Step.jsonID("replace", ReplaceStep);
    /**
    Replace a part of the document with a slice of content, but
    preserve a range of the replaced content by moving it into the
    slice.
    */
    class ReplaceAroundStep extends Step {
        /**
        Create a replace-around step with the given range and gap.
        `insert` should be the point in the slice into which the content
        of the gap should be moved. `structure` has the same meaning as
        it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
        */
        constructor(
        /**
        The start position of the replaced range.
        */
        from,
        /**
        The end position of the replaced range.
        */
        to,
        /**
        The start of preserved range.
        */
        gapFrom,
        /**
        The end of preserved range.
        */
        gapTo,
        /**
        The slice to insert.
        */
        slice,
        /**
        The position in the slice where the preserved range should be
        inserted.
        */
        insert,
        /**
        @internal
        */
        structure = false) {
            super();
            this.from = from;
            this.to = to;
            this.gapFrom = gapFrom;
            this.gapTo = gapTo;
            this.slice = slice;
            this.insert = insert;
            this.structure = structure;
        }
        apply(doc) {
            if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||
                contentBetween(doc, this.gapTo, this.to)))
                return StepResult.fail("Structure gap-replace would overwrite content");
            let gap = doc.slice(this.gapFrom, this.gapTo);
            if (gap.openStart || gap.openEnd)
                return StepResult.fail("Gap is not a flat range");
            let inserted = this.slice.insertAt(this.insert, gap.content);
            if (!inserted)
                return StepResult.fail("Content does not fit in gap");
            return StepResult.fromReplace(doc, this.from, this.to, inserted);
        }
        getMap() {
            return new StepMap([this.from, this.gapFrom - this.from, this.insert,
                this.gapTo, this.to - this.gapTo, this.slice.size - this.insert]);
        }
        invert(doc) {
            let gap = this.gapTo - this.gapFrom;
            return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
        }
        map(mapping) {
            let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);
            if ((from.deletedAcross && to.deletedAcross) || gapFrom < from.pos || gapTo > to.pos)
                return null;
            return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);
        }
        toJSON() {
            let json = { stepType: "replaceAround", from: this.from, to: this.to,
                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert };
            if (this.slice.size)
                json.slice = this.slice.toJSON();
            if (this.structure)
                json.structure = true;
            return json;
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number" ||
                typeof json.gapFrom != "number" || typeof json.gapTo != "number" || typeof json.insert != "number")
                throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
            return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);
        }
    }
    Step.jsonID("replaceAround", ReplaceAroundStep);
    function contentBetween(doc, from, to) {
        let $from = doc.resolve(from), dist = to - from, depth = $from.depth;
        while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {
            depth--;
            dist--;
        }
        if (dist > 0) {
            let next = $from.node(depth).maybeChild($from.indexAfter(depth));
            while (dist > 0) {
                if (!next || next.isLeaf)
                    return true;
                next = next.firstChild;
                dist--;
            }
        }
        return false;
    }

    function addMark(tr, from, to, mark) {
        let removed = [], added = [];
        let removing, adding;
        tr.doc.nodesBetween(from, to, (node, pos, parent) => {
            if (!node.isInline)
                return;
            let marks = node.marks;
            if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {
                let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);
                let newSet = mark.addToSet(marks);
                for (let i = 0; i < marks.length; i++) {
                    if (!marks[i].isInSet(newSet)) {
                        if (removing && removing.to == start && removing.mark.eq(marks[i]))
                            removing.to = end;
                        else
                            removed.push(removing = new RemoveMarkStep(start, end, marks[i]));
                    }
                }
                if (adding && adding.to == start)
                    adding.to = end;
                else
                    added.push(adding = new AddMarkStep(start, end, mark));
            }
        });
        removed.forEach(s => tr.step(s));
        added.forEach(s => tr.step(s));
    }
    function removeMark(tr, from, to, mark) {
        let matched = [], step = 0;
        tr.doc.nodesBetween(from, to, (node, pos) => {
            if (!node.isInline)
                return;
            step++;
            let toRemove = null;
            if (mark instanceof MarkType) {
                let set = node.marks, found;
                while (found = mark.isInSet(set)) {
                    (toRemove || (toRemove = [])).push(found);
                    set = found.removeFromSet(set);
                }
            }
            else if (mark) {
                if (mark.isInSet(node.marks))
                    toRemove = [mark];
            }
            else {
                toRemove = node.marks;
            }
            if (toRemove && toRemove.length) {
                let end = Math.min(pos + node.nodeSize, to);
                for (let i = 0; i < toRemove.length; i++) {
                    let style = toRemove[i], found;
                    for (let j = 0; j < matched.length; j++) {
                        let m = matched[j];
                        if (m.step == step - 1 && style.eq(matched[j].style))
                            found = m;
                    }
                    if (found) {
                        found.to = end;
                        found.step = step;
                    }
                    else {
                        matched.push({ style, from: Math.max(pos, from), to: end, step });
                    }
                }
            }
        });
        matched.forEach(m => tr.step(new RemoveMarkStep(m.from, m.to, m.style)));
    }
    function clearIncompatible(tr, pos, parentType, match = parentType.contentMatch) {
        let node = tr.doc.nodeAt(pos);
        let delSteps = [], cur = pos + 1;
        for (let i = 0; i < node.childCount; i++) {
            let child = node.child(i), end = cur + child.nodeSize;
            let allowed = match.matchType(child.type);
            if (!allowed) {
                delSteps.push(new ReplaceStep(cur, end, Slice.empty));
            }
            else {
                match = allowed;
                for (let j = 0; j < child.marks.length; j++)
                    if (!parentType.allowsMarkType(child.marks[j].type))
                        tr.step(new RemoveMarkStep(cur, end, child.marks[j]));
            }
            cur = end;
        }
        if (!match.validEnd) {
            let fill = match.fillBefore(Fragment.empty, true);
            tr.replace(cur, cur, new Slice(fill, 0, 0));
        }
        for (let i = delSteps.length - 1; i >= 0; i--)
            tr.step(delSteps[i]);
    }

    function canCut(node, start, end) {
        return (start == 0 || node.canReplace(start, node.childCount)) &&
            (end == node.childCount || node.canReplace(0, end));
    }
    /**
    Try to find a target depth to which the content in the given range
    can be lifted. Will not go across
    [isolating](https://prosemirror.net/docs/ref/#model.NodeSpec.isolating) parent nodes.
    */
    function liftTarget(range) {
        let parent = range.parent;
        let content = parent.content.cutByIndex(range.startIndex, range.endIndex);
        for (let depth = range.depth;; --depth) {
            let node = range.$from.node(depth);
            let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);
            if (depth < range.depth && node.canReplace(index, endIndex, content))
                return depth;
            if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex))
                break;
        }
        return null;
    }
    function lift(tr, range, target) {
        let { $from, $to, depth } = range;
        let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);
        let start = gapStart, end = gapEnd;
        let before = Fragment.empty, openStart = 0;
        for (let d = depth, splitting = false; d > target; d--)
            if (splitting || $from.index(d) > 0) {
                splitting = true;
                before = Fragment.from($from.node(d).copy(before));
                openStart++;
            }
            else {
                start--;
            }
        let after = Fragment.empty, openEnd = 0;
        for (let d = depth, splitting = false; d > target; d--)
            if (splitting || $to.after(d + 1) < $to.end(d)) {
                splitting = true;
                after = Fragment.from($to.node(d).copy(after));
                openEnd++;
            }
            else {
                end++;
            }
        tr.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new Slice(before.append(after), openStart, openEnd), before.size - openStart, true));
    }
    /**
    Try to find a valid way to wrap the content in the given range in a
    node of the given type. May introduce extra nodes around and inside
    the wrapper node, if necessary. Returns null if no valid wrapping
    could be found. When `innerRange` is given, that range's content is
    used as the content to fit into the wrapping, instead of the
    content of `range`.
    */
    function findWrapping(range, nodeType, attrs = null, innerRange = range) {
        let around = findWrappingOutside(range, nodeType);
        let inner = around && findWrappingInside(innerRange, nodeType);
        if (!inner)
            return null;
        return around.map(withAttrs)
            .concat({ type: nodeType, attrs }).concat(inner.map(withAttrs));
    }
    function withAttrs(type) { return { type, attrs: null }; }
    function findWrappingOutside(range, type) {
        let { parent, startIndex, endIndex } = range;
        let around = parent.contentMatchAt(startIndex).findWrapping(type);
        if (!around)
            return null;
        let outer = around.length ? around[0] : type;
        return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
    }
    function findWrappingInside(range, type) {
        let { parent, startIndex, endIndex } = range;
        let inner = parent.child(startIndex);
        let inside = type.contentMatch.findWrapping(inner.type);
        if (!inside)
            return null;
        let lastType = inside.length ? inside[inside.length - 1] : type;
        let innerMatch = lastType.contentMatch;
        for (let i = startIndex; innerMatch && i < endIndex; i++)
            innerMatch = innerMatch.matchType(parent.child(i).type);
        if (!innerMatch || !innerMatch.validEnd)
            return null;
        return inside;
    }
    function wrap(tr, range, wrappers) {
        let content = Fragment.empty;
        for (let i = wrappers.length - 1; i >= 0; i--) {
            if (content.size) {
                let match = wrappers[i].type.contentMatch.matchFragment(content);
                if (!match || !match.validEnd)
                    throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
            }
            content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
        }
        let start = range.start, end = range.end;
        tr.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true));
    }
    function setBlockType(tr, from, to, type, attrs) {
        if (!type.isTextblock)
            throw new RangeError("Type given to setBlockType should be a textblock");
        let mapFrom = tr.steps.length;
        tr.doc.nodesBetween(from, to, (node, pos) => {
            if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(tr.doc, tr.mapping.slice(mapFrom).map(pos), type)) {
                // Ensure all markup that isn't allowed in the new node type is cleared
                tr.clearIncompatible(tr.mapping.slice(mapFrom).map(pos, 1), type);
                let mapping = tr.mapping.slice(mapFrom);
                let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1);
                tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true));
                return false;
            }
        });
    }
    function canChangeType(doc, pos, type) {
        let $pos = doc.resolve(pos), index = $pos.index();
        return $pos.parent.canReplaceWith(index, index + 1, type);
    }
    /**
    Change the type, attributes, and/or marks of the node at `pos`.
    When `type` isn't given, the existing node type is preserved,
    */
    function setNodeMarkup(tr, pos, type, attrs, marks) {
        let node = tr.doc.nodeAt(pos);
        if (!node)
            throw new RangeError("No node at given position");
        if (!type)
            type = node.type;
        let newNode = type.create(attrs, null, marks || node.marks);
        if (node.isLeaf)
            return tr.replaceWith(pos, pos + node.nodeSize, newNode);
        if (!type.validContent(node.content))
            throw new RangeError("Invalid content for node type " + type.name);
        tr.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1, new Slice(Fragment.from(newNode), 0, 0), 1, true));
    }
    /**
    Check whether splitting at the given position is allowed.
    */
    function canSplit(doc, pos, depth = 1, typesAfter) {
        let $pos = doc.resolve(pos), base = $pos.depth - depth;
        let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent;
        if (base < 0 || $pos.parent.type.spec.isolating ||
            !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||
            !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))
            return false;
        for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {
            let node = $pos.node(d), index = $pos.index(d);
            if (node.type.spec.isolating)
                return false;
            let rest = node.content.cutByIndex(index, node.childCount);
            let after = (typesAfter && typesAfter[i]) || node;
            if (after != node)
                rest = rest.replaceChild(0, after.type.create(after.attrs));
            if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))
                return false;
        }
        let index = $pos.indexAfter(base);
        let baseType = typesAfter && typesAfter[0];
        return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type);
    }
    function split(tr, pos, depth = 1, typesAfter) {
        let $pos = tr.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty;
        for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {
            before = Fragment.from($pos.node(d).copy(before));
            let typeAfter = typesAfter && typesAfter[i];
            after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));
        }
        tr.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true));
    }
    /**
    Test whether the blocks before and after a given position can be
    joined.
    */
    function canJoin(doc, pos) {
        let $pos = doc.resolve(pos), index = $pos.index();
        return joinable$1($pos.nodeBefore, $pos.nodeAfter) &&
            $pos.parent.canReplace(index, index + 1);
    }
    function joinable$1(a, b) {
        return !!(a && b && !a.isLeaf && a.canAppend(b));
    }
    /**
    Find an ancestor of the given position that can be joined to the
    block before (or after if `dir` is positive). Returns the joinable
    point, if any.
    */
    function joinPoint(doc, pos, dir = -1) {
        let $pos = doc.resolve(pos);
        for (let d = $pos.depth;; d--) {
            let before, after, index = $pos.index(d);
            if (d == $pos.depth) {
                before = $pos.nodeBefore;
                after = $pos.nodeAfter;
            }
            else if (dir > 0) {
                before = $pos.node(d + 1);
                index++;
                after = $pos.node(d).maybeChild(index);
            }
            else {
                before = $pos.node(d).maybeChild(index - 1);
                after = $pos.node(d + 1);
            }
            if (before && !before.isTextblock && joinable$1(before, after) &&
                $pos.node(d).canReplace(index, index + 1))
                return pos;
            if (d == 0)
                break;
            pos = dir < 0 ? $pos.before(d) : $pos.after(d);
        }
    }
    function join(tr, pos, depth) {
        let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true);
        tr.step(step);
    }
    /**
    Try to find a point where a node of the given type can be inserted
    near `pos`, by searching up the node hierarchy when `pos` itself
    isn't a valid place but is at the start or end of a node. Return
    null if no position was found.
    */
    function insertPoint(doc, pos, nodeType) {
        let $pos = doc.resolve(pos);
        if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType))
            return pos;
        if ($pos.parentOffset == 0)
            for (let d = $pos.depth - 1; d >= 0; d--) {
                let index = $pos.index(d);
                if ($pos.node(d).canReplaceWith(index, index, nodeType))
                    return $pos.before(d + 1);
                if (index > 0)
                    return null;
            }
        if ($pos.parentOffset == $pos.parent.content.size)
            for (let d = $pos.depth - 1; d >= 0; d--) {
                let index = $pos.indexAfter(d);
                if ($pos.node(d).canReplaceWith(index, index, nodeType))
                    return $pos.after(d + 1);
                if (index < $pos.node(d).childCount)
                    return null;
            }
        return null;
    }
    /**
    Finds a position at or around the given position where the given
    slice can be inserted. Will look at parent nodes' nearest boundary
    and try there, even if the original position wasn't directly at the
    start or end of that node. Returns null when no position was found.
    */
    function dropPoint(doc, pos, slice) {
        let $pos = doc.resolve(pos);
        if (!slice.content.size)
            return pos;
        let content = slice.content;
        for (let i = 0; i < slice.openStart; i++)
            content = content.firstChild.content;
        for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {
            for (let d = $pos.depth; d >= 0; d--) {
                let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;
                let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);
                let parent = $pos.node(d), fits = false;
                if (pass == 1) {
                    fits = parent.canReplace(insertPos, insertPos, content);
                }
                else {
                    let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type);
                    fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);
                }
                if (fits)
                    return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);
            }
        }
        return null;
    }

    /**
    ‘Fit’ a slice into a given position in the document, producing a
    [step](https://prosemirror.net/docs/ref/#transform.Step) that inserts it. Will return null if
    there's no meaningful way to insert the slice here, or inserting it
    would be a no-op (an empty slice over an empty range).
    */
    function replaceStep(doc, from, to = from, slice = Slice.empty) {
        if (from == to && !slice.size)
            return null;
        let $from = doc.resolve(from), $to = doc.resolve(to);
        // Optimization -- avoid work if it's obvious that it's not needed.
        if (fitsTrivially($from, $to, slice))
            return new ReplaceStep(from, to, slice);
        return new Fitter($from, $to, slice).fit();
    }
    function fitsTrivially($from, $to, slice) {
        return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&
            $from.parent.canReplace($from.index(), $to.index(), slice.content);
    }
    // Algorithm for 'placing' the elements of a slice into a gap:
    //
    // We consider the content of each node that is open to the left to be
    // independently placeable. I.e. in <p("foo"), p("bar")>, when the
    // paragraph on the left is open, "foo" can be placed (somewhere on
    // the left side of the replacement gap) independently from p("bar").
    //
    // This class tracks the state of the placement progress in the
    // following properties:
    //
    //  - `frontier` holds a stack of `{type, match}` objects that
    //    represent the open side of the replacement. It starts at
    //    `$from`, then moves forward as content is placed, and is finally
    //    reconciled with `$to`.
    //
    //  - `unplaced` is a slice that represents the content that hasn't
    //    been placed yet.
    //
    //  - `placed` is a fragment of placed content. Its open-start value
    //    is implicit in `$from`, and its open-end value in `frontier`.
    class Fitter {
        constructor($from, $to, unplaced) {
            this.$from = $from;
            this.$to = $to;
            this.unplaced = unplaced;
            this.frontier = [];
            this.placed = Fragment.empty;
            for (let i = 0; i <= $from.depth; i++) {
                let node = $from.node(i);
                this.frontier.push({
                    type: node.type,
                    match: node.contentMatchAt($from.indexAfter(i))
                });
            }
            for (let i = $from.depth; i > 0; i--)
                this.placed = Fragment.from($from.node(i).copy(this.placed));
        }
        get depth() { return this.frontier.length - 1; }
        fit() {
            // As long as there's unplaced content, try to place some of it.
            // If that fails, either increase the open score of the unplaced
            // slice, or drop nodes from it, and then try again.
            while (this.unplaced.size) {
                let fit = this.findFittable();
                if (fit)
                    this.placeNodes(fit);
                else
                    this.openMore() || this.dropNode();
            }
            // When there's inline content directly after the frontier _and_
            // directly after `this.$to`, we must generate a `ReplaceAround`
            // step that pulls that content into the node after the frontier.
            // That means the fitting must be done to the end of the textblock
            // node after `this.$to`, not `this.$to` itself.
            let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;
            let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));
            if (!$to)
                return null;
            // If closing to `$to` succeeded, create a step
            let content = this.placed, openStart = $from.depth, openEnd = $to.depth;
            while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes
                content = content.firstChild.content;
                openStart--;
                openEnd--;
            }
            let slice = new Slice(content, openStart, openEnd);
            if (moveInline > -1)
                return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize);
            if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps
                return new ReplaceStep($from.pos, $to.pos, slice);
            return null;
        }
        // Find a position on the start spine of `this.unplaced` that has
        // content that can be moved somewhere on the frontier. Returns two
        // depths, one for the slice and one for the frontier.
        findFittable() {
            let startDepth = this.unplaced.openStart;
            for (let cur = this.unplaced.content, d = 0, openEnd = this.unplaced.openEnd; d < startDepth; d++) {
                let node = cur.firstChild;
                if (cur.childCount > 1)
                    openEnd = 0;
                if (node.type.spec.isolating && openEnd <= d) {
                    startDepth = d;
                    break;
                }
                cur = node.content;
            }
            // Only try wrapping nodes (pass 2) after finding a place without
            // wrapping failed.
            for (let pass = 1; pass <= 2; pass++) {
                for (let sliceDepth = pass == 1 ? startDepth : this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {
                    let fragment, parent = null;
                    if (sliceDepth) {
                        parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;
                        fragment = parent.content;
                    }
                    else {
                        fragment = this.unplaced.content;
                    }
                    let first = fragment.firstChild;
                    for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {
                        let { type, match } = this.frontier[frontierDepth], wrap, inject = null;
                        // In pass 1, if the next node matches, or there is no next
                        // node but the parents look compatible, we've found a
                        // place.
                        if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false))
                            : parent && type.compatibleContent(parent.type)))
                            return { sliceDepth, frontierDepth, parent, inject };
                        // In pass 2, look for a set of wrapping nodes that make
                        // `first` fit here.
                        else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))
                            return { sliceDepth, frontierDepth, parent, wrap };
                        // Don't continue looking further up if the parent node
                        // would fit here.
                        if (parent && match.matchType(parent.type))
                            break;
                    }
                }
            }
        }
        openMore() {
            let { content, openStart, openEnd } = this.unplaced;
            let inner = contentAt(content, openStart);
            if (!inner.childCount || inner.firstChild.isLeaf)
                return false;
            this.unplaced = new Slice(content, openStart + 1, Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0));
            return true;
        }
        dropNode() {
            let { content, openStart, openEnd } = this.unplaced;
            let inner = contentAt(content, openStart);
            if (inner.childCount <= 1 && openStart > 0) {
                let openAtEnd = content.size - openStart <= openStart + inner.size;
                this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1, openAtEnd ? openStart - 1 : openEnd);
            }
            else {
                this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd);
            }
        }
        // Move content from the unplaced slice at `sliceDepth` to the
        // frontier node at `frontierDepth`. Close that frontier node when
        // applicable.
        placeNodes({ sliceDepth, frontierDepth, parent, inject, wrap }) {
            while (this.depth > frontierDepth)
                this.closeFrontierNode();
            if (wrap)
                for (let i = 0; i < wrap.length; i++)
                    this.openFrontierNode(wrap[i]);
            let slice = this.unplaced, fragment = parent ? parent.content : slice.content;
            let openStart = slice.openStart - sliceDepth;
            let taken = 0, add = [];
            let { match, type } = this.frontier[frontierDepth];
            if (inject) {
                for (let i = 0; i < inject.childCount; i++)
                    add.push(inject.child(i));
                match = match.matchFragment(inject);
            }
            // Computes the amount of (end) open nodes at the end of the
            // fragment. When 0, the parent is open, but no more. When
            // negative, nothing is open.
            let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd);
            // Scan over the fragment, fitting as many child nodes as
            // possible.
            while (taken < fragment.childCount) {
                let next = fragment.child(taken), matches = match.matchType(next.type);
                if (!matches)
                    break;
                taken++;
                if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes
                    match = matches;
                    add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0, taken == fragment.childCount ? openEndCount : -1));
                }
            }
            let toEnd = taken == fragment.childCount;
            if (!toEnd)
                openEndCount = -1;
            this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add));
            this.frontier[frontierDepth].match = match;
            // If the parent types match, and the entire node was moved, and
            // it's not open, close this frontier node right away.
            if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)
                this.closeFrontierNode();
            // Add new frontier nodes for any open nodes at the end.
            for (let i = 0, cur = fragment; i < openEndCount; i++) {
                let node = cur.lastChild;
                this.frontier.push({ type: node.type, match: node.contentMatchAt(node.childCount) });
                cur = node.content;
            }
            // Update `this.unplaced`. Drop the entire node from which we
            // placed it we got to its end, otherwise just drop the placed
            // nodes.
            this.unplaced = !toEnd ? new Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)
                : sliceDepth == 0 ? Slice.empty
                    : new Slice(dropFromFragment(slice.content, sliceDepth - 1, 1), sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1);
        }
        mustMoveInline() {
            if (!this.$to.parent.isTextblock)
                return -1;
            let top = this.frontier[this.depth], level;
            if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||
                (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth))
                return -1;
            let { depth } = this.$to, after = this.$to.after(depth);
            while (depth > 1 && after == this.$to.end(--depth))
                ++after;
            return after;
        }
        findCloseLevel($to) {
            scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {
                let { match, type } = this.frontier[i];
                let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));
                let fit = contentAfterFits($to, i, type, match, dropInner);
                if (!fit)
                    continue;
                for (let d = i - 1; d >= 0; d--) {
                    let { match, type } = this.frontier[d];
                    let matches = contentAfterFits($to, d, type, match, true);
                    if (!matches || matches.childCount)
                        continue scan;
                }
                return { depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to };
            }
        }
        close($to) {
            let close = this.findCloseLevel($to);
            if (!close)
                return null;
            while (this.depth > close.depth)
                this.closeFrontierNode();
            if (close.fit.childCount)
                this.placed = addToFragment(this.placed, close.depth, close.fit);
            $to = close.move;
            for (let d = close.depth + 1; d <= $to.depth; d++) {
                let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d));
                this.openFrontierNode(node.type, node.attrs, add);
            }
            return $to;
        }
        openFrontierNode(type, attrs = null, content) {
            let top = this.frontier[this.depth];
            top.match = top.match.matchType(type);
            this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)));
            this.frontier.push({ type, match: type.contentMatch });
        }
        closeFrontierNode() {
            let open = this.frontier.pop();
            let add = open.match.fillBefore(Fragment.empty, true);
            if (add.childCount)
                this.placed = addToFragment(this.placed, this.frontier.length, add);
        }
    }
    function dropFromFragment(fragment, depth, count) {
        if (depth == 0)
            return fragment.cutByIndex(count, fragment.childCount);
        return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)));
    }
    function addToFragment(fragment, depth, content) {
        if (depth == 0)
            return fragment.append(content);
        return fragment.replaceChild(fragment.childCount - 1, fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)));
    }
    function contentAt(fragment, depth) {
        for (let i = 0; i < depth; i++)
            fragment = fragment.firstChild.content;
        return fragment;
    }
    function closeNodeStart(node, openStart, openEnd) {
        if (openStart <= 0)
            return node;
        let frag = node.content;
        if (openStart > 1)
            frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0));
        if (openStart > 0) {
            frag = node.type.contentMatch.fillBefore(frag).append(frag);
            if (openEnd <= 0)
                frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true));
        }
        return node.copy(frag);
    }
    function contentAfterFits($to, depth, type, match, open) {
        let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth);
        if (index == node.childCount && !type.compatibleContent(node.type))
            return null;
        let fit = match.fillBefore(node.content, true, index);
        return fit && !invalidMarks(type, node.content, index) ? fit : null;
    }
    function invalidMarks(type, fragment, start) {
        for (let i = start; i < fragment.childCount; i++)
            if (!type.allowsMarks(fragment.child(i).marks))
                return true;
        return false;
    }
    function definesContent(type) {
        return type.spec.defining || type.spec.definingForContent;
    }
    function replaceRange(tr, from, to, slice) {
        if (!slice.size)
            return tr.deleteRange(from, to);
        let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
        if (fitsTrivially($from, $to, slice))
            return tr.step(new ReplaceStep(from, to, slice));
        let targetDepths = coveredDepths($from, tr.doc.resolve(to));
        // Can't replace the whole document, so remove 0 if it's present
        if (targetDepths[targetDepths.length - 1] == 0)
            targetDepths.pop();
        // Negative numbers represent not expansion over the whole node at
        // that depth, but replacing from $from.before(-D) to $to.pos.
        let preferredTarget = -($from.depth + 1);
        targetDepths.unshift(preferredTarget);
        // This loop picks a preferred target depth, if one of the covering
        // depths is not outside of a defining node, and adds negative
        // depths for any depth that has $from at its start and does not
        // cross a defining node.
        for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {
            let spec = $from.node(d).type.spec;
            if (spec.defining || spec.definingAsContext || spec.isolating)
                break;
            if (targetDepths.indexOf(d) > -1)
                preferredTarget = d;
            else if ($from.before(d) == pos)
                targetDepths.splice(1, 0, -d);
        }
        // Try to fit each possible depth of the slice into each possible
        // target depth, starting with the preferred depths.
        let preferredTargetIndex = targetDepths.indexOf(preferredTarget);
        let leftNodes = [], preferredDepth = slice.openStart;
        for (let content = slice.content, i = 0;; i++) {
            let node = content.firstChild;
            leftNodes.push(node);
            if (i == slice.openStart)
                break;
            content = node.content;
        }
        // Back up preferredDepth to cover defining textblocks directly
        // above it, possibly skipping a non-defining textblock.
        for (let d = preferredDepth - 1; d >= 0; d--) {
            let type = leftNodes[d].type, def = definesContent(type);
            if (def && $from.node(preferredTargetIndex).type != type)
                preferredDepth = d;
            else if (def || !type.isTextblock)
                break;
        }
        for (let j = slice.openStart; j >= 0; j--) {
            let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);
            let insert = leftNodes[openDepth];
            if (!insert)
                continue;
            for (let i = 0; i < targetDepths.length; i++) {
                // Loop over possible expansion levels, starting with the
                // preferred one
                let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true;
                if (targetDepth < 0) {
                    expand = false;
                    targetDepth = -targetDepth;
                }
                let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1);
                if (parent.canReplaceWith(index, index, insert.type, insert.marks))
                    return tr.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth), openDepth, slice.openEnd));
            }
        }
        let startSteps = tr.steps.length;
        for (let i = targetDepths.length - 1; i >= 0; i--) {
            tr.replace(from, to, slice);
            if (tr.steps.length > startSteps)
                break;
            let depth = targetDepths[i];
            if (depth < 0)
                continue;
            from = $from.before(depth);
            to = $to.after(depth);
        }
    }
    function closeFragment(fragment, depth, oldOpen, newOpen, parent) {
        if (depth < oldOpen) {
            let first = fragment.firstChild;
            fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));
        }
        if (depth > newOpen) {
            let match = parent.contentMatchAt(0);
            let start = match.fillBefore(fragment).append(fragment);
            fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true));
        }
        return fragment;
    }
    function replaceRangeWith(tr, from, to, node) {
        if (!node.isInline && from == to && tr.doc.resolve(from).parent.content.size) {
            let point = insertPoint(tr.doc, from, node.type);
            if (point != null)
                from = to = point;
        }
        tr.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0));
    }
    function deleteRange(tr, from, to) {
        let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
        let covered = coveredDepths($from, $to);
        for (let i = 0; i < covered.length; i++) {
            let depth = covered[i], last = i == covered.length - 1;
            if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)
                return tr.delete($from.start(depth), $to.end(depth));
            if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))
                return tr.delete($from.before(depth), $to.after(depth));
        }
        for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {
            if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)
                return tr.delete($from.before(d), to);
        }
        tr.delete(from, to);
    }
    // Returns an array of all depths for which $from - $to spans the
    // whole content of the nodes at that depth.
    function coveredDepths($from, $to) {
        let result = [], minDepth = Math.min($from.depth, $to.depth);
        for (let d = minDepth; d >= 0; d--) {
            let start = $from.start(d);
            if (start < $from.pos - ($from.depth - d) ||
                $to.end(d) > $to.pos + ($to.depth - d) ||
                $from.node(d).type.spec.isolating ||
                $to.node(d).type.spec.isolating)
                break;
            if (start == $to.start(d) ||
                (d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent &&
                    d && $to.start(d - 1) == start - 1))
                result.push(d);
        }
        return result;
    }

    /**
    Update an attribute in a specific node.
    */
    class AttrStep extends Step {
        /**
        Construct an attribute step.
        */
        constructor(
        /**
        The position of the target node.
        */
        pos,
        /**
        The attribute to set.
        */
        attr,
        // The attribute's new value.
        value) {
            super();
            this.pos = pos;
            this.attr = attr;
            this.value = value;
        }
        apply(doc) {
            let node = doc.nodeAt(this.pos);
            if (!node)
                return StepResult.fail("No node at attribute step's position");
            let attrs = Object.create(null);
            for (let name in node.attrs)
                attrs[name] = node.attrs[name];
            attrs[this.attr] = this.value;
            let updated = node.type.create(attrs, null, node.marks);
            return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
        }
        getMap() {
            return StepMap.empty;
        }
        invert(doc) {
            return new AttrStep(this.pos, this.attr, doc.nodeAt(this.pos).attrs[this.attr]);
        }
        map(mapping) {
            let pos = mapping.mapResult(this.pos, 1);
            return pos.deletedAfter ? null : new AttrStep(pos.pos, this.attr, this.value);
        }
        toJSON() {
            return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
        }
        static fromJSON(schema, json) {
            if (typeof json.pos != "number" || typeof json.attr != "string")
                throw new RangeError("Invalid input for AttrStep.fromJSON");
            return new AttrStep(json.pos, json.attr, json.value);
        }
    }
    Step.jsonID("attr", AttrStep);

    /**
    @internal
    */
    let TransformError = class extends Error {
    };
    TransformError = function TransformError(message) {
        let err = Error.call(this, message);
        err.__proto__ = TransformError.prototype;
        return err;
    };
    TransformError.prototype = Object.create(Error.prototype);
    TransformError.prototype.constructor = TransformError;
    TransformError.prototype.name = "TransformError";
    /**
    Abstraction to build up and track an array of
    [steps](https://prosemirror.net/docs/ref/#transform.Step) representing a document transformation.

    Most transforming methods return the `Transform` object itself, so
    that they can be chained.
    */
    class Transform {
        /**
        Create a transform that starts with the given document.
        */
        constructor(
        /**
        The current document (the result of applying the steps in the
        transform).
        */
        doc) {
            this.doc = doc;
            /**
            The steps in this transform.
            */
            this.steps = [];
            /**
            The documents before each of the steps.
            */
            this.docs = [];
            /**
            A mapping with the maps for each of the steps in this transform.
            */
            this.mapping = new Mapping;
        }
        /**
        The starting document.
        */
        get before() { return this.docs.length ? this.docs[0] : this.doc; }
        /**
        Apply a new step in this transform, saving the result. Throws an
        error when the step fails.
        */
        step(step) {
            let result = this.maybeStep(step);
            if (result.failed)
                throw new TransformError(result.failed);
            return this;
        }
        /**
        Try to apply a step in this transformation, ignoring it if it
        fails. Returns the step result.
        */
        maybeStep(step) {
            let result = step.apply(this.doc);
            if (!result.failed)
                this.addStep(step, result.doc);
            return result;
        }
        /**
        True when the document has been changed (when there are any
        steps).
        */
        get docChanged() {
            return this.steps.length > 0;
        }
        /**
        @internal
        */
        addStep(step, doc) {
            this.docs.push(this.doc);
            this.steps.push(step);
            this.mapping.appendMap(step.getMap());
            this.doc = doc;
        }
        /**
        Replace the part of the document between `from` and `to` with the
        given `slice`.
        */
        replace(from, to = from, slice = Slice.empty) {
            let step = replaceStep(this.doc, from, to, slice);
            if (step)
                this.step(step);
            return this;
        }
        /**
        Replace the given range with the given content, which may be a
        fragment, node, or array of nodes.
        */
        replaceWith(from, to, content) {
            return this.replace(from, to, new Slice(Fragment.from(content), 0, 0));
        }
        /**
        Delete the content between the given positions.
        */
        delete(from, to) {
            return this.replace(from, to, Slice.empty);
        }
        /**
        Insert the given content at the given position.
        */
        insert(pos, content) {
            return this.replaceWith(pos, pos, content);
        }
        /**
        Replace a range of the document with a given slice, using
        `from`, `to`, and the slice's
        [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
        than fixed start and end points. This method may grow the
        replaced area or close open nodes in the slice in order to get a
        fit that is more in line with WYSIWYG expectations, by dropping
        fully covered parent nodes of the replaced region when they are
        marked [non-defining as
        context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
        open parent node from the slice that _is_ marked as [defining
        its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).

        This is the method, for example, to handle paste. The similar
        [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
        primitive tool which will _not_ move the start and end of its given
        range, and is useful in situations where you need more precise
        control over what happens.
        */
        replaceRange(from, to, slice) {
            replaceRange(this, from, to, slice);
            return this;
        }
        /**
        Replace the given range with a node, but use `from` and `to` as
        hints, rather than precise positions. When from and to are the same
        and are at the start or end of a parent node in which the given
        node doesn't fit, this method may _move_ them out towards a parent
        that does allow the given node to be placed. When the given range
        completely covers a parent node, this method may completely replace
        that parent node.
        */
        replaceRangeWith(from, to, node) {
            replaceRangeWith(this, from, to, node);
            return this;
        }
        /**
        Delete the given range, expanding it to cover fully covered
        parent nodes until a valid replace is found.
        */
        deleteRange(from, to) {
            deleteRange(this, from, to);
            return this;
        }
        /**
        Split the content in the given range off from its parent, if there
        is sibling content before or after it, and move it up the tree to
        the depth specified by `target`. You'll probably want to use
        [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
        sure the lift is valid.
        */
        lift(range, target) {
            lift(this, range, target);
            return this;
        }
        /**
        Join the blocks around the given position. If depth is 2, their
        last and first siblings are also joined, and so on.
        */
        join(pos, depth = 1) {
            join(this, pos, depth);
            return this;
        }
        /**
        Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
        The wrappers are assumed to be valid in this position, and should
        probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
        */
        wrap(range, wrappers) {
            wrap(this, range, wrappers);
            return this;
        }
        /**
        Set the type of all textblocks (partly) between `from` and `to` to
        the given node type with the given attributes.
        */
        setBlockType(from, to = from, type, attrs = null) {
            setBlockType(this, from, to, type, attrs);
            return this;
        }
        /**
        Change the type, attributes, and/or marks of the node at `pos`.
        When `type` isn't given, the existing node type is preserved,
        */
        setNodeMarkup(pos, type, attrs = null, marks) {
            setNodeMarkup(this, pos, type, attrs, marks);
            return this;
        }
        /**
        Set a single attribute on a given node to a new value.
        */
        setNodeAttribute(pos, attr, value) {
            this.step(new AttrStep(pos, attr, value));
            return this;
        }
        /**
        Add a mark to the node at position `pos`.
        */
        addNodeMark(pos, mark) {
            this.step(new AddNodeMarkStep(pos, mark));
            return this;
        }
        /**
        Remove a mark (or a mark of the given type) from the node at
        position `pos`.
        */
        removeNodeMark(pos, mark) {
            if (!(mark instanceof Mark)) {
                let node = this.doc.nodeAt(pos);
                if (!node)
                    throw new RangeError("No node at position " + pos);
                mark = mark.isInSet(node.marks);
                if (!mark)
                    return this;
            }
            this.step(new RemoveNodeMarkStep(pos, mark));
            return this;
        }
        /**
        Split the node at the given position, and optionally, if `depth` is
        greater than one, any number of nodes above that. By default, the
        parts split off will inherit the node type of the original node.
        This can be changed by passing an array of types and attributes to
        use after the split.
        */
        split(pos, depth = 1, typesAfter) {
            split(this, pos, depth, typesAfter);
            return this;
        }
        /**
        Add the given mark to the inline content between `from` and `to`.
        */
        addMark(from, to, mark) {
            addMark(this, from, to, mark);
            return this;
        }
        /**
        Remove marks from inline nodes between `from` and `to`. When
        `mark` is a single mark, remove precisely that mark. When it is
        a mark type, remove all marks of that type. When it is null,
        remove all marks of any type.
        */
        removeMark(from, to, mark) {
            removeMark(this, from, to, mark);
            return this;
        }
        /**
        Removes all marks and nodes from the content of the node at
        `pos` that don't match the given new parent node type. Accepts
        an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
        third argument.
        */
        clearIncompatible(pos, parentType, match) {
            clearIncompatible(this, pos, parentType, match);
            return this;
        }
    }

    const classesById = Object.create(null);
    /**
    Superclass for editor selections. Every selection type should
    extend this. Should not be instantiated directly.
    */
    class Selection {
        /**
        Initialize a selection with the head and anchor and ranges. If no
        ranges are given, constructs a single range across `$anchor` and
        `$head`.
        */
        constructor(
        /**
        The resolved anchor of the selection (the side that stays in
        place when the selection is modified).
        */
        $anchor,
        /**
        The resolved head of the selection (the side that moves when
        the selection is modified).
        */
        $head, ranges) {
            this.$anchor = $anchor;
            this.$head = $head;
            this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))];
        }
        /**
        The selection's anchor, as an unresolved position.
        */
        get anchor() { return this.$anchor.pos; }
        /**
        The selection's head.
        */
        get head() { return this.$head.pos; }
        /**
        The lower bound of the selection's main range.
        */
        get from() { return this.$from.pos; }
        /**
        The upper bound of the selection's main range.
        */
        get to() { return this.$to.pos; }
        /**
        The resolved lower  bound of the selection's main range.
        */
        get $from() {
            return this.ranges[0].$from;
        }
        /**
        The resolved upper bound of the selection's main range.
        */
        get $to() {
            return this.ranges[0].$to;
        }
        /**
        Indicates whether the selection contains any content.
        */
        get empty() {
            let ranges = this.ranges;
            for (let i = 0; i < ranges.length; i++)
                if (ranges[i].$from.pos != ranges[i].$to.pos)
                    return false;
            return true;
        }
        /**
        Get the content of this selection as a slice.
        */
        content() {
            return this.$from.doc.slice(this.from, this.to, true);
        }
        /**
        Replace the selection with a slice or, if no slice is given,
        delete the selection. Will append to the given transaction.
        */
        replace(tr, content = Slice.empty) {
            // Put the new selection at the position after the inserted
            // content. When that ended in an inline node, search backwards,
            // to get the position after that node. If not, search forward.
            let lastNode = content.content.lastChild, lastParent = null;
            for (let i = 0; i < content.openEnd; i++) {
                lastParent = lastNode;
                lastNode = lastNode.lastChild;
            }
            let mapFrom = tr.steps.length, ranges = this.ranges;
            for (let i = 0; i < ranges.length; i++) {
                let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
                tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content);
                if (i == 0)
                    selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);
            }
        }
        /**
        Replace the selection with the given node, appending the changes
        to the given transaction.
        */
        replaceWith(tr, node) {
            let mapFrom = tr.steps.length, ranges = this.ranges;
            for (let i = 0; i < ranges.length; i++) {
                let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
                let from = mapping.map($from.pos), to = mapping.map($to.pos);
                if (i) {
                    tr.deleteRange(from, to);
                }
                else {
                    tr.replaceRangeWith(from, to, node);
                    selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1);
                }
            }
        }
        /**
        Find a valid cursor or leaf node selection starting at the given
        position and searching back if `dir` is negative, and forward if
        positive. When `textOnly` is true, only consider cursor
        selections. Will return null when no valid selection position is
        found.
        */
        static findFrom($pos, dir, textOnly = false) {
            let inner = $pos.parent.inlineContent ? new TextSelection($pos)
                : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);
            if (inner)
                return inner;
            for (let depth = $pos.depth - 1; depth >= 0; depth--) {
                let found = dir < 0
                    ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)
                    : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);
                if (found)
                    return found;
            }
            return null;
        }
        /**
        Find a valid cursor or leaf node selection near the given
        position. Searches forward first by default, but if `bias` is
        negative, it will search backwards first.
        */
        static near($pos, bias = 1) {
            return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));
        }
        /**
        Find the cursor or leaf node selection closest to the start of
        the given document. Will return an
        [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
        exists.
        */
        static atStart(doc) {
            return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc);
        }
        /**
        Find the cursor or leaf node selection closest to the end of the
        given document.
        */
        static atEnd(doc) {
            return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc);
        }
        /**
        Deserialize the JSON representation of a selection. Must be
        implemented for custom classes (as a static class method).
        */
        static fromJSON(doc, json) {
            if (!json || !json.type)
                throw new RangeError("Invalid input for Selection.fromJSON");
            let cls = classesById[json.type];
            if (!cls)
                throw new RangeError(`No selection type ${json.type} defined`);
            return cls.fromJSON(doc, json);
        }
        /**
        To be able to deserialize selections from JSON, custom selection
        classes must register themselves with an ID string, so that they
        can be disambiguated. Try to pick something that's unlikely to
        clash with classes from other modules.
        */
        static jsonID(id, selectionClass) {
            if (id in classesById)
                throw new RangeError("Duplicate use of selection JSON ID " + id);
            classesById[id] = selectionClass;
            selectionClass.prototype.jsonID = id;
            return selectionClass;
        }
        /**
        Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
        which is a value that can be mapped without having access to a
        current document, and later resolved to a real selection for a
        given document again. (This is used mostly by the history to
        track and restore old selections.) The default implementation of
        this method just converts the selection to a text selection and
        returns the bookmark for that.
        */
        getBookmark() {
            return TextSelection.between(this.$anchor, this.$head).getBookmark();
        }
    }
    Selection.prototype.visible = true;
    /**
    Represents a selected range in a document.
    */
    class SelectionRange {
        /**
        Create a range.
        */
        constructor(
        /**
        The lower bound of the range.
        */
        $from,
        /**
        The upper bound of the range.
        */
        $to) {
            this.$from = $from;
            this.$to = $to;
        }
    }
    let warnedAboutTextSelection = false;
    function checkTextSelection($pos) {
        if (!warnedAboutTextSelection && !$pos.parent.inlineContent) {
            warnedAboutTextSelection = true;
            console["warn"]("TextSelection endpoint not pointing into a node with inline content (" + $pos.parent.type.name + ")");
        }
    }
    /**
    A text selection represents a classical editor selection, with a
    head (the moving side) and anchor (immobile side), both of which
    point into textblock nodes. It can be empty (a regular cursor
    position).
    */
    class TextSelection extends Selection {
        /**
        Construct a text selection between the given points.
        */
        constructor($anchor, $head = $anchor) {
            checkTextSelection($anchor);
            checkTextSelection($head);
            super($anchor, $head);
        }
        /**
        Returns a resolved position if this is a cursor selection (an
        empty text selection), and null otherwise.
        */
        get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null; }
        map(doc, mapping) {
            let $head = doc.resolve(mapping.map(this.head));
            if (!$head.parent.inlineContent)
                return Selection.near($head);
            let $anchor = doc.resolve(mapping.map(this.anchor));
            return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);
        }
        replace(tr, content = Slice.empty) {
            super.replace(tr, content);
            if (content == Slice.empty) {
                let marks = this.$from.marksAcross(this.$to);
                if (marks)
                    tr.ensureMarks(marks);
            }
        }
        eq(other) {
            return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head;
        }
        getBookmark() {
            return new TextBookmark(this.anchor, this.head);
        }
        toJSON() {
            return { type: "text", anchor: this.anchor, head: this.head };
        }
        /**
        @internal
        */
        static fromJSON(doc, json) {
            if (typeof json.anchor != "number" || typeof json.head != "number")
                throw new RangeError("Invalid input for TextSelection.fromJSON");
            return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head));
        }
        /**
        Create a text selection from non-resolved positions.
        */
        static create(doc, anchor, head = anchor) {
            let $anchor = doc.resolve(anchor);
            return new this($anchor, head == anchor ? $anchor : doc.resolve(head));
        }
        /**
        Return a text selection that spans the given positions or, if
        they aren't text positions, find a text selection near them.
        `bias` determines whether the method searches forward (default)
        or backwards (negative number) first. Will fall back to calling
        [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
        doesn't contain a valid text position.
        */
        static between($anchor, $head, bias) {
            let dPos = $anchor.pos - $head.pos;
            if (!bias || dPos)
                bias = dPos >= 0 ? 1 : -1;
            if (!$head.parent.inlineContent) {
                let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);
                if (found)
                    $head = found.$head;
                else
                    return Selection.near($head, bias);
            }
            if (!$anchor.parent.inlineContent) {
                if (dPos == 0) {
                    $anchor = $head;
                }
                else {
                    $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;
                    if (($anchor.pos < $head.pos) != (dPos < 0))
                        $anchor = $head;
                }
            }
            return new TextSelection($anchor, $head);
        }
    }
    Selection.jsonID("text", TextSelection);
    class TextBookmark {
        constructor(anchor, head) {
            this.anchor = anchor;
            this.head = head;
        }
        map(mapping) {
            return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head));
        }
        resolve(doc) {
            return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head));
        }
    }
    /**
    A node selection is a selection that points at a single node. All
    nodes marked [selectable](https://prosemirror.net/docs/ref/#model.NodeSpec.selectable) can be the
    target of a node selection. In such a selection, `from` and `to`
    point directly before and after the selected node, `anchor` equals
    `from`, and `head` equals `to`..
    */
    class NodeSelection extends Selection {
        /**
        Create a node selection. Does not verify the validity of its
        argument.
        */
        constructor($pos) {
            let node = $pos.nodeAfter;
            let $end = $pos.node(0).resolve($pos.pos + node.nodeSize);
            super($pos, $end);
            this.node = node;
        }
        map(doc, mapping) {
            let { deleted, pos } = mapping.mapResult(this.anchor);
            let $pos = doc.resolve(pos);
            if (deleted)
                return Selection.near($pos);
            return new NodeSelection($pos);
        }
        content() {
            return new Slice(Fragment.from(this.node), 0, 0);
        }
        eq(other) {
            return other instanceof NodeSelection && other.anchor == this.anchor;
        }
        toJSON() {
            return { type: "node", anchor: this.anchor };
        }
        getBookmark() { return new NodeBookmark(this.anchor); }
        /**
        @internal
        */
        static fromJSON(doc, json) {
            if (typeof json.anchor != "number")
                throw new RangeError("Invalid input for NodeSelection.fromJSON");
            return new NodeSelection(doc.resolve(json.anchor));
        }
        /**
        Create a node selection from non-resolved positions.
        */
        static create(doc, from) {
            return new NodeSelection(doc.resolve(from));
        }
        /**
        Determines whether the given node may be selected as a node
        selection.
        */
        static isSelectable(node) {
            return !node.isText && node.type.spec.selectable !== false;
        }
    }
    NodeSelection.prototype.visible = false;
    Selection.jsonID("node", NodeSelection);
    class NodeBookmark {
        constructor(anchor) {
            this.anchor = anchor;
        }
        map(mapping) {
            let { deleted, pos } = mapping.mapResult(this.anchor);
            return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos);
        }
        resolve(doc) {
            let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter;
            if (node && NodeSelection.isSelectable(node))
                return new NodeSelection($pos);
            return Selection.near($pos);
        }
    }
    /**
    A selection type that represents selecting the whole document
    (which can not necessarily be expressed with a text selection, when
    there are for example leaf block nodes at the start or end of the
    document).
    */
    class AllSelection extends Selection {
        /**
        Create an all-selection over the given document.
        */
        constructor(doc) {
            super(doc.resolve(0), doc.resolve(doc.content.size));
        }
        replace(tr, content = Slice.empty) {
            if (content == Slice.empty) {
                tr.delete(0, tr.doc.content.size);
                let sel = Selection.atStart(tr.doc);
                if (!sel.eq(tr.selection))
                    tr.setSelection(sel);
            }
            else {
                super.replace(tr, content);
            }
        }
        toJSON() { return { type: "all" }; }
        /**
        @internal
        */
        static fromJSON(doc) { return new AllSelection(doc); }
        map(doc) { return new AllSelection(doc); }
        eq(other) { return other instanceof AllSelection; }
        getBookmark() { return AllBookmark; }
    }
    Selection.jsonID("all", AllSelection);
    const AllBookmark = {
        map() { return this; },
        resolve(doc) { return new AllSelection(doc); }
    };
    // FIXME we'll need some awareness of text direction when scanning for selections
    // Try to find a selection inside the given node. `pos` points at the
    // position where the search starts. When `text` is true, only return
    // text selections.
    function findSelectionIn(doc, node, pos, index, dir, text = false) {
        if (node.inlineContent)
            return TextSelection.create(doc, pos);
        for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {
            let child = node.child(i);
            if (!child.isAtom) {
                let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);
                if (inner)
                    return inner;
            }
            else if (!text && NodeSelection.isSelectable(child)) {
                return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0));
            }
            pos += child.nodeSize * dir;
        }
        return null;
    }
    function selectionToInsertionEnd(tr, startLen, bias) {
        let last = tr.steps.length - 1;
        if (last < startLen)
            return;
        let step = tr.steps[last];
        if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep))
            return;
        let map = tr.mapping.maps[last], end;
        map.forEach((_from, _to, _newFrom, newTo) => { if (end == null)
            end = newTo; });
        tr.setSelection(Selection.near(tr.doc.resolve(end), bias));
    }

    const UPDATED_SEL = 1;
    const UPDATED_MARKS = 2;
    const UPDATED_SCROLL = 4;
    /**
    An editor state transaction, which can be applied to a state to
    create an updated state. Use
    [`EditorState.tr`](https://prosemirror.net/docs/ref/#state.EditorState.tr) to create an instance.

    Transactions track changes to the document (they are a subclass of
    [`Transform`](https://prosemirror.net/docs/ref/#transform.Transform)), but also other state changes,
    like selection updates and adjustments of the set of [stored
    marks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks). In addition, you can store
    metadata properties in a transaction, which are extra pieces of
    information that client code or plugins can use to describe what a
    transaction represents, so that they can update their [own
    state](https://prosemirror.net/docs/ref/#state.StateField) accordingly.

    The [editor view](https://prosemirror.net/docs/ref/#view.EditorView) uses a few metadata properties:
    it will attach a property `"pointer"` with the value `true` to
    selection transactions directly caused by mouse or touch input, and
    a `"uiEvent"` property of that may be `"paste"`, `"cut"`, or `"drop"`.
    */
    class Transaction extends Transform {
        /**
        @internal
        */
        constructor(state) {
            super(state.doc);
            // The step count for which the current selection is valid.
            this.curSelectionFor = 0;
            // Bitfield to track which aspects of the state were updated by
            // this transaction.
            this.updated = 0;
            // Object used to store metadata properties for the transaction.
            this.meta = Object.create(null);
            this.time = Date.now();
            this.curSelection = state.selection;
            this.storedMarks = state.storedMarks;
        }
        /**
        The transaction's current selection. This defaults to the editor
        selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
        transaction, but can be overwritten with
        [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
        */
        get selection() {
            if (this.curSelectionFor < this.steps.length) {
                this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));
                this.curSelectionFor = this.steps.length;
            }
            return this.curSelection;
        }
        /**
        Update the transaction's current selection. Will determine the
        selection that the editor gets when the transaction is applied.
        */
        setSelection(selection) {
            if (selection.$from.doc != this.doc)
                throw new RangeError("Selection passed to setSelection must point at the current document");
            this.curSelection = selection;
            this.curSelectionFor = this.steps.length;
            this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;
            this.storedMarks = null;
            return this;
        }
        /**
        Whether the selection was explicitly updated by this transaction.
        */
        get selectionSet() {
            return (this.updated & UPDATED_SEL) > 0;
        }
        /**
        Set the current stored marks.
        */
        setStoredMarks(marks) {
            this.storedMarks = marks;
            this.updated |= UPDATED_MARKS;
            return this;
        }
        /**
        Make sure the current stored marks or, if that is null, the marks
        at the selection, match the given set of marks. Does nothing if
        this is already the case.
        */
        ensureMarks(marks) {
            if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))
                this.setStoredMarks(marks);
            return this;
        }
        /**
        Add a mark to the set of stored marks.
        */
        addStoredMark(mark) {
            return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));
        }
        /**
        Remove a mark or mark type from the set of stored marks.
        */
        removeStoredMark(mark) {
            return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));
        }
        /**
        Whether the stored marks were explicitly set for this transaction.
        */
        get storedMarksSet() {
            return (this.updated & UPDATED_MARKS) > 0;
        }
        /**
        @internal
        */
        addStep(step, doc) {
            super.addStep(step, doc);
            this.updated = this.updated & ~UPDATED_MARKS;
            this.storedMarks = null;
        }
        /**
        Update the timestamp for the transaction.
        */
        setTime(time) {
            this.time = time;
            return this;
        }
        /**
        Replace the current selection with the given slice.
        */
        replaceSelection(slice) {
            this.selection.replace(this, slice);
            return this;
        }
        /**
        Replace the selection with the given node. When `inheritMarks` is
        true and the content is inline, it inherits the marks from the
        place where it is inserted.
        */
        replaceSelectionWith(node, inheritMarks = true) {
            let selection = this.selection;
            if (inheritMarks)
                node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark.none)));
            selection.replaceWith(this, node);
            return this;
        }
        /**
        Delete the selection.
        */
        deleteSelection() {
            this.selection.replace(this);
            return this;
        }
        /**
        Replace the given range, or the selection if no range is given,
        with a text node containing the given string.
        */
        insertText(text, from, to) {
            let schema = this.doc.type.schema;
            if (from == null) {
                if (!text)
                    return this.deleteSelection();
                return this.replaceSelectionWith(schema.text(text), true);
            }
            else {
                if (to == null)
                    to = from;
                to = to == null ? from : to;
                if (!text)
                    return this.deleteRange(from, to);
                let marks = this.storedMarks;
                if (!marks) {
                    let $from = this.doc.resolve(from);
                    marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to));
                }
                this.replaceRangeWith(from, to, schema.text(text, marks));
                if (!this.selection.empty)
                    this.setSelection(Selection.near(this.selection.$to));
                return this;
            }
        }
        /**
        Store a metadata property in this transaction, keyed either by
        name or by plugin.
        */
        setMeta(key, value) {
            this.meta[typeof key == "string" ? key : key.key] = value;
            return this;
        }
        /**
        Retrieve a metadata property for a given name or plugin.
        */
        getMeta(key) {
            return this.meta[typeof key == "string" ? key : key.key];
        }
        /**
        Returns true if this transaction doesn't contain any metadata,
        and can thus safely be extended.
        */
        get isGeneric() {
            for (let _ in this.meta)
                return false;
            return true;
        }
        /**
        Indicate that the editor should scroll the selection into view
        when updated to the state produced by this transaction.
        */
        scrollIntoView() {
            this.updated |= UPDATED_SCROLL;
            return this;
        }
        /**
        True when this transaction has had `scrollIntoView` called on it.
        */
        get scrolledIntoView() {
            return (this.updated & UPDATED_SCROLL) > 0;
        }
    }

    function bind(f, self) {
        return !self || !f ? f : f.bind(self);
    }
    class FieldDesc {
        constructor(name, desc, self) {
            this.name = name;
            this.init = bind(desc.init, self);
            this.apply = bind(desc.apply, self);
        }
    }
    const baseFields = [
        new FieldDesc("doc", {
            init(config) { return config.doc || config.schema.topNodeType.createAndFill(); },
            apply(tr) { return tr.doc; }
        }),
        new FieldDesc("selection", {
            init(config, instance) { return config.selection || Selection.atStart(instance.doc); },
            apply(tr) { return tr.selection; }
        }),
        new FieldDesc("storedMarks", {
            init(config) { return config.storedMarks || null; },
            apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null; }
        }),
        new FieldDesc("scrollToSelection", {
            init() { return 0; },
            apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev; }
        })
    ];
    // Object wrapping the part of a state object that stays the same
    // across transactions. Stored in the state's `config` property.
    class Configuration {
        constructor(schema, plugins) {
            this.schema = schema;
            this.plugins = [];
            this.pluginsByKey = Object.create(null);
            this.fields = baseFields.slice();
            if (plugins)
                plugins.forEach(plugin => {
                    if (this.pluginsByKey[plugin.key])
                        throw new RangeError("Adding different instances of a keyed plugin (" + plugin.key + ")");
                    this.plugins.push(plugin);
                    this.pluginsByKey[plugin.key] = plugin;
                    if (plugin.spec.state)
                        this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));
                });
        }
    }
    /**
    The state of a ProseMirror editor is represented by an object of
    this type. A state is a persistent data structure—it isn't
    updated, but rather a new state value is computed from an old one
    using the [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) method.

    A state holds a number of built-in fields, and plugins can
    [define](https://prosemirror.net/docs/ref/#state.PluginSpec.state) additional fields.
    */
    class EditorState {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        config) {
            this.config = config;
        }
        /**
        The schema of the state's document.
        */
        get schema() {
            return this.config.schema;
        }
        /**
        The plugins that are active in this state.
        */
        get plugins() {
            return this.config.plugins;
        }
        /**
        Apply the given transaction to produce a new state.
        */
        apply(tr) {
            return this.applyTransaction(tr).state;
        }
        /**
        @internal
        */
        filterTransaction(tr, ignore = -1) {
            for (let i = 0; i < this.config.plugins.length; i++)
                if (i != ignore) {
                    let plugin = this.config.plugins[i];
                    if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))
                        return false;
                }
            return true;
        }
        /**
        Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
        returns the precise transactions that were applied (which might
        be influenced by the [transaction
        hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
        plugins) along with the new state.
        */
        applyTransaction(rootTr) {
            if (!this.filterTransaction(rootTr))
                return { state: this, transactions: [] };
            let trs = [rootTr], newState = this.applyInner(rootTr), seen = null;
            // This loop repeatedly gives plugins a chance to respond to
            // transactions as new transactions are added, making sure to only
            // pass the transactions the plugin did not see before.
            for (;;) {
                let haveNew = false;
                for (let i = 0; i < this.config.plugins.length; i++) {
                    let plugin = this.config.plugins[i];
                    if (plugin.spec.appendTransaction) {
                        let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this;
                        let tr = n < trs.length &&
                            plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);
                        if (tr && newState.filterTransaction(tr, i)) {
                            tr.setMeta("appendedTransaction", rootTr);
                            if (!seen) {
                                seen = [];
                                for (let j = 0; j < this.config.plugins.length; j++)
                                    seen.push(j < i ? { state: newState, n: trs.length } : { state: this, n: 0 });
                            }
                            trs.push(tr);
                            newState = newState.applyInner(tr);
                            haveNew = true;
                        }
                        if (seen)
                            seen[i] = { state: newState, n: trs.length };
                    }
                }
                if (!haveNew)
                    return { state: newState, transactions: trs };
            }
        }
        /**
        @internal
        */
        applyInner(tr) {
            if (!tr.before.eq(this.doc))
                throw new RangeError("Applying a mismatched transaction");
            let newInstance = new EditorState(this.config), fields = this.config.fields;
            for (let i = 0; i < fields.length; i++) {
                let field = fields[i];
                newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance);
            }
            return newInstance;
        }
        /**
        Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
        */
        get tr() { return new Transaction(this); }
        /**
        Create a new state.
        */
        static create(config) {
            let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins);
            let instance = new EditorState($config);
            for (let i = 0; i < $config.fields.length; i++)
                instance[$config.fields[i].name] = $config.fields[i].init(config, instance);
            return instance;
        }
        /**
        Create a new state based on this one, but with an adjusted set
        of active plugins. State fields that exist in both sets of
        plugins are kept unchanged. Those that no longer exist are
        dropped, and those that are new are initialized using their
        [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
        configuration object..
        */
        reconfigure(config) {
            let $config = new Configuration(this.schema, config.plugins);
            let fields = $config.fields, instance = new EditorState($config);
            for (let i = 0; i < fields.length; i++) {
                let name = fields[i].name;
                instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance);
            }
            return instance;
        }
        /**
        Serialize this state to JSON. If you want to serialize the state
        of plugins, pass an object mapping property names to use in the
        resulting JSON object to plugin objects. The argument may also be
        a string or number, in which case it is ignored, to support the
        way `JSON.stringify` calls `toString` methods.
        */
        toJSON(pluginFields) {
            let result = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
            if (this.storedMarks)
                result.storedMarks = this.storedMarks.map(m => m.toJSON());
            if (pluginFields && typeof pluginFields == 'object')
                for (let prop in pluginFields) {
                    if (prop == "doc" || prop == "selection")
                        throw new RangeError("The JSON fields `doc` and `selection` are reserved");
                    let plugin = pluginFields[prop], state = plugin.spec.state;
                    if (state && state.toJSON)
                        result[prop] = state.toJSON.call(plugin, this[plugin.key]);
                }
            return result;
        }
        /**
        Deserialize a JSON representation of a state. `config` should
        have at least a `schema` field, and should contain array of
        plugins to initialize the state with. `pluginFields` can be used
        to deserialize the state of plugins, by associating plugin
        instances with the property names they use in the JSON object.
        */
        static fromJSON(config, json, pluginFields) {
            if (!json)
                throw new RangeError("Invalid input for EditorState.fromJSON");
            if (!config.schema)
                throw new RangeError("Required config field 'schema' missing");
            let $config = new Configuration(config.schema, config.plugins);
            let instance = new EditorState($config);
            $config.fields.forEach(field => {
                if (field.name == "doc") {
                    instance.doc = Node$1.fromJSON(config.schema, json.doc);
                }
                else if (field.name == "selection") {
                    instance.selection = Selection.fromJSON(instance.doc, json.selection);
                }
                else if (field.name == "storedMarks") {
                    if (json.storedMarks)
                        instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);
                }
                else {
                    if (pluginFields)
                        for (let prop in pluginFields) {
                            let plugin = pluginFields[prop], state = plugin.spec.state;
                            if (plugin.key == field.name && state && state.fromJSON &&
                                Object.prototype.hasOwnProperty.call(json, prop)) {
                                instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);
                                return;
                            }
                        }
                    instance[field.name] = field.init(config, instance);
                }
            });
            return instance;
        }
    }

    function bindProps(obj, self, target) {
        for (let prop in obj) {
            let val = obj[prop];
            if (val instanceof Function)
                val = val.bind(self);
            else if (prop == "handleDOMEvents")
                val = bindProps(val, self, {});
            target[prop] = val;
        }
        return target;
    }
    /**
    Plugins bundle functionality that can be added to an editor.
    They are part of the [editor state](https://prosemirror.net/docs/ref/#state.EditorState) and
    may influence that state and the view that contains it.
    */
    class Plugin {
        /**
        Create a plugin.
        */
        constructor(
        /**
        The plugin's [spec object](https://prosemirror.net/docs/ref/#state.PluginSpec).
        */
        spec) {
            this.spec = spec;
            /**
            The [props](https://prosemirror.net/docs/ref/#view.EditorProps) exported by this plugin.
            */
            this.props = {};
            if (spec.props)
                bindProps(spec.props, this, this.props);
            this.key = spec.key ? spec.key.key : createKey("plugin");
        }
        /**
        Extract the plugin's state field from an editor state.
        */
        getState(state) { return state[this.key]; }
    }
    const keys = Object.create(null);
    function createKey(name) {
        if (name in keys)
            return name + "$" + ++keys[name];
        keys[name] = 0;
        return name + "$";
    }
    /**
    A key is used to [tag](https://prosemirror.net/docs/ref/#state.PluginSpec.key) plugins in a way
    that makes it possible to find them, given an editor state.
    Assigning a key does mean only one plugin of that type can be
    active in a state.
    */
    class PluginKey {
        /**
        Create a plugin key.
        */
        constructor(name = "key") { this.key = createKey(name); }
        /**
        Get the active plugin with this key, if any, from an editor
        state.
        */
        get(state) { return state.config.pluginsByKey[this.key]; }
        /**
        Get the plugin's state from an editor state.
        */
        getState(state) { return state[this.key]; }
    }

    const domIndex = function (node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node)
                return index;
        }
    };
    const parentNode = function (node) {
        let parent = node.assignedSlot || node.parentNode;
        return parent && parent.nodeType == 11 ? parent.host : parent;
    };
    let reusedRange = null;
    // Note that this will always return the same range, because DOM range
    // objects are every expensive, and keep slowing down subsequent DOM
    // updates, for some reason.
    const textRange = function (node, from, to) {
        let range = reusedRange || (reusedRange = document.createRange());
        range.setEnd(node, to == null ? node.nodeValue.length : to);
        range.setStart(node, from || 0);
        return range;
    };
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    const isEquivalentPosition = function (node, off, targetNode, targetOff) {
        return targetNode && (scanFor(node, off, targetNode, targetOff, -1) ||
            scanFor(node, off, targetNode, targetOff, 1));
    };
    const atomElements = /^(img|br|input|textarea|hr)$/i;
    function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff)
                return true;
            if (off == (dir < 0 ? 0 : nodeSize(node))) {
                let parent = node.parentNode;
                if (!parent || parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) ||
                    node.contentEditable == "false")
                    return false;
                off = domIndex(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                if (node.contentEditable == "false")
                    return false;
                off = dir < 0 ? nodeSize(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function nodeSize(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function isOnEdge(node, offset, parent) {
        for (let atStart = offset == 0, atEnd = offset == nodeSize(node); atStart || atEnd;) {
            if (node == parent)
                return true;
            let index = domIndex(node);
            node = node.parentNode;
            if (!node)
                return false;
            atStart = atStart && index == 0;
            atEnd = atEnd && index == nodeSize(node);
        }
    }
    function hasBlockDesc(dom) {
        let desc;
        for (let cur = dom; cur; cur = cur.parentNode)
            if (desc = cur.pmViewDesc)
                break;
        return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom);
    }
    // Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523
    // (isCollapsed inappropriately returns true in shadow dom)
    const selectionCollapsed = function (domSel) {
        return domSel.focusNode && isEquivalentPosition(domSel.focusNode, domSel.focusOffset, domSel.anchorNode, domSel.anchorOffset);
    };
    function keyEvent(keyCode, key) {
        let event = document.createEvent("Event");
        event.initEvent("keydown", true, true);
        event.keyCode = keyCode;
        event.key = event.code = key;
        return event;
    }
    function deepActiveElement(doc) {
        let elt = doc.activeElement;
        while (elt && elt.shadowRoot)
            elt = elt.shadowRoot.activeElement;
        return elt;
    }

    const nav = typeof navigator != "undefined" ? navigator : null;
    const doc$1 = typeof document != "undefined" ? document : null;
    const agent = (nav && nav.userAgent) || "";
    const ie_edge = /Edge\/(\d+)/.exec(agent);
    const ie_upto10 = /MSIE \d/.exec(agent);
    const ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(agent);
    const ie = !!(ie_upto10 || ie_11up || ie_edge);
    const ie_version = ie_upto10 ? document.documentMode : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0;
    const gecko = !ie && /gecko\/(\d+)/i.test(agent);
    gecko && +(/Firefox\/(\d+)/.exec(agent) || [0, 0])[1];
    const _chrome = !ie && /Chrome\/(\d+)/.exec(agent);
    const chrome = !!_chrome;
    const chrome_version = _chrome ? +_chrome[1] : 0;
    const safari = !ie && !!nav && /Apple Computer/.test(nav.vendor);
    // Is true for both iOS and iPadOS for convenience
    const ios = safari && (/Mobile\/\w+/.test(agent) || !!nav && nav.maxTouchPoints > 2);
    const mac = ios || (nav ? /Mac/.test(nav.platform) : false);
    const android = /Android \d/.test(agent);
    const webkit = !!doc$1 && "webkitFontSmoothing" in doc$1.documentElement.style;
    const webkit_version = webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;

    function windowRect(doc) {
        return { left: 0, right: doc.documentElement.clientWidth,
            top: 0, bottom: doc.documentElement.clientHeight };
    }
    function getSide(value, side) {
        return typeof value == "number" ? value : value[side];
    }
    function clientRect(node) {
        let rect = node.getBoundingClientRect();
        // Adjust for elements with style "transform: scale()"
        let scaleX = (rect.width / node.offsetWidth) || 1;
        let scaleY = (rect.height / node.offsetHeight) || 1;
        // Make sure scrollbar width isn't included in the rectangle
        return { left: rect.left, right: rect.left + node.clientWidth * scaleX,
            top: rect.top, bottom: rect.top + node.clientHeight * scaleY };
    }
    function scrollRectIntoView(view, rect, startDOM) {
        let scrollThreshold = view.someProp("scrollThreshold") || 0, scrollMargin = view.someProp("scrollMargin") || 5;
        let doc = view.dom.ownerDocument;
        for (let parent = startDOM || view.dom;; parent = parentNode(parent)) {
            if (!parent)
                break;
            if (parent.nodeType != 1)
                continue;
            let elt = parent;
            let atTop = elt == doc.body;
            let bounding = atTop ? windowRect(doc) : clientRect(elt);
            let moveX = 0, moveY = 0;
            if (rect.top < bounding.top + getSide(scrollThreshold, "top"))
                moveY = -(bounding.top - rect.top + getSide(scrollMargin, "top"));
            else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, "bottom"))
                moveY = rect.bottom - bounding.bottom + getSide(scrollMargin, "bottom");
            if (rect.left < bounding.left + getSide(scrollThreshold, "left"))
                moveX = -(bounding.left - rect.left + getSide(scrollMargin, "left"));
            else if (rect.right > bounding.right - getSide(scrollThreshold, "right"))
                moveX = rect.right - bounding.right + getSide(scrollMargin, "right");
            if (moveX || moveY) {
                if (atTop) {
                    doc.defaultView.scrollBy(moveX, moveY);
                }
                else {
                    let startX = elt.scrollLeft, startY = elt.scrollTop;
                    if (moveY)
                        elt.scrollTop += moveY;
                    if (moveX)
                        elt.scrollLeft += moveX;
                    let dX = elt.scrollLeft - startX, dY = elt.scrollTop - startY;
                    rect = { left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY };
                }
            }
            if (atTop)
                break;
        }
    }
    // Store the scroll position of the editor's parent nodes, along with
    // the top position of an element near the top of the editor, which
    // will be used to make sure the visible viewport remains stable even
    // when the size of the content above changes.
    function storeScrollPos(view) {
        let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top);
        let refDOM, refTop;
        for (let x = (rect.left + rect.right) / 2, y = startY + 1; y < Math.min(innerHeight, rect.bottom); y += 5) {
            let dom = view.root.elementFromPoint(x, y);
            if (!dom || dom == view.dom || !view.dom.contains(dom))
                continue;
            let localRect = dom.getBoundingClientRect();
            if (localRect.top >= startY - 20) {
                refDOM = dom;
                refTop = localRect.top;
                break;
            }
        }
        return { refDOM: refDOM, refTop: refTop, stack: scrollStack(view.dom) };
    }
    function scrollStack(dom) {
        let stack = [], doc = dom.ownerDocument;
        for (let cur = dom; cur; cur = parentNode(cur)) {
            stack.push({ dom: cur, top: cur.scrollTop, left: cur.scrollLeft });
            if (dom == doc)
                break;
        }
        return stack;
    }
    // Reset the scroll position of the editor's parent nodes to that what
    // it was before, when storeScrollPos was called.
    function resetScrollPos({ refDOM, refTop, stack }) {
        let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;
        restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop);
    }
    function restoreScrollStack(stack, dTop) {
        for (let i = 0; i < stack.length; i++) {
            let { dom, top, left } = stack[i];
            if (dom.scrollTop != top + dTop)
                dom.scrollTop = top + dTop;
            if (dom.scrollLeft != left)
                dom.scrollLeft = left;
        }
    }
    let preventScrollSupported = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll(dom) {
        if (dom.setActive)
            return dom.setActive(); // in IE
        if (preventScrollSupported)
            return dom.focus(preventScrollSupported);
        let stored = scrollStack(dom);
        dom.focus(preventScrollSupported == null ? {
            get preventScroll() {
                preventScrollSupported = { preventScroll: true };
                return true;
            }
        } : undefined);
        if (!preventScrollSupported) {
            preventScrollSupported = false;
            restoreScrollStack(stored, 0);
        }
    }
    function findOffsetInNode(node, coords) {
        let closest, dxClosest = 2e8, coordsClosest, offset = 0;
        let rowBot = coords.top, rowTop = coords.top;
        for (let child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {
            let rects;
            if (child.nodeType == 1)
                rects = child.getClientRects();
            else if (child.nodeType == 3)
                rects = textRange(child).getClientRects();
            else
                continue;
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (rect.top <= rowBot && rect.bottom >= rowTop) {
                    rowBot = Math.max(rect.bottom, rowBot);
                    rowTop = Math.min(rect.top, rowTop);
                    let dx = rect.left > coords.left ? rect.left - coords.left
                        : rect.right < coords.left ? coords.left - rect.right : 0;
                    if (dx < dxClosest) {
                        closest = child;
                        dxClosest = dx;
                        coordsClosest = dx && closest.nodeType == 3 ? {
                            left: rect.right < coords.left ? rect.right : rect.left,
                            top: coords.top
                        } : coords;
                        if (child.nodeType == 1 && dx)
                            offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);
                        continue;
                    }
                }
                if (!closest && (coords.left >= rect.right && coords.top >= rect.top ||
                    coords.left >= rect.left && coords.top >= rect.bottom))
                    offset = childIndex + 1;
            }
        }
        if (closest && closest.nodeType == 3)
            return findOffsetInText(closest, coordsClosest);
        if (!closest || (dxClosest && closest.nodeType == 1))
            return { node, offset };
        return findOffsetInNode(closest, coordsClosest);
    }
    function findOffsetInText(node, coords) {
        let len = node.nodeValue.length;
        let range = document.createRange();
        for (let i = 0; i < len; i++) {
            range.setEnd(node, i + 1);
            range.setStart(node, i);
            let rect = singleRect(range, 1);
            if (rect.top == rect.bottom)
                continue;
            if (inRect(coords, rect))
                return { node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0) };
        }
        return { node, offset: 0 };
    }
    function inRect(coords, rect) {
        return coords.left >= rect.left - 1 && coords.left <= rect.right + 1 &&
            coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1;
    }
    function targetKludge(dom, coords) {
        let parent = dom.parentNode;
        if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)
            return parent;
        return dom;
    }
    function posFromElement(view, elt, coords) {
        let { node, offset } = findOffsetInNode(elt, coords), bias = -1;
        if (node.nodeType == 1 && !node.firstChild) {
            let rect = node.getBoundingClientRect();
            bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;
        }
        return view.docView.posFromDOM(node, offset, bias);
    }
    function posFromCaret(view, node, offset, coords) {
        // Browser (in caretPosition/RangeFromPoint) will agressively
        // normalize towards nearby inline nodes. Since we are interested in
        // positions between block nodes too, we first walk up the hierarchy
        // of nodes to see if there are block nodes that the coordinates
        // fall outside of. If so, we take the position before/after that
        // block. If not, we call `posFromDOM` on the raw node/offset.
        let outsideBlock = -1;
        for (let cur = node;;) {
            if (cur == view.dom)
                break;
            let desc = view.docView.nearestDesc(cur, true);
            if (!desc)
                return null;
            if (desc.dom.nodeType == 1 && (desc.node.isBlock && desc.parent || !desc.contentDOM)) {
                let rect = desc.dom.getBoundingClientRect();
                if (desc.node.isBlock && desc.parent) {
                    if (rect.left > coords.left || rect.top > coords.top)
                        outsideBlock = desc.posBefore;
                    else if (rect.right < coords.left || rect.bottom < coords.top)
                        outsideBlock = desc.posAfter;
                }
                if (!desc.contentDOM && outsideBlock < 0) {
                    // If we are inside a leaf, return the side of the leaf closer to the coords
                    let before = desc.node.isBlock ? coords.top < (rect.top + rect.bottom) / 2
                        : coords.left < (rect.left + rect.right) / 2;
                    return before ? desc.posBefore : desc.posAfter;
                }
            }
            cur = desc.dom.parentNode;
        }
        return outsideBlock > -1 ? outsideBlock : view.docView.posFromDOM(node, offset, -1);
    }
    function elementFromPoint(element, coords, box) {
        let len = element.childNodes.length;
        if (len && box.top < box.bottom) {
            for (let startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i = startI;;) {
                let child = element.childNodes[i];
                if (child.nodeType == 1) {
                    let rects = child.getClientRects();
                    for (let j = 0; j < rects.length; j++) {
                        let rect = rects[j];
                        if (inRect(coords, rect))
                            return elementFromPoint(child, coords, rect);
                    }
                }
                if ((i = (i + 1) % len) == startI)
                    break;
            }
        }
        return element;
    }
    // Given an x,y position on the editor, get the position in the document.
    function posAtCoords(view, coords) {
        let doc = view.dom.ownerDocument, node, offset = 0;
        if (doc.caretPositionFromPoint) {
            try { // Firefox throws for this call in hard-to-predict circumstances (#994)
                let pos = doc.caretPositionFromPoint(coords.left, coords.top);
                if (pos)
                    ({ offsetNode: node, offset } = pos);
            }
            catch (_) { }
        }
        if (!node && doc.caretRangeFromPoint) {
            let range = doc.caretRangeFromPoint(coords.left, coords.top);
            if (range)
                ({ startContainer: node, startOffset: offset } = range);
        }
        let elt = (view.root.elementFromPoint ? view.root : doc)
            .elementFromPoint(coords.left, coords.top);
        let pos;
        if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {
            let box = view.dom.getBoundingClientRect();
            if (!inRect(coords, box))
                return null;
            elt = elementFromPoint(view.dom, coords, box);
            if (!elt)
                return null;
        }
        // Safari's caretRangeFromPoint returns nonsense when on a draggable element
        if (safari) {
            for (let p = elt; node && p; p = parentNode(p))
                if (p.draggable)
                    node = undefined;
        }
        elt = targetKludge(elt, coords);
        if (node) {
            if (gecko && node.nodeType == 1) {
                // Firefox will sometimes return offsets into <input> nodes, which
                // have no actual children, from caretPositionFromPoint (#953)
                offset = Math.min(offset, node.childNodes.length);
                // It'll also move the returned position before image nodes,
                // even if those are behind it.
                if (offset < node.childNodes.length) {
                    let next = node.childNodes[offset], box;
                    if (next.nodeName == "IMG" && (box = next.getBoundingClientRect()).right <= coords.left &&
                        box.bottom > coords.top)
                        offset++;
                }
            }
            // Suspiciously specific kludge to work around caret*FromPoint
            // never returning a position at the end of the document
            if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 &&
                coords.top > node.lastChild.getBoundingClientRect().bottom)
                pos = view.state.doc.content.size;
            // Ignore positions directly after a BR, since caret*FromPoint
            // 'round up' positions that would be more accurately placed
            // before the BR node.
            else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != "BR")
                pos = posFromCaret(view, node, offset, coords);
        }
        if (pos == null)
            pos = posFromElement(view, elt, coords);
        let desc = view.docView.nearestDesc(elt, true);
        return { pos, inside: desc ? desc.posAtStart - desc.border : -1 };
    }
    function singleRect(target, bias) {
        let rects = target.getClientRects();
        return !rects.length ? target.getBoundingClientRect() : rects[bias < 0 ? 0 : rects.length - 1];
    }
    const BIDI = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
    // Given a position in the document model, get a bounding box of the
    // character at that position, relative to the window.
    function coordsAtPos(view, pos, side) {
        let { node, offset, atom } = view.docView.domFromPos(pos, side < 0 ? -1 : 1);
        let supportEmptyRange = webkit || gecko;
        if (node.nodeType == 3) {
            // These browsers support querying empty text ranges. Prefer that in
            // bidi context or when at the end of a node.
            if (supportEmptyRange && (BIDI.test(node.nodeValue) || (side < 0 ? !offset : offset == node.nodeValue.length))) {
                let rect = singleRect(textRange(node, offset, offset), side);
                // Firefox returns bad results (the position before the space)
                // when querying a position directly after line-broken
                // whitespace. Detect this situation and and kludge around it
                if (gecko && offset && /\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {
                    let rectBefore = singleRect(textRange(node, offset - 1, offset - 1), -1);
                    if (rectBefore.top == rect.top) {
                        let rectAfter = singleRect(textRange(node, offset, offset + 1), -1);
                        if (rectAfter.top != rect.top)
                            return flattenV(rectAfter, rectAfter.left < rectBefore.left);
                    }
                }
                return rect;
            }
            else {
                let from = offset, to = offset, takeSide = side < 0 ? 1 : -1;
                if (side < 0 && !offset) {
                    to++;
                    takeSide = -1;
                }
                else if (side >= 0 && offset == node.nodeValue.length) {
                    from--;
                    takeSide = 1;
                }
                else if (side < 0) {
                    from--;
                }
                else {
                    to++;
                }
                return flattenV(singleRect(textRange(node, from, to), 1), takeSide < 0);
            }
        }
        let $dom = view.state.doc.resolve(pos - (atom || 0));
        // Return a horizontal line in block context
        if (!$dom.parent.inlineContent) {
            if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {
                let before = node.childNodes[offset - 1];
                if (before.nodeType == 1)
                    return flattenH(before.getBoundingClientRect(), false);
            }
            if (atom == null && offset < nodeSize(node)) {
                let after = node.childNodes[offset];
                if (after.nodeType == 1)
                    return flattenH(after.getBoundingClientRect(), true);
            }
            return flattenH(node.getBoundingClientRect(), side >= 0);
        }
        // Inline, not in text node (this is not Bidi-safe)
        if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {
            let before = node.childNodes[offset - 1];
            let target = before.nodeType == 3 ? textRange(before, nodeSize(before) - (supportEmptyRange ? 0 : 1))
                // BR nodes tend to only return the rectangle before them.
                // Only use them if they are the last element in their parent
                : before.nodeType == 1 && (before.nodeName != "BR" || !before.nextSibling) ? before : null;
            if (target)
                return flattenV(singleRect(target, 1), false);
        }
        if (atom == null && offset < nodeSize(node)) {
            let after = node.childNodes[offset];
            while (after.pmViewDesc && after.pmViewDesc.ignoreForCoords)
                after = after.nextSibling;
            let target = !after ? null : after.nodeType == 3 ? textRange(after, 0, (supportEmptyRange ? 0 : 1))
                : after.nodeType == 1 ? after : null;
            if (target)
                return flattenV(singleRect(target, -1), true);
        }
        // All else failed, just try to get a rectangle for the target node
        return flattenV(singleRect(node.nodeType == 3 ? textRange(node) : node, -side), side >= 0);
    }
    function flattenV(rect, left) {
        if (rect.width == 0)
            return rect;
        let x = left ? rect.left : rect.right;
        return { top: rect.top, bottom: rect.bottom, left: x, right: x };
    }
    function flattenH(rect, top) {
        if (rect.height == 0)
            return rect;
        let y = top ? rect.top : rect.bottom;
        return { top: y, bottom: y, left: rect.left, right: rect.right };
    }
    function withFlushedState(view, state, f) {
        let viewState = view.state, active = view.root.activeElement;
        if (viewState != state)
            view.updateState(state);
        if (active != view.dom)
            view.focus();
        try {
            return f();
        }
        finally {
            if (viewState != state)
                view.updateState(viewState);
            if (active != view.dom && active)
                active.focus();
        }
    }
    // Whether vertical position motion in a given direction
    // from a position would leave a text block.
    function endOfTextblockVertical(view, state, dir) {
        let sel = state.selection;
        let $pos = dir == "up" ? sel.$from : sel.$to;
        return withFlushedState(view, state, () => {
            let { node: dom } = view.docView.domFromPos($pos.pos, dir == "up" ? -1 : 1);
            for (;;) {
                let nearest = view.docView.nearestDesc(dom, true);
                if (!nearest)
                    break;
                if (nearest.node.isBlock) {
                    dom = nearest.contentDOM || nearest.dom;
                    break;
                }
                dom = nearest.dom.parentNode;
            }
            let coords = coordsAtPos(view, $pos.pos, 1);
            for (let child = dom.firstChild; child; child = child.nextSibling) {
                let boxes;
                if (child.nodeType == 1)
                    boxes = child.getClientRects();
                else if (child.nodeType == 3)
                    boxes = textRange(child, 0, child.nodeValue.length).getClientRects();
                else
                    continue;
                for (let i = 0; i < boxes.length; i++) {
                    let box = boxes[i];
                    if (box.bottom > box.top + 1 &&
                        (dir == "up" ? coords.top - box.top > (box.bottom - coords.top) * 2
                            : box.bottom - coords.bottom > (coords.bottom - box.top) * 2))
                        return false;
                }
            }
            return true;
        });
    }
    const maybeRTL = /[\u0590-\u08ac]/;
    function endOfTextblockHorizontal(view, state, dir) {
        let { $head } = state.selection;
        if (!$head.parent.isTextblock)
            return false;
        let offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size;
        let sel = view.domSelection();
        // If the textblock is all LTR, or the browser doesn't support
        // Selection.modify (Edge), fall back to a primitive approach
        if (!maybeRTL.test($head.parent.textContent) || !sel.modify)
            return dir == "left" || dir == "backward" ? atStart : atEnd;
        return withFlushedState(view, state, () => {
            // This is a huge hack, but appears to be the best we can
            // currently do: use `Selection.modify` to move the selection by
            // one character, and see if that moves the cursor out of the
            // textblock (or doesn't move it at all, when at the start/end of
            // the document).
            let { focusNode: oldNode, focusOffset: oldOff, anchorNode, anchorOffset } = view.domSelectionRange();
            let oldBidiLevel = sel.caretBidiLevel;
            sel.modify("move", dir, "character");
            let parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;
            let { focusNode: newNode, focusOffset: newOff } = view.domSelectionRange();
            let result = newNode && !parentDOM.contains(newNode.nodeType == 1 ? newNode : newNode.parentNode) ||
                (oldNode == newNode && oldOff == newOff);
            // Restore the previous selection
            try {
                sel.collapse(anchorNode, anchorOffset);
                if (oldNode && (oldNode != anchorNode || oldOff != anchorOffset) && sel.extend)
                    sel.extend(oldNode, oldOff);
            }
            catch (_) { }
            if (oldBidiLevel != null)
                sel.caretBidiLevel = oldBidiLevel;
            return result;
        });
    }
    let cachedState = null;
    let cachedDir = null;
    let cachedResult = false;
    function endOfTextblock(view, state, dir) {
        if (cachedState == state && cachedDir == dir)
            return cachedResult;
        cachedState = state;
        cachedDir = dir;
        return cachedResult = dir == "up" || dir == "down"
            ? endOfTextblockVertical(view, state, dir)
            : endOfTextblockHorizontal(view, state, dir);
    }

    // View descriptions are data structures that describe the DOM that is
    // used to represent the editor's content. They are used for:
    //
    // - Incremental redrawing when the document changes
    //
    // - Figuring out what part of the document a given DOM position
    //   corresponds to
    //
    // - Wiring in custom implementations of the editing interface for a
    //   given node
    //
    // They form a doubly-linked mutable tree, starting at `view.docView`.
    const NOT_DIRTY = 0;
    const CHILD_DIRTY = 1;
    const CONTENT_DIRTY = 2;
    const NODE_DIRTY = 3;
    // Superclass for the various kinds of descriptions. Defines their
    // basic structure and shared methods.
    class ViewDesc {
        constructor(parent, children, dom,
        // This is the node that holds the child views. It may be null for
        // descs that don't have children.
        contentDOM) {
            this.parent = parent;
            this.children = children;
            this.dom = dom;
            this.contentDOM = contentDOM;
            this.dirty = NOT_DIRTY;
            // An expando property on the DOM node provides a link back to its
            // description.
            dom.pmViewDesc = this;
        }
        // Used to check whether a given description corresponds to a
        // widget/mark/node.
        matchesWidget(widget) { return false; }
        matchesMark(mark) { return false; }
        matchesNode(node, outerDeco, innerDeco) { return false; }
        matchesHack(nodeName) { return false; }
        // When parsing in-editor content (in domchange.js), we allow
        // descriptions to determine the parse rules that should be used to
        // parse them.
        parseRule() { return null; }
        // Used by the editor's event handler to ignore events that come
        // from certain descs.
        stopEvent(event) { return false; }
        // The size of the content represented by this desc.
        get size() {
            let size = 0;
            for (let i = 0; i < this.children.length; i++)
                size += this.children[i].size;
            return size;
        }
        // For block nodes, this represents the space taken up by their
        // start/end tokens.
        get border() { return 0; }
        destroy() {
            this.parent = undefined;
            if (this.dom.pmViewDesc == this)
                this.dom.pmViewDesc = undefined;
            for (let i = 0; i < this.children.length; i++)
                this.children[i].destroy();
        }
        posBeforeChild(child) {
            for (let i = 0, pos = this.posAtStart;; i++) {
                let cur = this.children[i];
                if (cur == child)
                    return pos;
                pos += cur.size;
            }
        }
        get posBefore() {
            return this.parent.posBeforeChild(this);
        }
        get posAtStart() {
            return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
        }
        get posAfter() {
            return this.posBefore + this.size;
        }
        get posAtEnd() {
            return this.posAtStart + this.size - 2 * this.border;
        }
        localPosFromDOM(dom, offset, bias) {
            // If the DOM position is in the content, use the child desc after
            // it to figure out a position.
            if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {
                if (bias < 0) {
                    let domBefore, desc;
                    if (dom == this.contentDOM) {
                        domBefore = dom.childNodes[offset - 1];
                    }
                    else {
                        while (dom.parentNode != this.contentDOM)
                            dom = dom.parentNode;
                        domBefore = dom.previousSibling;
                    }
                    while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this))
                        domBefore = domBefore.previousSibling;
                    return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart;
                }
                else {
                    let domAfter, desc;
                    if (dom == this.contentDOM) {
                        domAfter = dom.childNodes[offset];
                    }
                    else {
                        while (dom.parentNode != this.contentDOM)
                            dom = dom.parentNode;
                        domAfter = dom.nextSibling;
                    }
                    while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this))
                        domAfter = domAfter.nextSibling;
                    return domAfter ? this.posBeforeChild(desc) : this.posAtEnd;
                }
            }
            // Otherwise, use various heuristics, falling back on the bias
            // parameter, to determine whether to return the position at the
            // start or at the end of this view desc.
            let atEnd;
            if (dom == this.dom && this.contentDOM) {
                atEnd = offset > domIndex(this.contentDOM);
            }
            else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {
                atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;
            }
            else if (this.dom.firstChild) {
                if (offset == 0)
                    for (let search = dom;; search = search.parentNode) {
                        if (search == this.dom) {
                            atEnd = false;
                            break;
                        }
                        if (search.previousSibling)
                            break;
                    }
                if (atEnd == null && offset == dom.childNodes.length)
                    for (let search = dom;; search = search.parentNode) {
                        if (search == this.dom) {
                            atEnd = true;
                            break;
                        }
                        if (search.nextSibling)
                            break;
                    }
            }
            return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart;
        }
        nearestDesc(dom, onlyNodes = false) {
            for (let first = true, cur = dom; cur; cur = cur.parentNode) {
                let desc = this.getDesc(cur), nodeDOM;
                if (desc && (!onlyNodes || desc.node)) {
                    // If dom is outside of this desc's nodeDOM, don't count it.
                    if (first && (nodeDOM = desc.nodeDOM) &&
                        !(nodeDOM.nodeType == 1 ? nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : nodeDOM == dom))
                        first = false;
                    else
                        return desc;
                }
            }
        }
        getDesc(dom) {
            let desc = dom.pmViewDesc;
            for (let cur = desc; cur; cur = cur.parent)
                if (cur == this)
                    return desc;
        }
        posFromDOM(dom, offset, bias) {
            for (let scan = dom; scan; scan = scan.parentNode) {
                let desc = this.getDesc(scan);
                if (desc)
                    return desc.localPosFromDOM(dom, offset, bias);
            }
            return -1;
        }
        // Find the desc for the node after the given pos, if any. (When a
        // parent node overrode rendering, there might not be one.)
        descAt(pos) {
            for (let i = 0, offset = 0; i < this.children.length; i++) {
                let child = this.children[i], end = offset + child.size;
                if (offset == pos && end != offset) {
                    while (!child.border && child.children.length)
                        child = child.children[0];
                    return child;
                }
                if (pos < end)
                    return child.descAt(pos - offset - child.border);
                offset = end;
            }
        }
        domFromPos(pos, side) {
            if (!this.contentDOM)
                return { node: this.dom, offset: 0, atom: pos + 1 };
            // First find the position in the child array
            let i = 0, offset = 0;
            for (let curPos = 0; i < this.children.length; i++) {
                let child = this.children[i], end = curPos + child.size;
                if (end > pos || child instanceof TrailingHackViewDesc) {
                    offset = pos - curPos;
                    break;
                }
                curPos = end;
            }
            // If this points into the middle of a child, call through
            if (offset)
                return this.children[i].domFromPos(offset - this.children[i].border, side);
            // Go back if there were any zero-length widgets with side >= 0 before this point
            for (let prev; i && !(prev = this.children[i - 1]).size && prev instanceof WidgetViewDesc && prev.side >= 0; i--) { }
            // Scan towards the first useable node
            if (side <= 0) {
                let prev, enter = true;
                for (;; i--, enter = false) {
                    prev = i ? this.children[i - 1] : null;
                    if (!prev || prev.dom.parentNode == this.contentDOM)
                        break;
                }
                if (prev && side && enter && !prev.border && !prev.domAtom)
                    return prev.domFromPos(prev.size, side);
                return { node: this.contentDOM, offset: prev ? domIndex(prev.dom) + 1 : 0 };
            }
            else {
                let next, enter = true;
                for (;; i++, enter = false) {
                    next = i < this.children.length ? this.children[i] : null;
                    if (!next || next.dom.parentNode == this.contentDOM)
                        break;
                }
                if (next && enter && !next.border && !next.domAtom)
                    return next.domFromPos(0, side);
                return { node: this.contentDOM, offset: next ? domIndex(next.dom) : this.contentDOM.childNodes.length };
            }
        }
        // Used to find a DOM range in a single parent for a given changed
        // range.
        parseRange(from, to, base = 0) {
            if (this.children.length == 0)
                return { node: this.contentDOM, from, to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
            let fromOffset = -1, toOffset = -1;
            for (let offset = base, i = 0;; i++) {
                let child = this.children[i], end = offset + child.size;
                if (fromOffset == -1 && from <= end) {
                    let childBase = offset + child.border;
                    // FIXME maybe descend mark views to parse a narrower range?
                    if (from >= childBase && to <= end - child.border && child.node &&
                        child.contentDOM && this.contentDOM.contains(child.contentDOM))
                        return child.parseRange(from, to, childBase);
                    from = offset;
                    for (let j = i; j > 0; j--) {
                        let prev = this.children[j - 1];
                        if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {
                            fromOffset = domIndex(prev.dom) + 1;
                            break;
                        }
                        from -= prev.size;
                    }
                    if (fromOffset == -1)
                        fromOffset = 0;
                }
                if (fromOffset > -1 && (end > to || i == this.children.length - 1)) {
                    to = end;
                    for (let j = i + 1; j < this.children.length; j++) {
                        let next = this.children[j];
                        if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {
                            toOffset = domIndex(next.dom);
                            break;
                        }
                        to += next.size;
                    }
                    if (toOffset == -1)
                        toOffset = this.contentDOM.childNodes.length;
                    break;
                }
                offset = end;
            }
            return { node: this.contentDOM, from, to, fromOffset, toOffset };
        }
        emptyChildAt(side) {
            if (this.border || !this.contentDOM || !this.children.length)
                return false;
            let child = this.children[side < 0 ? 0 : this.children.length - 1];
            return child.size == 0 || child.emptyChildAt(side);
        }
        domAfterPos(pos) {
            let { node, offset } = this.domFromPos(pos, 0);
            if (node.nodeType != 1 || offset == node.childNodes.length)
                throw new RangeError("No node after pos " + pos);
            return node.childNodes[offset];
        }
        // View descs are responsible for setting any selection that falls
        // entirely inside of them, so that custom implementations can do
        // custom things with the selection. Note that this falls apart when
        // a selection starts in such a node and ends in another, in which
        // case we just use whatever domFromPos produces as a best effort.
        setSelection(anchor, head, root, force = false) {
            // If the selection falls entirely in a child, give it to that child
            let from = Math.min(anchor, head), to = Math.max(anchor, head);
            for (let i = 0, offset = 0; i < this.children.length; i++) {
                let child = this.children[i], end = offset + child.size;
                if (from > offset && to < end)
                    return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force);
                offset = end;
            }
            let anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1);
            let headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1);
            let domSel = root.getSelection();
            let brKludge = false;
            // On Firefox, using Selection.collapse to put the cursor after a
            // BR node for some reason doesn't always work (#1073). On Safari,
            // the cursor sometimes inexplicable visually lags behind its
            // reported position in such situations (#1092).
            if ((gecko || safari) && anchor == head) {
                let { node, offset } = anchorDOM;
                if (node.nodeType == 3) {
                    brKludge = !!(offset && node.nodeValue[offset - 1] == "\n");
                    // Issue #1128
                    if (brKludge && offset == node.nodeValue.length) {
                        for (let scan = node, after; scan; scan = scan.parentNode) {
                            if (after = scan.nextSibling) {
                                if (after.nodeName == "BR")
                                    anchorDOM = headDOM = { node: after.parentNode, offset: domIndex(after) + 1 };
                                break;
                            }
                            let desc = scan.pmViewDesc;
                            if (desc && desc.node && desc.node.isBlock)
                                break;
                        }
                    }
                }
                else {
                    let prev = node.childNodes[offset - 1];
                    brKludge = prev && (prev.nodeName == "BR" || prev.contentEditable == "false");
                }
            }
            // Firefox can act strangely when the selection is in front of an
            // uneditable node. See #1163 and https://bugzilla.mozilla.org/show_bug.cgi?id=1709536
            if (gecko && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {
                let after = domSel.focusNode.childNodes[domSel.focusOffset];
                if (after && after.contentEditable == "false")
                    force = true;
            }
            if (!(force || brKludge && safari) &&
                isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) &&
                isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))
                return;
            // Selection.extend can be used to create an 'inverted' selection
            // (one where the focus is before the anchor), but not all
            // browsers support it yet.
            let domSelExtended = false;
            if ((domSel.extend || anchor == head) && !brKludge) {
                domSel.collapse(anchorDOM.node, anchorDOM.offset);
                try {
                    if (anchor != head)
                        domSel.extend(headDOM.node, headDOM.offset);
                    domSelExtended = true;
                }
                catch (_) {
                    // In some cases with Chrome the selection is empty after calling
                    // collapse, even when it should be valid. This appears to be a bug, but
                    // it is difficult to isolate. If this happens fallback to the old path
                    // without using extend.
                    // Similarly, this could crash on Safari if the editor is hidden, and
                    // there was no selection.
                }
            }
            if (!domSelExtended) {
                if (anchor > head) {
                    let tmp = anchorDOM;
                    anchorDOM = headDOM;
                    headDOM = tmp;
                }
                let range = document.createRange();
                range.setEnd(headDOM.node, headDOM.offset);
                range.setStart(anchorDOM.node, anchorDOM.offset);
                domSel.removeAllRanges();
                domSel.addRange(range);
            }
        }
        ignoreMutation(mutation) {
            return !this.contentDOM && mutation.type != "selection";
        }
        get contentLost() {
            return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
        }
        // Remove a subtree of the element tree that has been touched
        // by a DOM change, so that the next update will redraw it.
        markDirty(from, to) {
            for (let offset = 0, i = 0; i < this.children.length; i++) {
                let child = this.children[i], end = offset + child.size;
                if (offset == end ? from <= end && to >= offset : from < end && to > offset) {
                    let startInside = offset + child.border, endInside = end - child.border;
                    if (from >= startInside && to <= endInside) {
                        this.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY;
                        if (from == startInside && to == endInside &&
                            (child.contentLost || child.dom.parentNode != this.contentDOM))
                            child.dirty = NODE_DIRTY;
                        else
                            child.markDirty(from - startInside, to - startInside);
                        return;
                    }
                    else {
                        child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM && !child.children.length
                            ? CONTENT_DIRTY : NODE_DIRTY;
                    }
                }
                offset = end;
            }
            this.dirty = CONTENT_DIRTY;
        }
        markParentsDirty() {
            let level = 1;
            for (let node = this.parent; node; node = node.parent, level++) {
                let dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY;
                if (node.dirty < dirty)
                    node.dirty = dirty;
            }
        }
        get domAtom() { return false; }
        get ignoreForCoords() { return false; }
    }
    // A widget desc represents a widget decoration, which is a DOM node
    // drawn between the document nodes.
    class WidgetViewDesc extends ViewDesc {
        constructor(parent, widget, view, pos) {
            let self, dom = widget.type.toDOM;
            if (typeof dom == "function")
                dom = dom(view, () => {
                    if (!self)
                        return pos;
                    if (self.parent)
                        return self.parent.posBeforeChild(self);
                });
            if (!widget.type.spec.raw) {
                if (dom.nodeType != 1) {
                    let wrap = document.createElement("span");
                    wrap.appendChild(dom);
                    dom = wrap;
                }
                dom.contentEditable = "false";
                dom.classList.add("ProseMirror-widget");
            }
            super(parent, [], dom, null);
            this.widget = widget;
            this.widget = widget;
            self = this;
        }
        matchesWidget(widget) {
            return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type);
        }
        parseRule() { return { ignore: true }; }
        stopEvent(event) {
            let stop = this.widget.spec.stopEvent;
            return stop ? stop(event) : false;
        }
        ignoreMutation(mutation) {
            return mutation.type != "selection" || this.widget.spec.ignoreSelection;
        }
        destroy() {
            this.widget.type.destroy(this.dom);
            super.destroy();
        }
        get domAtom() { return true; }
        get side() { return this.widget.type.side; }
    }
    class CompositionViewDesc extends ViewDesc {
        constructor(parent, dom, textDOM, text) {
            super(parent, [], dom, null);
            this.textDOM = textDOM;
            this.text = text;
        }
        get size() { return this.text.length; }
        localPosFromDOM(dom, offset) {
            if (dom != this.textDOM)
                return this.posAtStart + (offset ? this.size : 0);
            return this.posAtStart + offset;
        }
        domFromPos(pos) {
            return { node: this.textDOM, offset: pos };
        }
        ignoreMutation(mut) {
            return mut.type === 'characterData' && mut.target.nodeValue == mut.oldValue;
        }
    }
    // A mark desc represents a mark. May have multiple children,
    // depending on how the mark is split. Note that marks are drawn using
    // a fixed nesting order, for simplicity and predictability, so in
    // some cases they will be split more often than would appear
    // necessary.
    class MarkViewDesc extends ViewDesc {
        constructor(parent, mark, dom, contentDOM) {
            super(parent, [], dom, contentDOM);
            this.mark = mark;
        }
        static create(parent, mark, inline, view) {
            let custom = view.nodeViews[mark.type.name];
            let spec = custom && custom(mark, view, inline);
            if (!spec || !spec.dom)
                spec = DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline));
            return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom);
        }
        parseRule() {
            if ((this.dirty & NODE_DIRTY) || this.mark.type.spec.reparseInView)
                return null;
            return { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM || undefined };
        }
        matchesMark(mark) { return this.dirty != NODE_DIRTY && this.mark.eq(mark); }
        markDirty(from, to) {
            super.markDirty(from, to);
            // Move dirty info to nearest node view
            if (this.dirty != NOT_DIRTY) {
                let parent = this.parent;
                while (!parent.node)
                    parent = parent.parent;
                if (parent.dirty < this.dirty)
                    parent.dirty = this.dirty;
                this.dirty = NOT_DIRTY;
            }
        }
        slice(from, to, view) {
            let copy = MarkViewDesc.create(this.parent, this.mark, true, view);
            let nodes = this.children, size = this.size;
            if (to < size)
                nodes = replaceNodes(nodes, to, size, view);
            if (from > 0)
                nodes = replaceNodes(nodes, 0, from, view);
            for (let i = 0; i < nodes.length; i++)
                nodes[i].parent = copy;
            copy.children = nodes;
            return copy;
        }
    }
    // Node view descs are the main, most common type of view desc, and
    // correspond to an actual node in the document. Unlike mark descs,
    // they populate their child array themselves.
    class NodeViewDesc extends ViewDesc {
        constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {
            super(parent, [], dom, contentDOM);
            this.node = node;
            this.outerDeco = outerDeco;
            this.innerDeco = innerDeco;
            this.nodeDOM = nodeDOM;
            if (contentDOM)
                this.updateChildren(view, pos);
        }
        // By default, a node is rendered using the `toDOM` method from the
        // node type spec. But client code can use the `nodeViews` spec to
        // supply a custom node view, which can influence various aspects of
        // the way the node works.
        //
        // (Using subclassing for this was intentionally decided against,
        // since it'd require exposing a whole slew of finicky
        // implementation details to the user code that they probably will
        // never need.)
        static create(parent, node, outerDeco, innerDeco, view, pos) {
            let custom = view.nodeViews[node.type.name], descObj;
            let spec = custom && custom(node, view, () => {
                // (This is a function that allows the custom view to find its
                // own position)
                if (!descObj)
                    return pos;
                if (descObj.parent)
                    return descObj.parent.posBeforeChild(descObj);
            }, outerDeco, innerDeco);
            let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM;
            if (node.isText) {
                if (!dom)
                    dom = document.createTextNode(node.text);
                else if (dom.nodeType != 3)
                    throw new RangeError("Text must be rendered as a DOM text node");
            }
            else if (!dom) {
                ({ dom, contentDOM } = DOMSerializer.renderSpec(document, node.type.spec.toDOM(node)));
            }
            if (!contentDOM && !node.isText && dom.nodeName != "BR") { // Chrome gets confused by <br contenteditable=false>
                if (!dom.hasAttribute("contenteditable"))
                    dom.contentEditable = "false";
                if (node.type.spec.draggable)
                    dom.draggable = true;
            }
            let nodeDOM = dom;
            dom = applyOuterDeco(dom, outerDeco, node);
            if (spec)
                return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, spec, view, pos + 1);
            else if (node.isText)
                return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view);
            else
                return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, view, pos + 1);
        }
        parseRule() {
            // Experimental kludge to allow opt-in re-parsing of nodes
            if (this.node.type.spec.reparseInView)
                return null;
            // FIXME the assumption that this can always return the current
            // attrs means that if the user somehow manages to change the
            // attrs in the dom, that won't be picked up. Not entirely sure
            // whether this is a problem
            let rule = { node: this.node.type.name, attrs: this.node.attrs };
            if (this.node.type.whitespace == "pre")
                rule.preserveWhitespace = "full";
            if (!this.contentDOM) {
                rule.getContent = () => this.node.content;
            }
            else if (!this.contentLost) {
                rule.contentElement = this.contentDOM;
            }
            else {
                // Chrome likes to randomly recreate parent nodes when
                // backspacing things. When that happens, this tries to find the
                // new parent.
                for (let i = this.children.length - 1; i >= 0; i--) {
                    let child = this.children[i];
                    if (this.dom.contains(child.dom.parentNode)) {
                        rule.contentElement = child.dom.parentNode;
                        break;
                    }
                }
                if (!rule.contentElement)
                    rule.getContent = () => Fragment.empty;
            }
            return rule;
        }
        matchesNode(node, outerDeco, innerDeco) {
            return this.dirty == NOT_DIRTY && node.eq(this.node) &&
                sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco);
        }
        get size() { return this.node.nodeSize; }
        get border() { return this.node.isLeaf ? 0 : 1; }
        // Syncs `this.children` to match `this.node.content` and the local
        // decorations, possibly introducing nesting for marks. Then, in a
        // separate step, syncs the DOM inside `this.contentDOM` to
        // `this.children`.
        updateChildren(view, pos) {
            let inline = this.node.inlineContent, off = pos;
            let composition = view.composing ? this.localCompositionInfo(view, pos) : null;
            let localComposition = composition && composition.pos > -1 ? composition : null;
            let compositionInChild = composition && composition.pos < 0;
            let updater = new ViewTreeUpdater(this, localComposition && localComposition.node, view);
            iterDeco(this.node, this.innerDeco, (widget, i, insideNode) => {
                if (widget.spec.marks)
                    updater.syncToMarks(widget.spec.marks, inline, view);
                else if (widget.type.side >= 0 && !insideNode)
                    updater.syncToMarks(i == this.node.childCount ? Mark.none : this.node.child(i).marks, inline, view);
                // If the next node is a desc matching this widget, reuse it,
                // otherwise insert the widget as a new view desc.
                updater.placeWidget(widget, view, off);
            }, (child, outerDeco, innerDeco, i) => {
                // Make sure the wrapping mark descs match the node's marks.
                updater.syncToMarks(child.marks, inline, view);
                // Try several strategies for drawing this node
                let compIndex;
                if (updater.findNodeMatch(child, outerDeco, innerDeco, i)) ;
                else if (compositionInChild && view.state.selection.from > off &&
                    view.state.selection.to < off + child.nodeSize &&
                    (compIndex = updater.findIndexWithChild(composition.node)) > -1 &&
                    updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view)) ;
                else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i)) ;
                else {
                    // Add it as a new view
                    updater.addNode(child, outerDeco, innerDeco, view, off);
                }
                off += child.nodeSize;
            });
            // Drop all remaining descs after the current position.
            updater.syncToMarks([], inline, view);
            if (this.node.isTextblock)
                updater.addTextblockHacks();
            updater.destroyRest();
            // Sync the DOM if anything changed
            if (updater.changed || this.dirty == CONTENT_DIRTY) {
                // May have to protect focused DOM from being changed if a composition is active
                if (localComposition)
                    this.protectLocalComposition(view, localComposition);
                renderDescs(this.contentDOM, this.children, view);
                if (ios)
                    iosHacks(this.dom);
            }
        }
        localCompositionInfo(view, pos) {
            // Only do something if both the selection and a focused text node
            // are inside of this node
            let { from, to } = view.state.selection;
            if (!(view.state.selection instanceof TextSelection) || from < pos || to > pos + this.node.content.size)
                return null;
            let sel = view.domSelectionRange();
            let textNode = nearbyTextNode(sel.focusNode, sel.focusOffset);
            if (!textNode || !this.dom.contains(textNode.parentNode))
                return null;
            if (this.node.inlineContent) {
                // Find the text in the focused node in the node, stop if it's not
                // there (may have been modified through other means, in which
                // case it should overwritten)
                let text = textNode.nodeValue;
                let textPos = findTextInFragment(this.node.content, text, from - pos, to - pos);
                return textPos < 0 ? null : { node: textNode, pos: textPos, text };
            }
            else {
                return { node: textNode, pos: -1, text: "" };
            }
        }
        protectLocalComposition(view, { node, pos, text }) {
            // The node is already part of a local view desc, leave it there
            if (this.getDesc(node))
                return;
            // Create a composition view for the orphaned nodes
            let topNode = node;
            for (;; topNode = topNode.parentNode) {
                if (topNode.parentNode == this.contentDOM)
                    break;
                while (topNode.previousSibling)
                    topNode.parentNode.removeChild(topNode.previousSibling);
                while (topNode.nextSibling)
                    topNode.parentNode.removeChild(topNode.nextSibling);
                if (topNode.pmViewDesc)
                    topNode.pmViewDesc = undefined;
            }
            let desc = new CompositionViewDesc(this, topNode, node, text);
            view.input.compositionNodes.push(desc);
            // Patch up this.children to contain the composition view
            this.children = replaceNodes(this.children, pos, pos + text.length, view, desc);
        }
        // If this desc must be updated to match the given node decoration,
        // do so and return true.
        update(node, outerDeco, innerDeco, view) {
            if (this.dirty == NODE_DIRTY ||
                !node.sameMarkup(this.node))
                return false;
            this.updateInner(node, outerDeco, innerDeco, view);
            return true;
        }
        updateInner(node, outerDeco, innerDeco, view) {
            this.updateOuterDeco(outerDeco);
            this.node = node;
            this.innerDeco = innerDeco;
            if (this.contentDOM)
                this.updateChildren(view, this.posAtStart);
            this.dirty = NOT_DIRTY;
        }
        updateOuterDeco(outerDeco) {
            if (sameOuterDeco(outerDeco, this.outerDeco))
                return;
            let needsWrap = this.nodeDOM.nodeType != 1;
            let oldDOM = this.dom;
            this.dom = patchOuterDeco(this.dom, this.nodeDOM, computeOuterDeco(this.outerDeco, this.node, needsWrap), computeOuterDeco(outerDeco, this.node, needsWrap));
            if (this.dom != oldDOM) {
                oldDOM.pmViewDesc = undefined;
                this.dom.pmViewDesc = this;
            }
            this.outerDeco = outerDeco;
        }
        // Mark this node as being the selected node.
        selectNode() {
            if (this.nodeDOM.nodeType == 1)
                this.nodeDOM.classList.add("ProseMirror-selectednode");
            if (this.contentDOM || !this.node.type.spec.draggable)
                this.dom.draggable = true;
        }
        // Remove selected node marking from this node.
        deselectNode() {
            if (this.nodeDOM.nodeType == 1)
                this.nodeDOM.classList.remove("ProseMirror-selectednode");
            if (this.contentDOM || !this.node.type.spec.draggable)
                this.dom.removeAttribute("draggable");
        }
        get domAtom() { return this.node.isAtom; }
    }
    // Create a view desc for the top-level document node, to be exported
    // and used by the view class.
    function docViewDesc(doc, outerDeco, innerDeco, dom, view) {
        applyOuterDeco(dom, outerDeco, doc);
        return new NodeViewDesc(undefined, doc, outerDeco, innerDeco, dom, dom, dom, view, 0);
    }
    class TextViewDesc extends NodeViewDesc {
        constructor(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {
            super(parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view, 0);
        }
        parseRule() {
            let skip = this.nodeDOM.parentNode;
            while (skip && skip != this.dom && !skip.pmIsDeco)
                skip = skip.parentNode;
            return { skip: (skip || true) };
        }
        update(node, outerDeco, innerDeco, view) {
            if (this.dirty == NODE_DIRTY || (this.dirty != NOT_DIRTY && !this.inParent()) ||
                !node.sameMarkup(this.node))
                return false;
            this.updateOuterDeco(outerDeco);
            if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {
                this.nodeDOM.nodeValue = node.text;
                if (view.trackWrites == this.nodeDOM)
                    view.trackWrites = null;
            }
            this.node = node;
            this.dirty = NOT_DIRTY;
            return true;
        }
        inParent() {
            let parentDOM = this.parent.contentDOM;
            for (let n = this.nodeDOM; n; n = n.parentNode)
                if (n == parentDOM)
                    return true;
            return false;
        }
        domFromPos(pos) {
            return { node: this.nodeDOM, offset: pos };
        }
        localPosFromDOM(dom, offset, bias) {
            if (dom == this.nodeDOM)
                return this.posAtStart + Math.min(offset, this.node.text.length);
            return super.localPosFromDOM(dom, offset, bias);
        }
        ignoreMutation(mutation) {
            return mutation.type != "characterData" && mutation.type != "selection";
        }
        slice(from, to, view) {
            let node = this.node.cut(from, to), dom = document.createTextNode(node.text);
            return new TextViewDesc(this.parent, node, this.outerDeco, this.innerDeco, dom, dom, view);
        }
        markDirty(from, to) {
            super.markDirty(from, to);
            if (this.dom != this.nodeDOM && (from == 0 || to == this.nodeDOM.nodeValue.length))
                this.dirty = NODE_DIRTY;
        }
        get domAtom() { return false; }
    }
    // A dummy desc used to tag trailing BR or IMG nodes created to work
    // around contentEditable terribleness.
    class TrailingHackViewDesc extends ViewDesc {
        parseRule() { return { ignore: true }; }
        matchesHack(nodeName) { return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName; }
        get domAtom() { return true; }
        get ignoreForCoords() { return this.dom.nodeName == "IMG"; }
    }
    // A separate subclass is used for customized node views, so that the
    // extra checks only have to be made for nodes that are actually
    // customized.
    class CustomNodeViewDesc extends NodeViewDesc {
        constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {
            super(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos);
            this.spec = spec;
        }
        // A custom `update` method gets to decide whether the update goes
        // through. If it does, and there's a `contentDOM` node, our logic
        // updates the children.
        update(node, outerDeco, innerDeco, view) {
            if (this.dirty == NODE_DIRTY)
                return false;
            if (this.spec.update) {
                let result = this.spec.update(node, outerDeco, innerDeco);
                if (result)
                    this.updateInner(node, outerDeco, innerDeco, view);
                return result;
            }
            else if (!this.contentDOM && !node.isLeaf) {
                return false;
            }
            else {
                return super.update(node, outerDeco, innerDeco, view);
            }
        }
        selectNode() {
            this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
        }
        deselectNode() {
            this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
        }
        setSelection(anchor, head, root, force) {
            this.spec.setSelection ? this.spec.setSelection(anchor, head, root)
                : super.setSelection(anchor, head, root, force);
        }
        destroy() {
            if (this.spec.destroy)
                this.spec.destroy();
            super.destroy();
        }
        stopEvent(event) {
            return this.spec.stopEvent ? this.spec.stopEvent(event) : false;
        }
        ignoreMutation(mutation) {
            return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation);
        }
    }
    // Sync the content of the given DOM node with the nodes associated
    // with the given array of view descs, recursing into mark descs
    // because this should sync the subtree for a whole node at a time.
    function renderDescs(parentDOM, descs, view) {
        let dom = parentDOM.firstChild, written = false;
        for (let i = 0; i < descs.length; i++) {
            let desc = descs[i], childDOM = desc.dom;
            if (childDOM.parentNode == parentDOM) {
                while (childDOM != dom) {
                    dom = rm(dom);
                    written = true;
                }
                dom = dom.nextSibling;
            }
            else {
                written = true;
                parentDOM.insertBefore(childDOM, dom);
            }
            if (desc instanceof MarkViewDesc) {
                let pos = dom ? dom.previousSibling : parentDOM.lastChild;
                renderDescs(desc.contentDOM, desc.children, view);
                dom = pos ? pos.nextSibling : parentDOM.firstChild;
            }
        }
        while (dom) {
            dom = rm(dom);
            written = true;
        }
        if (written && view.trackWrites == parentDOM)
            view.trackWrites = null;
    }
    const OuterDecoLevel = function (nodeName) {
        if (nodeName)
            this.nodeName = nodeName;
    };
    OuterDecoLevel.prototype = Object.create(null);
    const noDeco = [new OuterDecoLevel];
    function computeOuterDeco(outerDeco, node, needsWrap) {
        if (outerDeco.length == 0)
            return noDeco;
        let top = needsWrap ? noDeco[0] : new OuterDecoLevel, result = [top];
        for (let i = 0; i < outerDeco.length; i++) {
            let attrs = outerDeco[i].type.attrs;
            if (!attrs)
                continue;
            if (attrs.nodeName)
                result.push(top = new OuterDecoLevel(attrs.nodeName));
            for (let name in attrs) {
                let val = attrs[name];
                if (val == null)
                    continue;
                if (needsWrap && result.length == 1)
                    result.push(top = new OuterDecoLevel(node.isInline ? "span" : "div"));
                if (name == "class")
                    top.class = (top.class ? top.class + " " : "") + val;
                else if (name == "style")
                    top.style = (top.style ? top.style + ";" : "") + val;
                else if (name != "nodeName")
                    top[name] = val;
            }
        }
        return result;
    }
    function patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {
        // Shortcut for trivial case
        if (prevComputed == noDeco && curComputed == noDeco)
            return nodeDOM;
        let curDOM = nodeDOM;
        for (let i = 0; i < curComputed.length; i++) {
            let deco = curComputed[i], prev = prevComputed[i];
            if (i) {
                let parent;
                if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM &&
                    (parent = curDOM.parentNode) && parent.nodeName.toLowerCase() == deco.nodeName) {
                    curDOM = parent;
                }
                else {
                    parent = document.createElement(deco.nodeName);
                    parent.pmIsDeco = true;
                    parent.appendChild(curDOM);
                    prev = noDeco[0];
                    curDOM = parent;
                }
            }
            patchAttributes(curDOM, prev || noDeco[0], deco);
        }
        return curDOM;
    }
    function patchAttributes(dom, prev, cur) {
        for (let name in prev)
            if (name != "class" && name != "style" && name != "nodeName" && !(name in cur))
                dom.removeAttribute(name);
        for (let name in cur)
            if (name != "class" && name != "style" && name != "nodeName" && cur[name] != prev[name])
                dom.setAttribute(name, cur[name]);
        if (prev.class != cur.class) {
            let prevList = prev.class ? prev.class.split(" ").filter(Boolean) : [];
            let curList = cur.class ? cur.class.split(" ").filter(Boolean) : [];
            for (let i = 0; i < prevList.length; i++)
                if (curList.indexOf(prevList[i]) == -1)
                    dom.classList.remove(prevList[i]);
            for (let i = 0; i < curList.length; i++)
                if (prevList.indexOf(curList[i]) == -1)
                    dom.classList.add(curList[i]);
            if (dom.classList.length == 0)
                dom.removeAttribute("class");
        }
        if (prev.style != cur.style) {
            if (prev.style) {
                let prop = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, m;
                while (m = prop.exec(prev.style))
                    dom.style.removeProperty(m[1]);
            }
            if (cur.style)
                dom.style.cssText += cur.style;
        }
    }
    function applyOuterDeco(dom, deco, node) {
        return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1));
    }
    function sameOuterDeco(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!a[i].type.eq(b[i].type))
                return false;
        return true;
    }
    // Remove a DOM node and return its next sibling.
    function rm(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    // Helper class for incrementally updating a tree of mark descs and
    // the widget and node descs inside of them.
    class ViewTreeUpdater {
        constructor(top, lock, view) {
            this.lock = lock;
            this.view = view;
            // Index into `this.top`'s child array, represents the current
            // update position.
            this.index = 0;
            // When entering a mark, the current top and index are pushed
            // onto this.
            this.stack = [];
            // Tracks whether anything was changed
            this.changed = false;
            this.top = top;
            this.preMatch = preMatch(top.node.content, top);
        }
        // Destroy and remove the children between the given indices in
        // `this.top`.
        destroyBetween(start, end) {
            if (start == end)
                return;
            for (let i = start; i < end; i++)
                this.top.children[i].destroy();
            this.top.children.splice(start, end - start);
            this.changed = true;
        }
        // Destroy all remaining children in `this.top`.
        destroyRest() {
            this.destroyBetween(this.index, this.top.children.length);
        }
        // Sync the current stack of mark descs with the given array of
        // marks, reusing existing mark descs when possible.
        syncToMarks(marks, inline, view) {
            let keep = 0, depth = this.stack.length >> 1;
            let maxKeep = Math.min(depth, marks.length);
            while (keep < maxKeep &&
                (keep == depth - 1 ? this.top : this.stack[(keep + 1) << 1])
                    .matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false)
                keep++;
            while (keep < depth) {
                this.destroyRest();
                this.top.dirty = NOT_DIRTY;
                this.index = this.stack.pop();
                this.top = this.stack.pop();
                depth--;
            }
            while (depth < marks.length) {
                this.stack.push(this.top, this.index + 1);
                let found = -1;
                for (let i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {
                    let next = this.top.children[i];
                    if (next.matchesMark(marks[depth]) && !this.isLocked(next.dom)) {
                        found = i;
                        break;
                    }
                }
                if (found > -1) {
                    if (found > this.index) {
                        this.changed = true;
                        this.destroyBetween(this.index, found);
                    }
                    this.top = this.top.children[this.index];
                }
                else {
                    let markDesc = MarkViewDesc.create(this.top, marks[depth], inline, view);
                    this.top.children.splice(this.index, 0, markDesc);
                    this.top = markDesc;
                    this.changed = true;
                }
                this.index = 0;
                depth++;
            }
        }
        // Try to find a node desc matching the given data. Skip over it and
        // return true when successful.
        findNodeMatch(node, outerDeco, innerDeco, index) {
            let found = -1, targetDesc;
            if (index >= this.preMatch.index &&
                (targetDesc = this.preMatch.matches[index - this.preMatch.index]).parent == this.top &&
                targetDesc.matchesNode(node, outerDeco, innerDeco)) {
                found = this.top.children.indexOf(targetDesc, this.index);
            }
            else {
                for (let i = this.index, e = Math.min(this.top.children.length, i + 5); i < e; i++) {
                    let child = this.top.children[i];
                    if (child.matchesNode(node, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {
                        found = i;
                        break;
                    }
                }
            }
            if (found < 0)
                return false;
            this.destroyBetween(this.index, found);
            this.index++;
            return true;
        }
        updateNodeAt(node, outerDeco, innerDeco, index, view) {
            let child = this.top.children[index];
            if (child.dirty == NODE_DIRTY && child.dom == child.contentDOM)
                child.dirty = CONTENT_DIRTY;
            if (!child.update(node, outerDeco, innerDeco, view))
                return false;
            this.destroyBetween(this.index, index);
            this.index++;
            return true;
        }
        findIndexWithChild(domNode) {
            for (;;) {
                let parent = domNode.parentNode;
                if (!parent)
                    return -1;
                if (parent == this.top.contentDOM) {
                    let desc = domNode.pmViewDesc;
                    if (desc)
                        for (let i = this.index; i < this.top.children.length; i++) {
                            if (this.top.children[i] == desc)
                                return i;
                        }
                    return -1;
                }
                domNode = parent;
            }
        }
        // Try to update the next node, if any, to the given data. Checks
        // pre-matches to avoid overwriting nodes that could still be used.
        updateNextNode(node, outerDeco, innerDeco, view, index) {
            for (let i = this.index; i < this.top.children.length; i++) {
                let next = this.top.children[i];
                if (next instanceof NodeViewDesc) {
                    let preMatch = this.preMatch.matched.get(next);
                    if (preMatch != null && preMatch != index)
                        return false;
                    let nextDOM = next.dom;
                    // Can't update if nextDOM is or contains this.lock, except if
                    // it's a text node whose content already matches the new text
                    // and whose decorations match the new ones.
                    let locked = this.isLocked(nextDOM) &&
                        !(node.isText && next.node && next.node.isText && next.nodeDOM.nodeValue == node.text &&
                            next.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next.outerDeco));
                    if (!locked && next.update(node, outerDeco, innerDeco, view)) {
                        this.destroyBetween(this.index, i);
                        if (next.dom != nextDOM)
                            this.changed = true;
                        this.index++;
                        return true;
                    }
                    break;
                }
            }
            return false;
        }
        // Insert the node as a newly created node desc.
        addNode(node, outerDeco, innerDeco, view, pos) {
            this.top.children.splice(this.index++, 0, NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos));
            this.changed = true;
        }
        placeWidget(widget, view, pos) {
            let next = this.index < this.top.children.length ? this.top.children[this.index] : null;
            if (next && next.matchesWidget(widget) &&
                (widget == next.widget || !next.widget.type.toDOM.parentNode)) {
                this.index++;
            }
            else {
                let desc = new WidgetViewDesc(this.top, widget, view, pos);
                this.top.children.splice(this.index++, 0, desc);
                this.changed = true;
            }
        }
        // Make sure a textblock looks and behaves correctly in
        // contentEditable.
        addTextblockHacks() {
            let lastChild = this.top.children[this.index - 1], parent = this.top;
            while (lastChild instanceof MarkViewDesc) {
                parent = lastChild;
                lastChild = parent.children[parent.children.length - 1];
            }
            if (!lastChild || // Empty textblock
                !(lastChild instanceof TextViewDesc) ||
                /\n$/.test(lastChild.node.text) ||
                (this.view.requiresGeckoHackNode && /\s$/.test(lastChild.node.text))) {
                // Avoid bugs in Safari's cursor drawing (#1165) and Chrome's mouse selection (#1152)
                if ((safari || chrome) && lastChild && lastChild.dom.contentEditable == "false")
                    this.addHackNode("IMG", parent);
                this.addHackNode("BR", this.top);
            }
        }
        addHackNode(nodeName, parent) {
            if (parent == this.top && this.index < parent.children.length && parent.children[this.index].matchesHack(nodeName)) {
                this.index++;
            }
            else {
                let dom = document.createElement(nodeName);
                if (nodeName == "IMG") {
                    dom.className = "ProseMirror-separator";
                    dom.alt = "";
                }
                if (nodeName == "BR")
                    dom.className = "ProseMirror-trailingBreak";
                let hack = new TrailingHackViewDesc(this.top, [], dom, null);
                if (parent != this.top)
                    parent.children.push(hack);
                else
                    parent.children.splice(this.index++, 0, hack);
                this.changed = true;
            }
        }
        isLocked(node) {
            return this.lock && (node == this.lock || node.nodeType == 1 && node.contains(this.lock.parentNode));
        }
    }
    // Iterate from the end of the fragment and array of descs to find
    // directly matching ones, in order to avoid overeagerly reusing those
    // for other nodes. Returns the fragment index of the first node that
    // is part of the sequence of matched nodes at the end of the
    // fragment.
    function preMatch(frag, parentDesc) {
        let curDesc = parentDesc, descI = curDesc.children.length;
        let fI = frag.childCount, matched = new Map, matches = [];
        outer: while (fI > 0) {
            let desc;
            for (;;) {
                if (descI) {
                    let next = curDesc.children[descI - 1];
                    if (next instanceof MarkViewDesc) {
                        curDesc = next;
                        descI = next.children.length;
                    }
                    else {
                        desc = next;
                        descI--;
                        break;
                    }
                }
                else if (curDesc == parentDesc) {
                    break outer;
                }
                else {
                    // FIXME
                    descI = curDesc.parent.children.indexOf(curDesc);
                    curDesc = curDesc.parent;
                }
            }
            let node = desc.node;
            if (!node)
                continue;
            if (node != frag.child(fI - 1))
                break;
            --fI;
            matched.set(desc, fI);
            matches.push(desc);
        }
        return { index: fI, matched, matches: matches.reverse() };
    }
    function compareSide(a, b) {
        return a.type.side - b.type.side;
    }
    // This function abstracts iterating over the nodes and decorations in
    // a fragment. Calls `onNode` for each node, with its local and child
    // decorations. Splits text nodes when there is a decoration starting
    // or ending inside of them. Calls `onWidget` for each widget.
    function iterDeco(parent, deco, onWidget, onNode) {
        let locals = deco.locals(parent), offset = 0;
        // Simple, cheap variant for when there are no local decorations
        if (locals.length == 0) {
            for (let i = 0; i < parent.childCount; i++) {
                let child = parent.child(i);
                onNode(child, locals, deco.forChild(offset, child), i);
                offset += child.nodeSize;
            }
            return;
        }
        let decoIndex = 0, active = [], restNode = null;
        for (let parentIndex = 0;;) {
            if (decoIndex < locals.length && locals[decoIndex].to == offset) {
                let widget = locals[decoIndex++], widgets;
                while (decoIndex < locals.length && locals[decoIndex].to == offset)
                    (widgets || (widgets = [widget])).push(locals[decoIndex++]);
                if (widgets) {
                    widgets.sort(compareSide);
                    for (let i = 0; i < widgets.length; i++)
                        onWidget(widgets[i], parentIndex, !!restNode);
                }
                else {
                    onWidget(widget, parentIndex, !!restNode);
                }
            }
            let child, index;
            if (restNode) {
                index = -1;
                child = restNode;
                restNode = null;
            }
            else if (parentIndex < parent.childCount) {
                index = parentIndex;
                child = parent.child(parentIndex++);
            }
            else {
                break;
            }
            for (let i = 0; i < active.length; i++)
                if (active[i].to <= offset)
                    active.splice(i--, 1);
            while (decoIndex < locals.length && locals[decoIndex].from <= offset && locals[decoIndex].to > offset)
                active.push(locals[decoIndex++]);
            let end = offset + child.nodeSize;
            if (child.isText) {
                let cutAt = end;
                if (decoIndex < locals.length && locals[decoIndex].from < cutAt)
                    cutAt = locals[decoIndex].from;
                for (let i = 0; i < active.length; i++)
                    if (active[i].to < cutAt)
                        cutAt = active[i].to;
                if (cutAt < end) {
                    restNode = child.cut(cutAt - offset);
                    child = child.cut(0, cutAt - offset);
                    end = cutAt;
                    index = -1;
                }
            }
            let outerDeco = child.isInline && !child.isLeaf ? active.filter(d => !d.inline) : active.slice();
            onNode(child, outerDeco, deco.forChild(offset, child), index);
            offset = end;
        }
    }
    // List markers in Mobile Safari will mysteriously disappear
    // sometimes. This works around that.
    function iosHacks(dom) {
        if (dom.nodeName == "UL" || dom.nodeName == "OL") {
            let oldCSS = dom.style.cssText;
            dom.style.cssText = oldCSS + "; list-style: square !important";
            window.getComputedStyle(dom).listStyle;
            dom.style.cssText = oldCSS;
        }
    }
    function nearbyTextNode(node, offset) {
        for (;;) {
            if (node.nodeType == 3)
                return node;
            if (node.nodeType == 1 && offset > 0) {
                if (node.childNodes.length > offset && node.childNodes[offset].nodeType == 3)
                    return node.childNodes[offset];
                node = node.childNodes[offset - 1];
                offset = nodeSize(node);
            }
            else if (node.nodeType == 1 && offset < node.childNodes.length) {
                node = node.childNodes[offset];
                offset = 0;
            }
            else {
                return null;
            }
        }
    }
    // Find a piece of text in an inline fragment, overlapping from-to
    function findTextInFragment(frag, text, from, to) {
        for (let i = 0, pos = 0; i < frag.childCount && pos <= to;) {
            let child = frag.child(i++), childStart = pos;
            pos += child.nodeSize;
            if (!child.isText)
                continue;
            let str = child.text;
            while (i < frag.childCount) {
                let next = frag.child(i++);
                pos += next.nodeSize;
                if (!next.isText)
                    break;
                str += next.text;
            }
            if (pos >= from) {
                let found = childStart < to ? str.lastIndexOf(text, to - childStart - 1) : -1;
                if (found >= 0 && found + text.length + childStart >= from)
                    return childStart + found;
                if (from == to && str.length >= (to + text.length) - childStart &&
                    str.slice(to - childStart, to - childStart + text.length) == text)
                    return to;
            }
        }
        return -1;
    }
    // Replace range from-to in an array of view descs with replacement
    // (may be null to just delete). This goes very much against the grain
    // of the rest of this code, which tends to create nodes with the
    // right shape in one go, rather than messing with them after
    // creation, but is necessary in the composition hack.
    function replaceNodes(nodes, from, to, view, replacement) {
        let result = [];
        for (let i = 0, off = 0; i < nodes.length; i++) {
            let child = nodes[i], start = off, end = off += child.size;
            if (start >= to || end <= from) {
                result.push(child);
            }
            else {
                if (start < from)
                    result.push(child.slice(0, from - start, view));
                if (replacement) {
                    result.push(replacement);
                    replacement = undefined;
                }
                if (end > to)
                    result.push(child.slice(to - start, child.size, view));
            }
        }
        return result;
    }

    function selectionFromDOM(view, origin = null) {
        let domSel = view.domSelectionRange(), doc = view.state.doc;
        if (!domSel.focusNode)
            return null;
        let nearestDesc = view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0;
        let head = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset, 1);
        if (head < 0)
            return null;
        let $head = doc.resolve(head), $anchor, selection;
        if (selectionCollapsed(domSel)) {
            $anchor = $head;
            while (nearestDesc && !nearestDesc.node)
                nearestDesc = nearestDesc.parent;
            let nearestDescNode = nearestDesc.node;
            if (nearestDesc && nearestDescNode.isAtom && NodeSelection.isSelectable(nearestDescNode) && nearestDesc.parent
                && !(nearestDescNode.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {
                let pos = nearestDesc.posBefore;
                selection = new NodeSelection(head == pos ? $head : doc.resolve(pos));
            }
        }
        else {
            let anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset, 1);
            if (anchor < 0)
                return null;
            $anchor = doc.resolve(anchor);
        }
        if (!selection) {
            let bias = origin == "pointer" || (view.state.selection.head < $head.pos && !inWidget) ? 1 : -1;
            selection = selectionBetween(view, $anchor, $head, bias);
        }
        return selection;
    }
    function editorOwnsSelection(view) {
        return view.editable ? view.hasFocus() :
            hasSelection(view) && document.activeElement && document.activeElement.contains(view.dom);
    }
    function selectionToDOM(view, force = false) {
        let sel = view.state.selection;
        syncNodeSelection(view, sel);
        if (!editorOwnsSelection(view))
            return;
        // The delayed drag selection causes issues with Cell Selections
        // in Safari. And the drag selection delay is to workarond issues
        // which only present in Chrome.
        if (!force && view.input.mouseDown && view.input.mouseDown.allowDefault && chrome) {
            let domSel = view.domSelectionRange(), curSel = view.domObserver.currentSelection;
            if (domSel.anchorNode && curSel.anchorNode &&
                isEquivalentPosition(domSel.anchorNode, domSel.anchorOffset, curSel.anchorNode, curSel.anchorOffset)) {
                view.input.mouseDown.delayedSelectionSync = true;
                view.domObserver.setCurSelection();
                return;
            }
        }
        view.domObserver.disconnectSelection();
        if (view.cursorWrapper) {
            selectCursorWrapper(view);
        }
        else {
            let { anchor, head } = sel, resetEditableFrom, resetEditableTo;
            if (brokenSelectBetweenUneditable && !(sel instanceof TextSelection)) {
                if (!sel.$from.parent.inlineContent)
                    resetEditableFrom = temporarilyEditableNear(view, sel.from);
                if (!sel.empty && !sel.$from.parent.inlineContent)
                    resetEditableTo = temporarilyEditableNear(view, sel.to);
            }
            view.docView.setSelection(anchor, head, view.root, force);
            if (brokenSelectBetweenUneditable) {
                if (resetEditableFrom)
                    resetEditable(resetEditableFrom);
                if (resetEditableTo)
                    resetEditable(resetEditableTo);
            }
            if (sel.visible) {
                view.dom.classList.remove("ProseMirror-hideselection");
            }
            else {
                view.dom.classList.add("ProseMirror-hideselection");
                if ("onselectionchange" in document)
                    removeClassOnSelectionChange(view);
            }
        }
        view.domObserver.setCurSelection();
        view.domObserver.connectSelection();
    }
    // Kludge to work around Webkit not allowing a selection to start/end
    // between non-editable block nodes. We briefly make something
    // editable, set the selection, then set it uneditable again.
    const brokenSelectBetweenUneditable = safari || chrome && chrome_version < 63;
    function temporarilyEditableNear(view, pos) {
        let { node, offset } = view.docView.domFromPos(pos, 0);
        let after = offset < node.childNodes.length ? node.childNodes[offset] : null;
        let before = offset ? node.childNodes[offset - 1] : null;
        if (safari && after && after.contentEditable == "false")
            return setEditable(after);
        if ((!after || after.contentEditable == "false") &&
            (!before || before.contentEditable == "false")) {
            if (after)
                return setEditable(after);
            else if (before)
                return setEditable(before);
        }
    }
    function setEditable(element) {
        element.contentEditable = "true";
        if (safari && element.draggable) {
            element.draggable = false;
            element.wasDraggable = true;
        }
        return element;
    }
    function resetEditable(element) {
        element.contentEditable = "false";
        if (element.wasDraggable) {
            element.draggable = true;
            element.wasDraggable = null;
        }
    }
    function removeClassOnSelectionChange(view) {
        let doc = view.dom.ownerDocument;
        doc.removeEventListener("selectionchange", view.input.hideSelectionGuard);
        let domSel = view.domSelectionRange();
        let node = domSel.anchorNode, offset = domSel.anchorOffset;
        doc.addEventListener("selectionchange", view.input.hideSelectionGuard = () => {
            if (domSel.anchorNode != node || domSel.anchorOffset != offset) {
                doc.removeEventListener("selectionchange", view.input.hideSelectionGuard);
                setTimeout(() => {
                    if (!editorOwnsSelection(view) || view.state.selection.visible)
                        view.dom.classList.remove("ProseMirror-hideselection");
                }, 20);
            }
        });
    }
    function selectCursorWrapper(view) {
        let domSel = view.domSelection(), range = document.createRange();
        let node = view.cursorWrapper.dom, img = node.nodeName == "IMG";
        if (img)
            range.setEnd(node.parentNode, domIndex(node) + 1);
        else
            range.setEnd(node, 0);
        range.collapse(false);
        domSel.removeAllRanges();
        domSel.addRange(range);
        // Kludge to kill 'control selection' in IE11 when selecting an
        // invisible cursor wrapper, since that would result in those weird
        // resize handles and a selection that considers the absolutely
        // positioned wrapper, rather than the root editable node, the
        // focused element.
        if (!img && !view.state.selection.visible && ie && ie_version <= 11) {
            node.disabled = true;
            node.disabled = false;
        }
    }
    function syncNodeSelection(view, sel) {
        if (sel instanceof NodeSelection) {
            let desc = view.docView.descAt(sel.from);
            if (desc != view.lastSelectedViewDesc) {
                clearNodeSelection(view);
                if (desc)
                    desc.selectNode();
                view.lastSelectedViewDesc = desc;
            }
        }
        else {
            clearNodeSelection(view);
        }
    }
    // Clear all DOM statefulness of the last node selection.
    function clearNodeSelection(view) {
        if (view.lastSelectedViewDesc) {
            if (view.lastSelectedViewDesc.parent)
                view.lastSelectedViewDesc.deselectNode();
            view.lastSelectedViewDesc = undefined;
        }
    }
    function selectionBetween(view, $anchor, $head, bias) {
        return view.someProp("createSelectionBetween", f => f(view, $anchor, $head))
            || TextSelection.between($anchor, $head, bias);
    }
    function hasFocusAndSelection(view) {
        if (view.editable && !view.hasFocus())
            return false;
        return hasSelection(view);
    }
    function hasSelection(view) {
        let sel = view.domSelectionRange();
        if (!sel.anchorNode)
            return false;
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) &&
                (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode));
        }
        catch (_) {
            return false;
        }
    }
    function anchorInRightPlace(view) {
        let anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0);
        let domSel = view.domSelectionRange();
        return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset);
    }

    function moveSelectionBlock(state, dir) {
        let { $anchor, $head } = state.selection;
        let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);
        let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;
        return $start && Selection.findFrom($start, dir);
    }
    function apply(view, sel) {
        view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());
        return true;
    }
    function selectHorizontally(view, dir, mods) {
        let sel = view.state.selection;
        if (sel instanceof TextSelection) {
            if (!sel.empty || mods.indexOf("s") > -1) {
                return false;
            }
            else if (view.endOfTextblock(dir > 0 ? "right" : "left")) {
                let next = moveSelectionBlock(view.state, dir);
                if (next && (next instanceof NodeSelection))
                    return apply(view, next);
                return false;
            }
            else if (!(mac && mods.indexOf("m") > -1)) {
                let $head = sel.$head, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc;
                if (!node || node.isText)
                    return false;
                let nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos;
                if (!(node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM))
                    return false;
                if (NodeSelection.isSelectable(node)) {
                    return apply(view, new NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head));
                }
                else if (webkit) {
                    // Chrome and Safari will introduce extra pointless cursor
                    // positions around inline uneditable nodes, so we have to
                    // take over and move the cursor past them (#937)
                    return apply(view, new TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node.nodeSize)));
                }
                else {
                    return false;
                }
            }
        }
        else if (sel instanceof NodeSelection && sel.node.isInline) {
            return apply(view, new TextSelection(dir > 0 ? sel.$to : sel.$from));
        }
        else {
            let next = moveSelectionBlock(view.state, dir);
            if (next)
                return apply(view, next);
            return false;
        }
    }
    function nodeLen(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function isIgnorable(dom) {
        let desc = dom.pmViewDesc;
        return desc && desc.size == 0 && (dom.nextSibling || dom.nodeName != "BR");
    }
    // Make sure the cursor isn't directly after one or more ignored
    // nodes, which will confuse the browser's cursor motion logic.
    function skipIgnoredNodesLeft(view) {
        let sel = view.domSelectionRange();
        let node = sel.focusNode, offset = sel.focusOffset;
        if (!node)
            return;
        let moveNode, moveOffset, force = false;
        // Gecko will do odd things when the selection is directly in front
        // of a non-editable node, so in that case, move it into the next
        // node if possible. Issue prosemirror/prosemirror#832.
        if (gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset]))
            force = true;
        for (;;) {
            if (offset > 0) {
                if (node.nodeType != 1) {
                    break;
                }
                else {
                    let before = node.childNodes[offset - 1];
                    if (isIgnorable(before)) {
                        moveNode = node;
                        moveOffset = --offset;
                    }
                    else if (before.nodeType == 3) {
                        node = before;
                        offset = node.nodeValue.length;
                    }
                    else
                        break;
                }
            }
            else if (isBlockNode(node)) {
                break;
            }
            else {
                let prev = node.previousSibling;
                while (prev && isIgnorable(prev)) {
                    moveNode = node.parentNode;
                    moveOffset = domIndex(prev);
                    prev = prev.previousSibling;
                }
                if (!prev) {
                    node = node.parentNode;
                    if (node == view.dom)
                        break;
                    offset = 0;
                }
                else {
                    node = prev;
                    offset = nodeLen(node);
                }
            }
        }
        if (force)
            setSelFocus(view, node, offset);
        else if (moveNode)
            setSelFocus(view, moveNode, moveOffset);
    }
    // Make sure the cursor isn't directly before one or more ignored
    // nodes.
    function skipIgnoredNodesRight(view) {
        let sel = view.domSelectionRange();
        let node = sel.focusNode, offset = sel.focusOffset;
        if (!node)
            return;
        let len = nodeLen(node);
        let moveNode, moveOffset;
        for (;;) {
            if (offset < len) {
                if (node.nodeType != 1)
                    break;
                let after = node.childNodes[offset];
                if (isIgnorable(after)) {
                    moveNode = node;
                    moveOffset = ++offset;
                }
                else
                    break;
            }
            else if (isBlockNode(node)) {
                break;
            }
            else {
                let next = node.nextSibling;
                while (next && isIgnorable(next)) {
                    moveNode = next.parentNode;
                    moveOffset = domIndex(next) + 1;
                    next = next.nextSibling;
                }
                if (!next) {
                    node = node.parentNode;
                    if (node == view.dom)
                        break;
                    offset = len = 0;
                }
                else {
                    node = next;
                    offset = 0;
                    len = nodeLen(node);
                }
            }
        }
        if (moveNode)
            setSelFocus(view, moveNode, moveOffset);
    }
    function isBlockNode(dom) {
        let desc = dom.pmViewDesc;
        return desc && desc.node && desc.node.isBlock;
    }
    function setSelFocus(view, node, offset) {
        let sel = view.domSelection();
        if (selectionCollapsed(sel)) {
            let range = document.createRange();
            range.setEnd(node, offset);
            range.setStart(node, offset);
            sel.removeAllRanges();
            sel.addRange(range);
        }
        else if (sel.extend) {
            sel.extend(node, offset);
        }
        view.domObserver.setCurSelection();
        let { state } = view;
        // If no state update ends up happening, reset the selection.
        setTimeout(() => {
            if (view.state == state)
                selectionToDOM(view);
        }, 50);
    }
    // Check whether vertical selection motion would involve node
    // selections. If so, apply it (if not, the result is left to the
    // browser)
    function selectVertically(view, dir, mods) {
        let sel = view.state.selection;
        if (sel instanceof TextSelection && !sel.empty || mods.indexOf("s") > -1)
            return false;
        if (mac && mods.indexOf("m") > -1)
            return false;
        let { $from, $to } = sel;
        if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? "up" : "down")) {
            let next = moveSelectionBlock(view.state, dir);
            if (next && (next instanceof NodeSelection))
                return apply(view, next);
        }
        if (!$from.parent.inlineContent) {
            let side = dir < 0 ? $from : $to;
            let beyond = sel instanceof AllSelection ? Selection.near(side, dir) : Selection.findFrom(side, dir);
            return beyond ? apply(view, beyond) : false;
        }
        return false;
    }
    function stopNativeHorizontalDelete(view, dir) {
        if (!(view.state.selection instanceof TextSelection))
            return true;
        let { $head, $anchor, empty } = view.state.selection;
        if (!$head.sameParent($anchor))
            return true;
        if (!empty)
            return false;
        if (view.endOfTextblock(dir > 0 ? "forward" : "backward"))
            return true;
        let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);
        if (nextNode && !nextNode.isText) {
            let tr = view.state.tr;
            if (dir < 0)
                tr.delete($head.pos - nextNode.nodeSize, $head.pos);
            else
                tr.delete($head.pos, $head.pos + nextNode.nodeSize);
            view.dispatch(tr);
            return true;
        }
        return false;
    }
    function switchEditable(view, node, state) {
        view.domObserver.stop();
        node.contentEditable = state;
        view.domObserver.start();
    }
    // Issue #867 / #1090 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821
    // In which Safari (and at some point in the past, Chrome) does really
    // wrong things when the down arrow is pressed when the cursor is
    // directly at the start of a textblock and has an uneditable node
    // after it
    function safariDownArrowBug(view) {
        if (!safari || view.state.selection.$head.parentOffset > 0)
            return false;
        let { focusNode, focusOffset } = view.domSelectionRange();
        if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 &&
            focusNode.firstChild && focusNode.firstChild.contentEditable == "false") {
            let child = focusNode.firstChild;
            switchEditable(view, child, "true");
            setTimeout(() => switchEditable(view, child, "false"), 20);
        }
        return false;
    }
    // A backdrop key mapping used to make sure we always suppress keys
    // that have a dangerous default effect, even if the commands they are
    // bound to return false, and to make sure that cursor-motion keys
    // find a cursor (as opposed to a node selection) when pressed. For
    // cursor-motion keys, the code in the handlers also takes care of
    // block selections.
    function getMods(event) {
        let result = "";
        if (event.ctrlKey)
            result += "c";
        if (event.metaKey)
            result += "m";
        if (event.altKey)
            result += "a";
        if (event.shiftKey)
            result += "s";
        return result;
    }
    function captureKeyDown(view, event) {
        let code = event.keyCode, mods = getMods(event);
        if (code == 8 || (mac && code == 72 && mods == "c")) { // Backspace, Ctrl-h on Mac
            return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodesLeft(view);
        }
        else if (code == 46 || (mac && code == 68 && mods == "c")) { // Delete, Ctrl-d on Mac
            return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodesRight(view);
        }
        else if (code == 13 || code == 27) { // Enter, Esc
            return true;
        }
        else if (code == 37 || (mac && code == 66 && mods == "c")) { // Left arrow, Ctrl-b on Mac
            return selectHorizontally(view, -1, mods) || skipIgnoredNodesLeft(view);
        }
        else if (code == 39 || (mac && code == 70 && mods == "c")) { // Right arrow, Ctrl-f on Mac
            return selectHorizontally(view, 1, mods) || skipIgnoredNodesRight(view);
        }
        else if (code == 38 || (mac && code == 80 && mods == "c")) { // Up arrow, Ctrl-p on Mac
            return selectVertically(view, -1, mods) || skipIgnoredNodesLeft(view);
        }
        else if (code == 40 || (mac && code == 78 && mods == "c")) { // Down arrow, Ctrl-n on Mac
            return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodesRight(view);
        }
        else if (mods == (mac ? "m" : "c") &&
            (code == 66 || code == 73 || code == 89 || code == 90)) { // Mod-[biyz]
            return true;
        }
        return false;
    }

    function serializeForClipboard(view, slice) {
        view.someProp("transformCopied", f => { slice = f(slice, view); });
        let context = [], { content, openStart, openEnd } = slice;
        while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {
            openStart--;
            openEnd--;
            let node = content.firstChild;
            context.push(node.type.name, node.attrs != node.type.defaultAttrs ? node.attrs : null);
            content = node.content;
        }
        let serializer = view.someProp("clipboardSerializer") || DOMSerializer.fromSchema(view.state.schema);
        let doc = detachedDoc(), wrap = doc.createElement("div");
        wrap.appendChild(serializer.serializeFragment(content, { document: doc }));
        let firstChild = wrap.firstChild, needsWrap, wrappers = 0;
        while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {
            for (let i = needsWrap.length - 1; i >= 0; i--) {
                let wrapper = doc.createElement(needsWrap[i]);
                while (wrap.firstChild)
                    wrapper.appendChild(wrap.firstChild);
                wrap.appendChild(wrapper);
                wrappers++;
            }
            firstChild = wrap.firstChild;
        }
        if (firstChild && firstChild.nodeType == 1)
            firstChild.setAttribute("data-pm-slice", `${openStart} ${openEnd}${wrappers ? ` -${wrappers}` : ""} ${JSON.stringify(context)}`);
        let text = view.someProp("clipboardTextSerializer", f => f(slice, view)) ||
            slice.content.textBetween(0, slice.content.size, "\n\n");
        return { dom: wrap, text };
    }
    // Read a slice of content from the clipboard (or drop data).
    function parseFromClipboard(view, text, html, plainText, $context) {
        let inCode = $context.parent.type.spec.code;
        let dom, slice;
        if (!html && !text)
            return null;
        let asText = text && (plainText || inCode || !html);
        if (asText) {
            view.someProp("transformPastedText", f => { text = f(text, inCode || plainText, view); });
            if (inCode)
                return text ? new Slice(Fragment.from(view.state.schema.text(text.replace(/\r\n?/g, "\n"))), 0, 0) : Slice.empty;
            let parsed = view.someProp("clipboardTextParser", f => f(text, $context, plainText, view));
            if (parsed) {
                slice = parsed;
            }
            else {
                let marks = $context.marks();
                let { schema } = view.state, serializer = DOMSerializer.fromSchema(schema);
                dom = document.createElement("div");
                text.split(/(?:\r\n?|\n)+/).forEach(block => {
                    let p = dom.appendChild(document.createElement("p"));
                    if (block)
                        p.appendChild(serializer.serializeNode(schema.text(block, marks)));
                });
            }
        }
        else {
            view.someProp("transformPastedHTML", f => { html = f(html, view); });
            dom = readHTML(html);
            if (webkit)
                restoreReplacedSpaces(dom);
        }
        let contextNode = dom && dom.querySelector("[data-pm-slice]");
        let sliceData = contextNode && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(contextNode.getAttribute("data-pm-slice") || "");
        if (sliceData && sliceData[3])
            for (let i = +sliceData[3]; i > 0; i--) {
                let child = dom.firstChild;
                while (child && child.nodeType != 1)
                    child = child.nextSibling;
                if (!child)
                    break;
                dom = child;
            }
        if (!slice) {
            let parser = view.someProp("clipboardParser") || view.someProp("domParser") || DOMParser.fromSchema(view.state.schema);
            slice = parser.parseSlice(dom, {
                preserveWhitespace: !!(asText || sliceData),
                context: $context,
                ruleFromNode(dom) {
                    if (dom.nodeName == "BR" && !dom.nextSibling &&
                        dom.parentNode && !inlineParents.test(dom.parentNode.nodeName))
                        return { ignore: true };
                    return null;
                }
            });
        }
        if (sliceData) {
            slice = addContext(closeSlice(slice, +sliceData[1], +sliceData[2]), sliceData[4]);
        }
        else { // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent
            slice = Slice.maxOpen(normalizeSiblings(slice.content, $context), true);
            if (slice.openStart || slice.openEnd) {
                let openStart = 0, openEnd = 0;
                for (let node = slice.content.firstChild; openStart < slice.openStart && !node.type.spec.isolating; openStart++, node = node.firstChild) { }
                for (let node = slice.content.lastChild; openEnd < slice.openEnd && !node.type.spec.isolating; openEnd++, node = node.lastChild) { }
                slice = closeSlice(slice, openStart, openEnd);
            }
        }
        view.someProp("transformPasted", f => { slice = f(slice, view); });
        return slice;
    }
    const inlineParents = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
    // Takes a slice parsed with parseSlice, which means there hasn't been
    // any content-expression checking done on the top nodes, tries to
    // find a parent node in the current context that might fit the nodes,
    // and if successful, rebuilds the slice so that it fits into that parent.
    //
    // This addresses the problem that Transform.replace expects a
    // coherent slice, and will fail to place a set of siblings that don't
    // fit anywhere in the schema.
    function normalizeSiblings(fragment, $context) {
        if (fragment.childCount < 2)
            return fragment;
        for (let d = $context.depth; d >= 0; d--) {
            let parent = $context.node(d);
            let match = parent.contentMatchAt($context.index(d));
            let lastWrap, result = [];
            fragment.forEach(node => {
                if (!result)
                    return;
                let wrap = match.findWrapping(node.type), inLast;
                if (!wrap)
                    return result = null;
                if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {
                    result[result.length - 1] = inLast;
                }
                else {
                    if (result.length)
                        result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length);
                    let wrapped = withWrappers(node, wrap);
                    result.push(wrapped);
                    match = match.matchType(wrapped.type);
                    lastWrap = wrap;
                }
            });
            if (result)
                return Fragment.from(result);
        }
        return fragment;
    }
    function withWrappers(node, wrap, from = 0) {
        for (let i = wrap.length - 1; i >= from; i--)
            node = wrap[i].create(null, Fragment.from(node));
        return node;
    }
    // Used to group adjacent nodes wrapped in similar parents by
    // normalizeSiblings into the same parent node
    function addToSibling(wrap, lastWrap, node, sibling, depth) {
        if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {
            let inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1);
            if (inner)
                return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner));
            let match = sibling.contentMatchAt(sibling.childCount);
            if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1]))
                return sibling.copy(sibling.content.append(Fragment.from(withWrappers(node, wrap, depth + 1))));
        }
    }
    function closeRight(node, depth) {
        if (depth == 0)
            return node;
        let fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1));
        let fill = node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true);
        return node.copy(fragment.append(fill));
    }
    function closeRange(fragment, side, from, to, depth, openEnd) {
        let node = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node.content;
        if (depth < to - 1)
            inner = closeRange(inner, side, from, to, depth + 1, openEnd);
        if (depth >= from)
            inner = side < 0 ? node.contentMatchAt(0).fillBefore(inner, fragment.childCount > 1 || openEnd <= depth).append(inner)
                : inner.append(node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true));
        return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node.copy(inner));
    }
    function closeSlice(slice, openStart, openEnd) {
        if (openStart < slice.openStart)
            slice = new Slice(closeRange(slice.content, -1, openStart, slice.openStart, 0, slice.openEnd), openStart, slice.openEnd);
        if (openEnd < slice.openEnd)
            slice = new Slice(closeRange(slice.content, 1, openEnd, slice.openEnd, 0, 0), slice.openStart, openEnd);
        return slice;
    }
    // Trick from jQuery -- some elements must be wrapped in other
    // elements for innerHTML to work. I.e. if you do `div.innerHTML =
    // "<td>..</td>"` the table cells are ignored.
    const wrapMap = {
        thead: ["table"],
        tbody: ["table"],
        tfoot: ["table"],
        caption: ["table"],
        colgroup: ["table"],
        col: ["table", "colgroup"],
        tr: ["table", "tbody"],
        td: ["table", "tbody", "tr"],
        th: ["table", "tbody", "tr"]
    };
    let _detachedDoc = null;
    function detachedDoc() {
        return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument("title"));
    }
    function readHTML(html) {
        let metas = /^(\s*<meta [^>]*>)*/.exec(html);
        if (metas)
            html = html.slice(metas[0].length);
        let elt = detachedDoc().createElement("div");
        let firstTag = /<([a-z][^>\s]+)/i.exec(html), wrap;
        if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()])
            html = wrap.map(n => "<" + n + ">").join("") + html + wrap.map(n => "</" + n + ">").reverse().join("");
        elt.innerHTML = html;
        if (wrap)
            for (let i = 0; i < wrap.length; i++)
                elt = elt.querySelector(wrap[i]) || elt;
        return elt;
    }
    // Webkit browsers do some hard-to-predict replacement of regular
    // spaces with non-breaking spaces when putting content on the
    // clipboard. This tries to convert such non-breaking spaces (which
    // will be wrapped in a plain span on Chrome, a span with class
    // Apple-converted-space on Safari) back to regular spaces.
    function restoreReplacedSpaces(dom) {
        let nodes = dom.querySelectorAll(chrome ? "span:not([class]):not([style])" : "span.Apple-converted-space");
        for (let i = 0; i < nodes.length; i++) {
            let node = nodes[i];
            if (node.childNodes.length == 1 && node.textContent == "\u00a0" && node.parentNode)
                node.parentNode.replaceChild(dom.ownerDocument.createTextNode(" "), node);
        }
    }
    function addContext(slice, context) {
        if (!slice.size)
            return slice;
        let schema = slice.content.firstChild.type.schema, array;
        try {
            array = JSON.parse(context);
        }
        catch (e) {
            return slice;
        }
        let { content, openStart, openEnd } = slice;
        for (let i = array.length - 2; i >= 0; i -= 2) {
            let type = schema.nodes[array[i]];
            if (!type || type.hasRequiredAttrs())
                break;
            content = Fragment.from(type.create(array[i + 1], content));
            openStart++;
            openEnd++;
        }
        return new Slice(content, openStart, openEnd);
    }

    // A collection of DOM events that occur within the editor, and callback functions
    // to invoke when the event fires.
    const handlers = {};
    const editHandlers = {};
    const passiveHandlers = { touchstart: true, touchmove: true };
    class InputState {
        constructor() {
            this.shiftKey = false;
            this.mouseDown = null;
            this.lastKeyCode = null;
            this.lastKeyCodeTime = 0;
            this.lastClick = { time: 0, x: 0, y: 0, type: "" };
            this.lastSelectionOrigin = null;
            this.lastSelectionTime = 0;
            this.lastIOSEnter = 0;
            this.lastIOSEnterFallbackTimeout = -1;
            this.lastFocus = 0;
            this.lastTouch = 0;
            this.lastAndroidDelete = 0;
            this.composing = false;
            this.composingTimeout = -1;
            this.compositionNodes = [];
            this.compositionEndedAt = -2e8;
            this.domChangeCount = 0;
            this.eventHandlers = Object.create(null);
            this.hideSelectionGuard = null;
        }
    }
    function initInput(view) {
        for (let event in handlers) {
            let handler = handlers[event];
            view.dom.addEventListener(event, view.input.eventHandlers[event] = (event) => {
                if (eventBelongsToView(view, event) && !runCustomHandler(view, event) &&
                    (view.editable || !(event.type in editHandlers)))
                    handler(view, event);
            }, passiveHandlers[event] ? { passive: true } : undefined);
        }
        // On Safari, for reasons beyond my understanding, adding an input
        // event handler makes an issue where the composition vanishes when
        // you press enter go away.
        if (safari)
            view.dom.addEventListener("input", () => null);
        ensureListeners(view);
    }
    function setSelectionOrigin(view, origin) {
        view.input.lastSelectionOrigin = origin;
        view.input.lastSelectionTime = Date.now();
    }
    function destroyInput(view) {
        view.domObserver.stop();
        for (let type in view.input.eventHandlers)
            view.dom.removeEventListener(type, view.input.eventHandlers[type]);
        clearTimeout(view.input.composingTimeout);
        clearTimeout(view.input.lastIOSEnterFallbackTimeout);
    }
    function ensureListeners(view) {
        view.someProp("handleDOMEvents", currentHandlers => {
            for (let type in currentHandlers)
                if (!view.input.eventHandlers[type])
                    view.dom.addEventListener(type, view.input.eventHandlers[type] = event => runCustomHandler(view, event));
        });
    }
    function runCustomHandler(view, event) {
        return view.someProp("handleDOMEvents", handlers => {
            let handler = handlers[event.type];
            return handler ? handler(view, event) || event.defaultPrevented : false;
        });
    }
    function eventBelongsToView(view, event) {
        if (!event.bubbles)
            return true;
        if (event.defaultPrevented)
            return false;
        for (let node = event.target; node != view.dom; node = node.parentNode)
            if (!node || node.nodeType == 11 ||
                (node.pmViewDesc && node.pmViewDesc.stopEvent(event)))
                return false;
        return true;
    }
    function dispatchEvent(view, event) {
        if (!runCustomHandler(view, event) && handlers[event.type] &&
            (view.editable || !(event.type in editHandlers)))
            handlers[event.type](view, event);
    }
    editHandlers.keydown = (view, _event) => {
        let event = _event;
        view.input.shiftKey = event.keyCode == 16 || event.shiftKey;
        if (inOrNearComposition(view, event))
            return;
        view.input.lastKeyCode = event.keyCode;
        view.input.lastKeyCodeTime = Date.now();
        // Suppress enter key events on Chrome Android, because those tend
        // to be part of a confused sequence of composition events fired,
        // and handling them eagerly tends to corrupt the input.
        if (android && chrome && event.keyCode == 13)
            return;
        if (event.keyCode != 229)
            view.domObserver.forceFlush();
        // On iOS, if we preventDefault enter key presses, the virtual
        // keyboard gets confused. So the hack here is to set a flag that
        // makes the DOM change code recognize that what just happens should
        // be replaced by whatever the Enter key handlers do.
        if (ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {
            let now = Date.now();
            view.input.lastIOSEnter = now;
            view.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
                if (view.input.lastIOSEnter == now) {
                    view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")));
                    view.input.lastIOSEnter = 0;
                }
            }, 200);
        }
        else if (view.someProp("handleKeyDown", f => f(view, event)) || captureKeyDown(view, event)) {
            event.preventDefault();
        }
        else {
            setSelectionOrigin(view, "key");
        }
    };
    editHandlers.keyup = (view, event) => {
        if (event.keyCode == 16)
            view.input.shiftKey = false;
    };
    editHandlers.keypress = (view, _event) => {
        let event = _event;
        if (inOrNearComposition(view, event) || !event.charCode ||
            event.ctrlKey && !event.altKey || mac && event.metaKey)
            return;
        if (view.someProp("handleKeyPress", f => f(view, event))) {
            event.preventDefault();
            return;
        }
        let sel = view.state.selection;
        if (!(sel instanceof TextSelection) || !sel.$from.sameParent(sel.$to)) {
            let text = String.fromCharCode(event.charCode);
            if (!/[\r\n]/.test(text) && !view.someProp("handleTextInput", f => f(view, sel.$from.pos, sel.$to.pos, text)))
                view.dispatch(view.state.tr.insertText(text).scrollIntoView());
            event.preventDefault();
        }
    };
    function eventCoords(event) { return { left: event.clientX, top: event.clientY }; }
    function isNear(event, click) {
        let dx = click.x - event.clientX, dy = click.y - event.clientY;
        return dx * dx + dy * dy < 100;
    }
    function runHandlerOnContext(view, propName, pos, inside, event) {
        if (inside == -1)
            return false;
        let $pos = view.state.doc.resolve(inside);
        for (let i = $pos.depth + 1; i > 0; i--) {
            if (view.someProp(propName, f => i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true)
                : f(view, pos, $pos.node(i), $pos.before(i), event, false)))
                return true;
        }
        return false;
    }
    function updateSelection(view, selection, origin) {
        if (!view.focused)
            view.focus();
        let tr = view.state.tr.setSelection(selection);
        if (origin == "pointer")
            tr.setMeta("pointer", true);
        view.dispatch(tr);
    }
    function selectClickedLeaf(view, inside) {
        if (inside == -1)
            return false;
        let $pos = view.state.doc.resolve(inside), node = $pos.nodeAfter;
        if (node && node.isAtom && NodeSelection.isSelectable(node)) {
            updateSelection(view, new NodeSelection($pos), "pointer");
            return true;
        }
        return false;
    }
    function selectClickedNode(view, inside) {
        if (inside == -1)
            return false;
        let sel = view.state.selection, selectedNode, selectAt;
        if (sel instanceof NodeSelection)
            selectedNode = sel.node;
        let $pos = view.state.doc.resolve(inside);
        for (let i = $pos.depth + 1; i > 0; i--) {
            let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
            if (NodeSelection.isSelectable(node)) {
                if (selectedNode && sel.$from.depth > 0 &&
                    i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)
                    selectAt = $pos.before(sel.$from.depth);
                else
                    selectAt = $pos.before(i);
                break;
            }
        }
        if (selectAt != null) {
            updateSelection(view, NodeSelection.create(view.state.doc, selectAt), "pointer");
            return true;
        }
        else {
            return false;
        }
    }
    function handleSingleClick(view, pos, inside, event, selectNode) {
        return runHandlerOnContext(view, "handleClickOn", pos, inside, event) ||
            view.someProp("handleClick", f => f(view, pos, event)) ||
            (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside));
    }
    function handleDoubleClick(view, pos, inside, event) {
        return runHandlerOnContext(view, "handleDoubleClickOn", pos, inside, event) ||
            view.someProp("handleDoubleClick", f => f(view, pos, event));
    }
    function handleTripleClick(view, pos, inside, event) {
        return runHandlerOnContext(view, "handleTripleClickOn", pos, inside, event) ||
            view.someProp("handleTripleClick", f => f(view, pos, event)) ||
            defaultTripleClick(view, inside, event);
    }
    function defaultTripleClick(view, inside, event) {
        if (event.button != 0)
            return false;
        let doc = view.state.doc;
        if (inside == -1) {
            if (doc.inlineContent) {
                updateSelection(view, TextSelection.create(doc, 0, doc.content.size), "pointer");
                return true;
            }
            return false;
        }
        let $pos = doc.resolve(inside);
        for (let i = $pos.depth + 1; i > 0; i--) {
            let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
            let nodePos = $pos.before(i);
            if (node.inlineContent)
                updateSelection(view, TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size), "pointer");
            else if (NodeSelection.isSelectable(node))
                updateSelection(view, NodeSelection.create(doc, nodePos), "pointer");
            else
                continue;
            return true;
        }
    }
    function forceDOMFlush(view) {
        return endComposition(view);
    }
    const selectNodeModifier = mac ? "metaKey" : "ctrlKey";
    handlers.mousedown = (view, _event) => {
        let event = _event;
        view.input.shiftKey = event.shiftKey;
        let flushed = forceDOMFlush(view);
        let now = Date.now(), type = "singleClick";
        if (now - view.input.lastClick.time < 500 && isNear(event, view.input.lastClick) && !event[selectNodeModifier]) {
            if (view.input.lastClick.type == "singleClick")
                type = "doubleClick";
            else if (view.input.lastClick.type == "doubleClick")
                type = "tripleClick";
        }
        view.input.lastClick = { time: now, x: event.clientX, y: event.clientY, type };
        let pos = view.posAtCoords(eventCoords(event));
        if (!pos)
            return;
        if (type == "singleClick") {
            if (view.input.mouseDown)
                view.input.mouseDown.done();
            view.input.mouseDown = new MouseDown(view, pos, event, !!flushed);
        }
        else if ((type == "doubleClick" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {
            event.preventDefault();
        }
        else {
            setSelectionOrigin(view, "pointer");
        }
    };
    class MouseDown {
        constructor(view, pos, event, flushed) {
            this.view = view;
            this.pos = pos;
            this.event = event;
            this.flushed = flushed;
            this.delayedSelectionSync = false;
            this.mightDrag = null;
            this.startDoc = view.state.doc;
            this.selectNode = !!event[selectNodeModifier];
            this.allowDefault = event.shiftKey;
            let targetNode, targetPos;
            if (pos.inside > -1) {
                targetNode = view.state.doc.nodeAt(pos.inside);
                targetPos = pos.inside;
            }
            else {
                let $pos = view.state.doc.resolve(pos.pos);
                targetNode = $pos.parent;
                targetPos = $pos.depth ? $pos.before() : 0;
            }
            const target = flushed ? null : event.target;
            const targetDesc = target ? view.docView.nearestDesc(target, true) : null;
            this.target = targetDesc ? targetDesc.dom : null;
            let { selection } = view.state;
            if (event.button == 0 &&
                targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false ||
                selection instanceof NodeSelection && selection.from <= targetPos && selection.to > targetPos)
                this.mightDrag = {
                    node: targetNode,
                    pos: targetPos,
                    addAttr: !!(this.target && !this.target.draggable),
                    setUneditable: !!(this.target && gecko && !this.target.hasAttribute("contentEditable"))
                };
            if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {
                this.view.domObserver.stop();
                if (this.mightDrag.addAttr)
                    this.target.draggable = true;
                if (this.mightDrag.setUneditable)
                    setTimeout(() => {
                        if (this.view.input.mouseDown == this)
                            this.target.setAttribute("contentEditable", "false");
                    }, 20);
                this.view.domObserver.start();
            }
            view.root.addEventListener("mouseup", this.up = this.up.bind(this));
            view.root.addEventListener("mousemove", this.move = this.move.bind(this));
            setSelectionOrigin(view, "pointer");
        }
        done() {
            this.view.root.removeEventListener("mouseup", this.up);
            this.view.root.removeEventListener("mousemove", this.move);
            if (this.mightDrag && this.target) {
                this.view.domObserver.stop();
                if (this.mightDrag.addAttr)
                    this.target.removeAttribute("draggable");
                if (this.mightDrag.setUneditable)
                    this.target.removeAttribute("contentEditable");
                this.view.domObserver.start();
            }
            if (this.delayedSelectionSync)
                setTimeout(() => selectionToDOM(this.view));
            this.view.input.mouseDown = null;
        }
        up(event) {
            this.done();
            if (!this.view.dom.contains(event.target))
                return;
            let pos = this.pos;
            if (this.view.state.doc != this.startDoc)
                pos = this.view.posAtCoords(eventCoords(event));
            this.updateAllowDefault(event);
            if (this.allowDefault || !pos) {
                setSelectionOrigin(this.view, "pointer");
            }
            else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {
                event.preventDefault();
            }
            else if (event.button == 0 &&
                (this.flushed ||
                    // Safari ignores clicks on draggable elements
                    (safari && this.mightDrag && !this.mightDrag.node.isAtom) ||
                    // Chrome will sometimes treat a node selection as a
                    // cursor, but still report that the node is selected
                    // when asked through getSelection. You'll then get a
                    // situation where clicking at the point where that
                    // (hidden) cursor is doesn't change the selection, and
                    // thus doesn't get a reaction from ProseMirror. This
                    // works around that.
                    (chrome && !this.view.state.selection.visible &&
                        Math.min(Math.abs(pos.pos - this.view.state.selection.from), Math.abs(pos.pos - this.view.state.selection.to)) <= 2))) {
                updateSelection(this.view, Selection.near(this.view.state.doc.resolve(pos.pos)), "pointer");
                event.preventDefault();
            }
            else {
                setSelectionOrigin(this.view, "pointer");
            }
        }
        move(event) {
            this.updateAllowDefault(event);
            setSelectionOrigin(this.view, "pointer");
            if (event.buttons == 0)
                this.done();
        }
        updateAllowDefault(event) {
            if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 ||
                Math.abs(this.event.y - event.clientY) > 4))
                this.allowDefault = true;
        }
    }
    handlers.touchstart = view => {
        view.input.lastTouch = Date.now();
        forceDOMFlush(view);
        setSelectionOrigin(view, "pointer");
    };
    handlers.touchmove = view => {
        view.input.lastTouch = Date.now();
        setSelectionOrigin(view, "pointer");
    };
    handlers.contextmenu = view => forceDOMFlush(view);
    function inOrNearComposition(view, event) {
        if (view.composing)
            return true;
        // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
        // On Japanese input method editors (IMEs), the Enter key is used to confirm character
        // selection. On Safari, when Enter is pressed, compositionend and keydown events are
        // emitted. The keydown event triggers newline insertion, which we don't want.
        // This method returns true if the keydown event should be ignored.
        // We only ignore it once, as pressing Enter a second time *should* insert a newline.
        // Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.
        // This guards against the case where compositionend is triggered without the keyboard
        // (e.g. character confirmation may be done with the mouse), and keydown is triggered
        // afterwards- we wouldn't want to ignore the keydown event in this case.
        if (safari && Math.abs(event.timeStamp - view.input.compositionEndedAt) < 500) {
            view.input.compositionEndedAt = -2e8;
            return true;
        }
        return false;
    }
    // Drop active composition after 5 seconds of inactivity on Android
    const timeoutComposition = android ? 5000 : -1;
    editHandlers.compositionstart = editHandlers.compositionupdate = view => {
        if (!view.composing) {
            view.domObserver.flush();
            let { state } = view, $pos = state.selection.$from;
            if (state.selection.empty &&
                (state.storedMarks ||
                    (!$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some(m => m.type.spec.inclusive === false)))) {
                // Need to wrap the cursor in mark nodes different from the ones in the DOM context
                view.markCursor = view.state.storedMarks || $pos.marks();
                endComposition(view, true);
                view.markCursor = null;
            }
            else {
                endComposition(view);
                // In firefox, if the cursor is after but outside a marked node,
                // the inserted text won't inherit the marks. So this moves it
                // inside if necessary.
                if (gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {
                    let sel = view.domSelectionRange();
                    for (let node = sel.focusNode, offset = sel.focusOffset; node && node.nodeType == 1 && offset != 0;) {
                        let before = offset < 0 ? node.lastChild : node.childNodes[offset - 1];
                        if (!before)
                            break;
                        if (before.nodeType == 3) {
                            view.domSelection().collapse(before, before.nodeValue.length);
                            break;
                        }
                        else {
                            node = before;
                            offset = -1;
                        }
                    }
                }
            }
            view.input.composing = true;
        }
        scheduleComposeEnd(view, timeoutComposition);
    };
    editHandlers.compositionend = (view, event) => {
        if (view.composing) {
            view.input.composing = false;
            view.input.compositionEndedAt = event.timeStamp;
            scheduleComposeEnd(view, 20);
        }
    };
    function scheduleComposeEnd(view, delay) {
        clearTimeout(view.input.composingTimeout);
        if (delay > -1)
            view.input.composingTimeout = setTimeout(() => endComposition(view), delay);
    }
    function clearComposition(view) {
        if (view.composing) {
            view.input.composing = false;
            view.input.compositionEndedAt = timestampFromCustomEvent();
        }
        while (view.input.compositionNodes.length > 0)
            view.input.compositionNodes.pop().markParentsDirty();
    }
    function timestampFromCustomEvent() {
        let event = document.createEvent("Event");
        event.initEvent("event", true, true);
        return event.timeStamp;
    }
    /**
    @internal
    */
    function endComposition(view, forceUpdate = false) {
        if (android && view.domObserver.flushingSoon >= 0)
            return;
        view.domObserver.forceFlush();
        clearComposition(view);
        if (forceUpdate || view.docView && view.docView.dirty) {
            let sel = selectionFromDOM(view);
            if (sel && !sel.eq(view.state.selection))
                view.dispatch(view.state.tr.setSelection(sel));
            else
                view.updateState(view.state);
            return true;
        }
        return false;
    }
    function captureCopy(view, dom) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        if (!view.dom.parentNode)
            return;
        let wrap = view.dom.parentNode.appendChild(document.createElement("div"));
        wrap.appendChild(dom);
        wrap.style.cssText = "position: fixed; left: -10000px; top: 10px";
        let sel = getSelection(), range = document.createRange();
        range.selectNodeContents(dom);
        // Done because IE will fire a selectionchange moving the selection
        // to its start when removeAllRanges is called and the editor still
        // has focus (which will mess up the editor's selection state).
        view.dom.blur();
        sel.removeAllRanges();
        sel.addRange(range);
        setTimeout(() => {
            if (wrap.parentNode)
                wrap.parentNode.removeChild(wrap);
            view.focus();
        }, 50);
    }
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    const brokenClipboardAPI = (ie && ie_version < 15) ||
        (ios && webkit_version < 604);
    handlers.copy = editHandlers.cut = (view, _event) => {
        let event = _event;
        let sel = view.state.selection, cut = event.type == "cut";
        if (sel.empty)
            return;
        // IE and Edge's clipboard interface is completely broken
        let data = brokenClipboardAPI ? null : event.clipboardData;
        let slice = sel.content(), { dom, text } = serializeForClipboard(view, slice);
        if (data) {
            event.preventDefault();
            data.clearData();
            data.setData("text/html", dom.innerHTML);
            data.setData("text/plain", text);
        }
        else {
            captureCopy(view, dom);
        }
        if (cut)
            view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
    };
    function sliceSingleNode(slice) {
        return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null;
    }
    function capturePaste(view, event) {
        if (!view.dom.parentNode)
            return;
        let plainText = view.input.shiftKey || view.state.selection.$from.parent.type.spec.code;
        let target = view.dom.parentNode.appendChild(document.createElement(plainText ? "textarea" : "div"));
        if (!plainText)
            target.contentEditable = "true";
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(() => {
            view.focus();
            if (target.parentNode)
                target.parentNode.removeChild(target);
            if (plainText)
                doPaste(view, target.value, null, view.input.shiftKey, event);
            else
                doPaste(view, target.textContent, target.innerHTML, view.input.shiftKey, event);
        }, 50);
    }
    function doPaste(view, text, html, preferPlain, event) {
        let slice = parseFromClipboard(view, text, html, preferPlain, view.state.selection.$from);
        if (view.someProp("handlePaste", f => f(view, event, slice || Slice.empty)))
            return true;
        if (!slice)
            return false;
        let singleNode = sliceSingleNode(slice);
        let tr = singleNode
            ? view.state.tr.replaceSelectionWith(singleNode, view.input.shiftKey)
            : view.state.tr.replaceSelection(slice);
        view.dispatch(tr.scrollIntoView().setMeta("paste", true).setMeta("uiEvent", "paste"));
        return true;
    }
    editHandlers.paste = (view, _event) => {
        let event = _event;
        // Handling paste from JavaScript during composition is very poorly
        // handled by browsers, so as a dodgy but preferable kludge, we just
        // let the browser do its native thing there, except on Android,
        // where the editor is almost always composing.
        if (view.composing && !android)
            return;
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data && doPaste(view, data.getData("text/plain"), data.getData("text/html"), view.input.shiftKey, event))
            event.preventDefault();
        else
            capturePaste(view, event);
    };
    class Dragging {
        constructor(slice, move) {
            this.slice = slice;
            this.move = move;
        }
    }
    const dragCopyModifier = mac ? "altKey" : "ctrlKey";
    handlers.dragstart = (view, _event) => {
        let event = _event;
        let mouseDown = view.input.mouseDown;
        if (mouseDown)
            mouseDown.done();
        if (!event.dataTransfer)
            return;
        let sel = view.state.selection;
        let pos = sel.empty ? null : view.posAtCoords(eventCoords(event));
        if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof NodeSelection ? sel.to - 1 : sel.to)) ;
        else if (mouseDown && mouseDown.mightDrag) {
            view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos)));
        }
        else if (event.target && event.target.nodeType == 1) {
            let desc = view.docView.nearestDesc(event.target, true);
            if (desc && desc.node.type.spec.draggable && desc != view.docView)
                view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, desc.posBefore)));
        }
        let slice = view.state.selection.content(), { dom, text } = serializeForClipboard(view, slice);
        event.dataTransfer.clearData();
        event.dataTransfer.setData(brokenClipboardAPI ? "Text" : "text/html", dom.innerHTML);
        // See https://github.com/ProseMirror/prosemirror/issues/1156
        event.dataTransfer.effectAllowed = "copyMove";
        if (!brokenClipboardAPI)
            event.dataTransfer.setData("text/plain", text);
        view.dragging = new Dragging(slice, !event[dragCopyModifier]);
    };
    handlers.dragend = view => {
        let dragging = view.dragging;
        window.setTimeout(() => {
            if (view.dragging == dragging)
                view.dragging = null;
        }, 50);
    };
    editHandlers.dragover = editHandlers.dragenter = (_, e) => e.preventDefault();
    editHandlers.drop = (view, _event) => {
        let event = _event;
        let dragging = view.dragging;
        view.dragging = null;
        if (!event.dataTransfer)
            return;
        let eventPos = view.posAtCoords(eventCoords(event));
        if (!eventPos)
            return;
        let $mouse = view.state.doc.resolve(eventPos.pos);
        let slice = dragging && dragging.slice;
        if (slice) {
            view.someProp("transformPasted", f => { slice = f(slice, view); });
        }
        else {
            slice = parseFromClipboard(view, event.dataTransfer.getData(brokenClipboardAPI ? "Text" : "text/plain"), brokenClipboardAPI ? null : event.dataTransfer.getData("text/html"), false, $mouse);
        }
        let move = !!(dragging && !event[dragCopyModifier]);
        if (view.someProp("handleDrop", f => f(view, event, slice || Slice.empty, move))) {
            event.preventDefault();
            return;
        }
        if (!slice)
            return;
        event.preventDefault();
        let insertPos = slice ? dropPoint(view.state.doc, $mouse.pos, slice) : $mouse.pos;
        if (insertPos == null)
            insertPos = $mouse.pos;
        let tr = view.state.tr;
        if (move)
            tr.deleteSelection();
        let pos = tr.mapping.map(insertPos);
        let isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1;
        let beforeInsert = tr.doc;
        if (isNode)
            tr.replaceRangeWith(pos, pos, slice.content.firstChild);
        else
            tr.replaceRange(pos, pos, slice);
        if (tr.doc.eq(beforeInsert))
            return;
        let $pos = tr.doc.resolve(pos);
        if (isNode && NodeSelection.isSelectable(slice.content.firstChild) &&
            $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild)) {
            tr.setSelection(new NodeSelection($pos));
        }
        else {
            let end = tr.mapping.map(insertPos);
            tr.mapping.maps[tr.mapping.maps.length - 1].forEach((_from, _to, _newFrom, newTo) => end = newTo);
            tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(end)));
        }
        view.focus();
        view.dispatch(tr.setMeta("uiEvent", "drop"));
    };
    handlers.focus = view => {
        view.input.lastFocus = Date.now();
        if (!view.focused) {
            view.domObserver.stop();
            view.dom.classList.add("ProseMirror-focused");
            view.domObserver.start();
            view.focused = true;
            setTimeout(() => {
                if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.domSelectionRange()))
                    selectionToDOM(view);
            }, 20);
        }
    };
    handlers.blur = (view, _event) => {
        let event = _event;
        if (view.focused) {
            view.domObserver.stop();
            view.dom.classList.remove("ProseMirror-focused");
            view.domObserver.start();
            if (event.relatedTarget && view.dom.contains(event.relatedTarget))
                view.domObserver.currentSelection.clear();
            view.focused = false;
        }
    };
    handlers.beforeinput = (view, _event) => {
        let event = _event;
        // We should probably do more with beforeinput events, but support
        // is so spotty that I'm still waiting to see where they are going.
        // Very specific hack to deal with backspace sometimes failing on
        // Chrome Android when after an uneditable node.
        if (chrome && android && event.inputType == "deleteContentBackward") {
            view.domObserver.flushSoon();
            let { domChangeCount } = view.input;
            setTimeout(() => {
                if (view.input.domChangeCount != domChangeCount)
                    return; // Event already had some effect
                // This bug tends to close the virtual keyboard, so we refocus
                view.dom.blur();
                view.focus();
                if (view.someProp("handleKeyDown", f => f(view, keyEvent(8, "Backspace"))))
                    return;
                let { $cursor } = view.state.selection;
                // Crude approximation of backspace behavior when no command handled it
                if ($cursor && $cursor.pos > 0)
                    view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView());
            }, 50);
        }
    };
    // Make sure all handlers get registered
    for (let prop in editHandlers)
        handlers[prop] = editHandlers[prop];

    function compareObjs(a, b) {
        if (a == b)
            return true;
        for (let p in a)
            if (a[p] !== b[p])
                return false;
        for (let p in b)
            if (!(p in a))
                return false;
        return true;
    }
    class WidgetType {
        constructor(toDOM, spec) {
            this.toDOM = toDOM;
            this.spec = spec || noSpec;
            this.side = this.spec.side || 0;
        }
        map(mapping, span, offset, oldOffset) {
            let { pos, deleted } = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1);
            return deleted ? null : new Decoration(pos - offset, pos - offset, this);
        }
        valid() { return true; }
        eq(other) {
            return this == other ||
                (other instanceof WidgetType &&
                    (this.spec.key && this.spec.key == other.spec.key ||
                        this.toDOM == other.toDOM && compareObjs(this.spec, other.spec)));
        }
        destroy(node) {
            if (this.spec.destroy)
                this.spec.destroy(node);
        }
    }
    class InlineType {
        constructor(attrs, spec) {
            this.attrs = attrs;
            this.spec = spec || noSpec;
        }
        map(mapping, span, offset, oldOffset) {
            let from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset;
            let to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset;
            return from >= to ? null : new Decoration(from, to, this);
        }
        valid(_, span) { return span.from < span.to; }
        eq(other) {
            return this == other ||
                (other instanceof InlineType && compareObjs(this.attrs, other.attrs) &&
                    compareObjs(this.spec, other.spec));
        }
        static is(span) { return span.type instanceof InlineType; }
        destroy() { }
    }
    class NodeType$1 {
        constructor(attrs, spec) {
            this.attrs = attrs;
            this.spec = spec || noSpec;
        }
        map(mapping, span, offset, oldOffset) {
            let from = mapping.mapResult(span.from + oldOffset, 1);
            if (from.deleted)
                return null;
            let to = mapping.mapResult(span.to + oldOffset, -1);
            if (to.deleted || to.pos <= from.pos)
                return null;
            return new Decoration(from.pos - offset, to.pos - offset, this);
        }
        valid(node, span) {
            let { index, offset } = node.content.findIndex(span.from), child;
            return offset == span.from && !(child = node.child(index)).isText && offset + child.nodeSize == span.to;
        }
        eq(other) {
            return this == other ||
                (other instanceof NodeType$1 && compareObjs(this.attrs, other.attrs) &&
                    compareObjs(this.spec, other.spec));
        }
        destroy() { }
    }
    /**
    Decoration objects can be provided to the view through the
    [`decorations` prop](https://prosemirror.net/docs/ref/#view.EditorProps.decorations). They come in
    several variants—see the static members of this class for details.
    */
    class Decoration {
        /**
        @internal
        */
        constructor(
        /**
        The start position of the decoration.
        */
        from,
        /**
        The end position. Will be the same as `from` for [widget
        decorations](https://prosemirror.net/docs/ref/#view.Decoration^widget).
        */
        to,
        /**
        @internal
        */
        type) {
            this.from = from;
            this.to = to;
            this.type = type;
        }
        /**
        @internal
        */
        copy(from, to) {
            return new Decoration(from, to, this.type);
        }
        /**
        @internal
        */
        eq(other, offset = 0) {
            return this.type.eq(other.type) && this.from + offset == other.from && this.to + offset == other.to;
        }
        /**
        @internal
        */
        map(mapping, offset, oldOffset) {
            return this.type.map(mapping, this, offset, oldOffset);
        }
        /**
        Creates a widget decoration, which is a DOM node that's shown in
        the document at the given position. It is recommended that you
        delay rendering the widget by passing a function that will be
        called when the widget is actually drawn in a view, but you can
        also directly pass a DOM node. `getPos` can be used to find the
        widget's current document position.
        */
        static widget(pos, toDOM, spec) {
            return new Decoration(pos, pos, new WidgetType(toDOM, spec));
        }
        /**
        Creates an inline decoration, which adds the given attributes to
        each inline node between `from` and `to`.
        */
        static inline(from, to, attrs, spec) {
            return new Decoration(from, to, new InlineType(attrs, spec));
        }
        /**
        Creates a node decoration. `from` and `to` should point precisely
        before and after a node in the document. That node, and only that
        node, will receive the given attributes.
        */
        static node(from, to, attrs, spec) {
            return new Decoration(from, to, new NodeType$1(attrs, spec));
        }
        /**
        The spec provided when creating this decoration. Can be useful
        if you've stored extra information in that object.
        */
        get spec() { return this.type.spec; }
        /**
        @internal
        */
        get inline() { return this.type instanceof InlineType; }
    }
    const none = [];
    const noSpec = {};
    /**
    A collection of [decorations](https://prosemirror.net/docs/ref/#view.Decoration), organized in such
    a way that the drawing algorithm can efficiently use and compare
    them. This is a persistent data structure—it is not modified,
    updates create a new value.
    */
    class DecorationSet {
        /**
        @internal
        */
        constructor(local, children) {
            this.local = local.length ? local : none;
            this.children = children.length ? children : none;
        }
        /**
        Create a set of decorations, using the structure of the given
        document.
        */
        static create(doc, decorations) {
            return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty;
        }
        /**
        Find all decorations in this set which touch the given range
        (including decorations that start or end directly at the
        boundaries) and match the given predicate on their spec. When
        `start` and `end` are omitted, all decorations in the set are
        considered. When `predicate` isn't given, all decorations are
        assumed to match.
        */
        find(start, end, predicate) {
            let result = [];
            this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate);
            return result;
        }
        findInner(start, end, result, offset, predicate) {
            for (let i = 0; i < this.local.length; i++) {
                let span = this.local[i];
                if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec)))
                    result.push(span.copy(span.from + offset, span.to + offset));
            }
            for (let i = 0; i < this.children.length; i += 3) {
                if (this.children[i] < end && this.children[i + 1] > start) {
                    let childOff = this.children[i] + 1;
                    this.children[i + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate);
                }
            }
        }
        /**
        Map the set of decorations in response to a change in the
        document.
        */
        map(mapping, doc, options) {
            if (this == empty || mapping.maps.length == 0)
                return this;
            return this.mapInner(mapping, doc, 0, 0, options || noSpec);
        }
        /**
        @internal
        */
        mapInner(mapping, node, offset, oldOffset, options) {
            let newLocal;
            for (let i = 0; i < this.local.length; i++) {
                let mapped = this.local[i].map(mapping, offset, oldOffset);
                if (mapped && mapped.type.valid(node, mapped))
                    (newLocal || (newLocal = [])).push(mapped);
                else if (options.onRemove)
                    options.onRemove(this.local[i].spec);
            }
            if (this.children.length)
                return mapChildren(this.children, newLocal || [], mapping, node, offset, oldOffset, options);
            else
                return newLocal ? new DecorationSet(newLocal.sort(byPos), none) : empty;
        }
        /**
        Add the given array of decorations to the ones in the set,
        producing a new set. Needs access to the current document to
        create the appropriate tree structure.
        */
        add(doc, decorations) {
            if (!decorations.length)
                return this;
            if (this == empty)
                return DecorationSet.create(doc, decorations);
            return this.addInner(doc, decorations, 0);
        }
        addInner(doc, decorations, offset) {
            let children, childIndex = 0;
            doc.forEach((childNode, childOffset) => {
                let baseOffset = childOffset + offset, found;
                if (!(found = takeSpansForNode(decorations, childNode, baseOffset)))
                    return;
                if (!children)
                    children = this.children.slice();
                while (childIndex < children.length && children[childIndex] < childOffset)
                    childIndex += 3;
                if (children[childIndex] == childOffset)
                    children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1);
                else
                    children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec));
                childIndex += 3;
            });
            let local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset);
            for (let i = 0; i < local.length; i++)
                if (!local[i].type.valid(doc, local[i]))
                    local.splice(i--, 1);
            return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local, children || this.children);
        }
        /**
        Create a new set that contains the decorations in this set, minus
        the ones in the given array.
        */
        remove(decorations) {
            if (decorations.length == 0 || this == empty)
                return this;
            return this.removeInner(decorations, 0);
        }
        removeInner(decorations, offset) {
            let children = this.children, local = this.local;
            for (let i = 0; i < children.length; i += 3) {
                let found;
                let from = children[i] + offset, to = children[i + 1] + offset;
                for (let j = 0, span; j < decorations.length; j++)
                    if (span = decorations[j]) {
                        if (span.from > from && span.to < to) {
                            decorations[j] = null;
                            (found || (found = [])).push(span);
                        }
                    }
                if (!found)
                    continue;
                if (children == this.children)
                    children = this.children.slice();
                let removed = children[i + 2].removeInner(found, from + 1);
                if (removed != empty) {
                    children[i + 2] = removed;
                }
                else {
                    children.splice(i, 3);
                    i -= 3;
                }
            }
            if (local.length)
                for (let i = 0, span; i < decorations.length; i++)
                    if (span = decorations[i]) {
                        for (let j = 0; j < local.length; j++)
                            if (local[j].eq(span, offset)) {
                                if (local == this.local)
                                    local = this.local.slice();
                                local.splice(j--, 1);
                            }
                    }
            if (children == this.children && local == this.local)
                return this;
            return local.length || children.length ? new DecorationSet(local, children) : empty;
        }
        /**
        @internal
        */
        forChild(offset, node) {
            if (this == empty)
                return this;
            if (node.isLeaf)
                return DecorationSet.empty;
            let child, local;
            for (let i = 0; i < this.children.length; i += 3)
                if (this.children[i] >= offset) {
                    if (this.children[i] == offset)
                        child = this.children[i + 2];
                    break;
                }
            let start = offset + 1, end = start + node.content.size;
            for (let i = 0; i < this.local.length; i++) {
                let dec = this.local[i];
                if (dec.from < end && dec.to > start && (dec.type instanceof InlineType)) {
                    let from = Math.max(start, dec.from) - start, to = Math.min(end, dec.to) - start;
                    if (from < to)
                        (local || (local = [])).push(dec.copy(from, to));
                }
            }
            if (local) {
                let localSet = new DecorationSet(local.sort(byPos), none);
                return child ? new DecorationGroup([localSet, child]) : localSet;
            }
            return child || empty;
        }
        /**
        @internal
        */
        eq(other) {
            if (this == other)
                return true;
            if (!(other instanceof DecorationSet) ||
                this.local.length != other.local.length ||
                this.children.length != other.children.length)
                return false;
            for (let i = 0; i < this.local.length; i++)
                if (!this.local[i].eq(other.local[i]))
                    return false;
            for (let i = 0; i < this.children.length; i += 3)
                if (this.children[i] != other.children[i] ||
                    this.children[i + 1] != other.children[i + 1] ||
                    !this.children[i + 2].eq(other.children[i + 2]))
                    return false;
            return true;
        }
        /**
        @internal
        */
        locals(node) {
            return removeOverlap(this.localsInner(node));
        }
        /**
        @internal
        */
        localsInner(node) {
            if (this == empty)
                return none;
            if (node.inlineContent || !this.local.some(InlineType.is))
                return this.local;
            let result = [];
            for (let i = 0; i < this.local.length; i++) {
                if (!(this.local[i].type instanceof InlineType))
                    result.push(this.local[i]);
            }
            return result;
        }
    }
    /**
    The empty set of decorations.
    */
    DecorationSet.empty = new DecorationSet([], []);
    /**
    @internal
    */
    DecorationSet.removeOverlap = removeOverlap;
    const empty = DecorationSet.empty;
    // An abstraction that allows the code dealing with decorations to
    // treat multiple DecorationSet objects as if it were a single object
    // with (a subset of) the same interface.
    class DecorationGroup {
        constructor(members) {
            this.members = members;
        }
        map(mapping, doc) {
            const mappedDecos = this.members.map(member => member.map(mapping, doc, noSpec));
            return DecorationGroup.from(mappedDecos);
        }
        forChild(offset, child) {
            if (child.isLeaf)
                return DecorationSet.empty;
            let found = [];
            for (let i = 0; i < this.members.length; i++) {
                let result = this.members[i].forChild(offset, child);
                if (result == empty)
                    continue;
                if (result instanceof DecorationGroup)
                    found = found.concat(result.members);
                else
                    found.push(result);
            }
            return DecorationGroup.from(found);
        }
        eq(other) {
            if (!(other instanceof DecorationGroup) ||
                other.members.length != this.members.length)
                return false;
            for (let i = 0; i < this.members.length; i++)
                if (!this.members[i].eq(other.members[i]))
                    return false;
            return true;
        }
        locals(node) {
            let result, sorted = true;
            for (let i = 0; i < this.members.length; i++) {
                let locals = this.members[i].localsInner(node);
                if (!locals.length)
                    continue;
                if (!result) {
                    result = locals;
                }
                else {
                    if (sorted) {
                        result = result.slice();
                        sorted = false;
                    }
                    for (let j = 0; j < locals.length; j++)
                        result.push(locals[j]);
                }
            }
            return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none;
        }
        // Create a group for the given array of decoration sets, or return
        // a single set when possible.
        static from(members) {
            switch (members.length) {
                case 0: return empty;
                case 1: return members[0];
                default: return new DecorationGroup(members.every(m => m instanceof DecorationSet) ? members :
                    members.reduce((r, m) => r.concat(m instanceof DecorationSet ? m : m.members), []));
            }
        }
    }
    function mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {
        let children = oldChildren.slice();
        // Mark the children that are directly touched by changes, and
        // move those that are after the changes.
        for (let i = 0, baseOffset = oldOffset; i < mapping.maps.length; i++) {
            let moved = 0;
            mapping.maps[i].forEach((oldStart, oldEnd, newStart, newEnd) => {
                let dSize = (newEnd - newStart) - (oldEnd - oldStart);
                for (let i = 0; i < children.length; i += 3) {
                    let end = children[i + 1];
                    if (end < 0 || oldStart > end + baseOffset - moved)
                        continue;
                    let start = children[i] + baseOffset - moved;
                    if (oldEnd >= start) {
                        children[i + 1] = oldStart <= start ? -2 : -1;
                    }
                    else if (newStart >= offset && dSize) {
                        children[i] += dSize;
                        children[i + 1] += dSize;
                    }
                }
                moved += dSize;
            });
            baseOffset = mapping.maps[i].map(baseOffset, -1);
        }
        // Find the child nodes that still correspond to a single node,
        // recursively call mapInner on them and update their positions.
        let mustRebuild = false;
        for (let i = 0; i < children.length; i += 3)
            if (children[i + 1] < 0) { // Touched nodes
                if (children[i + 1] == -2) {
                    mustRebuild = true;
                    children[i + 1] = -1;
                    continue;
                }
                let from = mapping.map(oldChildren[i] + oldOffset), fromLocal = from - offset;
                if (fromLocal < 0 || fromLocal >= node.content.size) {
                    mustRebuild = true;
                    continue;
                }
                // Must read oldChildren because children was tagged with -1
                let to = mapping.map(oldChildren[i + 1] + oldOffset, -1), toLocal = to - offset;
                let { index, offset: childOffset } = node.content.findIndex(fromLocal);
                let childNode = node.maybeChild(index);
                if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {
                    let mapped = children[i + 2]
                        .mapInner(mapping, childNode, from + 1, oldChildren[i] + oldOffset + 1, options);
                    if (mapped != empty) {
                        children[i] = fromLocal;
                        children[i + 1] = toLocal;
                        children[i + 2] = mapped;
                    }
                    else {
                        children[i + 1] = -2;
                        mustRebuild = true;
                    }
                }
                else {
                    mustRebuild = true;
                }
            }
        // Remaining children must be collected and rebuilt into the appropriate structure
        if (mustRebuild) {
            let decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal, mapping, offset, oldOffset, options);
            let built = buildTree(decorations, node, 0, options);
            newLocal = built.local;
            for (let i = 0; i < children.length; i += 3)
                if (children[i + 1] < 0) {
                    children.splice(i, 3);
                    i -= 3;
                }
            for (let i = 0, j = 0; i < built.children.length; i += 3) {
                let from = built.children[i];
                while (j < children.length && children[j] < from)
                    j += 3;
                children.splice(j, 0, built.children[i], built.children[i + 1], built.children[i + 2]);
            }
        }
        return new DecorationSet(newLocal.sort(byPos), children);
    }
    function moveSpans(spans, offset) {
        if (!offset || !spans.length)
            return spans;
        let result = [];
        for (let i = 0; i < spans.length; i++) {
            let span = spans[i];
            result.push(new Decoration(span.from + offset, span.to + offset, span.type));
        }
        return result;
    }
    function mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {
        // Gather all decorations from the remaining marked children
        function gather(set, oldOffset) {
            for (let i = 0; i < set.local.length; i++) {
                let mapped = set.local[i].map(mapping, offset, oldOffset);
                if (mapped)
                    decorations.push(mapped);
                else if (options.onRemove)
                    options.onRemove(set.local[i].spec);
            }
            for (let i = 0; i < set.children.length; i += 3)
                gather(set.children[i + 2], set.children[i] + oldOffset + 1);
        }
        for (let i = 0; i < children.length; i += 3)
            if (children[i + 1] == -1)
                gather(children[i + 2], oldChildren[i] + oldOffset + 1);
        return decorations;
    }
    function takeSpansForNode(spans, node, offset) {
        if (node.isLeaf)
            return null;
        let end = offset + node.nodeSize, found = null;
        for (let i = 0, span; i < spans.length; i++) {
            if ((span = spans[i]) && span.from > offset && span.to < end) {
                (found || (found = [])).push(span);
                spans[i] = null;
            }
        }
        return found;
    }
    function withoutNulls(array) {
        let result = [];
        for (let i = 0; i < array.length; i++)
            if (array[i] != null)
                result.push(array[i]);
        return result;
    }
    // Build up a tree that corresponds to a set of decorations. `offset`
    // is a base offset that should be subtracted from the `from` and `to`
    // positions in the spans (so that we don't have to allocate new spans
    // for recursive calls).
    function buildTree(spans, node, offset, options) {
        let children = [], hasNulls = false;
        node.forEach((childNode, localStart) => {
            let found = takeSpansForNode(spans, childNode, localStart + offset);
            if (found) {
                hasNulls = true;
                let subtree = buildTree(found, childNode, offset + localStart + 1, options);
                if (subtree != empty)
                    children.push(localStart, localStart + childNode.nodeSize, subtree);
            }
        });
        let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos);
        for (let i = 0; i < locals.length; i++)
            if (!locals[i].type.valid(node, locals[i])) {
                if (options.onRemove)
                    options.onRemove(locals[i].spec);
                locals.splice(i--, 1);
            }
        return locals.length || children.length ? new DecorationSet(locals, children) : empty;
    }
    // Used to sort decorations so that ones with a low start position
    // come first, and within a set with the same start position, those
    // with an smaller end position come first.
    function byPos(a, b) {
        return a.from - b.from || a.to - b.to;
    }
    // Scan a sorted array of decorations for partially overlapping spans,
    // and split those so that only fully overlapping spans are left (to
    // make subsequent rendering easier). Will return the input array if
    // no partially overlapping spans are found (the common case).
    function removeOverlap(spans) {
        let working = spans;
        for (let i = 0; i < working.length - 1; i++) {
            let span = working[i];
            if (span.from != span.to)
                for (let j = i + 1; j < working.length; j++) {
                    let next = working[j];
                    if (next.from == span.from) {
                        if (next.to != span.to) {
                            if (working == spans)
                                working = spans.slice();
                            // Followed by a partially overlapping larger span. Split that
                            // span.
                            working[j] = next.copy(next.from, span.to);
                            insertAhead(working, j + 1, next.copy(span.to, next.to));
                        }
                        continue;
                    }
                    else {
                        if (next.from < span.to) {
                            if (working == spans)
                                working = spans.slice();
                            // The end of this one overlaps with a subsequent span. Split
                            // this one.
                            working[i] = span.copy(span.from, next.from);
                            insertAhead(working, j, span.copy(next.from, span.to));
                        }
                        break;
                    }
                }
        }
        return working;
    }
    function insertAhead(array, i, deco) {
        while (i < array.length && byPos(deco, array[i]) > 0)
            i++;
        array.splice(i, 0, deco);
    }
    // Get the decorations associated with the current props of a view.
    function viewDecorations(view) {
        let found = [];
        view.someProp("decorations", f => {
            let result = f(view.state);
            if (result && result != empty)
                found.push(result);
        });
        if (view.cursorWrapper)
            found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]));
        return DecorationGroup.from(found);
    }

    const observeOptions = {
        childList: true,
        characterData: true,
        characterDataOldValue: true,
        attributes: true,
        attributeOldValue: true,
        subtree: true
    };
    // IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified
    const useCharData = ie && ie_version <= 11;
    class SelectionState {
        constructor() {
            this.anchorNode = null;
            this.anchorOffset = 0;
            this.focusNode = null;
            this.focusOffset = 0;
        }
        set(sel) {
            this.anchorNode = sel.anchorNode;
            this.anchorOffset = sel.anchorOffset;
            this.focusNode = sel.focusNode;
            this.focusOffset = sel.focusOffset;
        }
        clear() {
            this.anchorNode = this.focusNode = null;
        }
        eq(sel) {
            return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset &&
                sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset;
        }
    }
    class DOMObserver {
        constructor(view, handleDOMChange) {
            this.view = view;
            this.handleDOMChange = handleDOMChange;
            this.queue = [];
            this.flushingSoon = -1;
            this.observer = null;
            this.currentSelection = new SelectionState;
            this.onCharData = null;
            this.suppressingSelectionUpdates = false;
            this.observer = window.MutationObserver &&
                new window.MutationObserver(mutations => {
                    for (let i = 0; i < mutations.length; i++)
                        this.queue.push(mutations[i]);
                    // IE11 will sometimes (on backspacing out a single character
                    // text node after a BR node) call the observer callback
                    // before actually updating the DOM, which will cause
                    // ProseMirror to miss the change (see #930)
                    if (ie && ie_version <= 11 && mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                        m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                        this.flushSoon();
                    else
                        this.flush();
                });
            if (useCharData) {
                this.onCharData = e => {
                    this.queue.push({ target: e.target, type: "characterData", oldValue: e.prevValue });
                    this.flushSoon();
                };
            }
            this.onSelectionChange = this.onSelectionChange.bind(this);
        }
        flushSoon() {
            if (this.flushingSoon < 0)
                this.flushingSoon = window.setTimeout(() => { this.flushingSoon = -1; this.flush(); }, 20);
        }
        forceFlush() {
            if (this.flushingSoon > -1) {
                window.clearTimeout(this.flushingSoon);
                this.flushingSoon = -1;
                this.flush();
            }
        }
        start() {
            if (this.observer) {
                this.observer.takeRecords();
                this.observer.observe(this.view.dom, observeOptions);
            }
            if (this.onCharData)
                this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.connectSelection();
        }
        stop() {
            if (this.observer) {
                let take = this.observer.takeRecords();
                if (take.length) {
                    for (let i = 0; i < take.length; i++)
                        this.queue.push(take[i]);
                    window.setTimeout(() => this.flush(), 20);
                }
                this.observer.disconnect();
            }
            if (this.onCharData)
                this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
            this.disconnectSelection();
        }
        connectSelection() {
            this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
        }
        disconnectSelection() {
            this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
        }
        suppressSelectionUpdates() {
            this.suppressingSelectionUpdates = true;
            setTimeout(() => this.suppressingSelectionUpdates = false, 50);
        }
        onSelectionChange() {
            if (!hasFocusAndSelection(this.view))
                return;
            if (this.suppressingSelectionUpdates)
                return selectionToDOM(this.view);
            // Deletions on IE11 fire their events in the wrong order, giving
            // us a selection change event before the DOM changes are
            // reported.
            if (ie && ie_version <= 11 && !this.view.state.selection.empty) {
                let sel = this.view.domSelectionRange();
                // Selection.isCollapsed isn't reliable on IE
                if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                    return this.flushSoon();
            }
            this.flush();
        }
        setCurSelection() {
            this.currentSelection.set(this.view.domSelectionRange());
        }
        ignoreSelectionChange(sel) {
            if (!sel.focusNode)
                return true;
            let ancestors = new Set, container;
            for (let scan = sel.focusNode; scan; scan = parentNode(scan))
                ancestors.add(scan);
            for (let scan = sel.anchorNode; scan; scan = parentNode(scan))
                if (ancestors.has(scan)) {
                    container = scan;
                    break;
                }
            let desc = container && this.view.docView.nearestDesc(container);
            if (desc && desc.ignoreMutation({
                type: "selection",
                target: container.nodeType == 3 ? container.parentNode : container
            })) {
                this.setCurSelection();
                return true;
            }
        }
        flush() {
            let { view } = this;
            if (!view.docView || this.flushingSoon > -1)
                return;
            let mutations = this.observer ? this.observer.takeRecords() : [];
            if (this.queue.length) {
                mutations = this.queue.concat(mutations);
                this.queue.length = 0;
            }
            let sel = view.domSelectionRange();
            let newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasFocusAndSelection(view) && !this.ignoreSelectionChange(sel);
            let from = -1, to = -1, typeOver = false, added = [];
            if (view.editable) {
                for (let i = 0; i < mutations.length; i++) {
                    let result = this.registerMutation(mutations[i], added);
                    if (result) {
                        from = from < 0 ? result.from : Math.min(result.from, from);
                        to = to < 0 ? result.to : Math.max(result.to, to);
                        if (result.typeOver)
                            typeOver = true;
                    }
                }
            }
            if (gecko && added.length > 1) {
                let brs = added.filter(n => n.nodeName == "BR");
                if (brs.length == 2) {
                    let a = brs[0], b = brs[1];
                    if (a.parentNode && a.parentNode.parentNode == b.parentNode)
                        b.remove();
                    else
                        a.remove();
                }
            }
            let readSel = null;
            // If it looks like the browser has reset the selection to the
            // start of the document after focus, restore the selection from
            // the state
            if (from < 0 && newSel && view.input.lastFocus > Date.now() - 200 &&
                Math.max(view.input.lastTouch, view.input.lastClick.time) < Date.now() - 300 &&
                selectionCollapsed(sel) && (readSel = selectionFromDOM(view)) &&
                readSel.eq(Selection.near(view.state.doc.resolve(0), 1))) {
                view.input.lastFocus = 0;
                selectionToDOM(view);
                this.currentSelection.set(sel);
                view.scrollToSelection();
            }
            else if (from > -1 || newSel) {
                if (from > -1) {
                    view.docView.markDirty(from, to);
                    checkCSS(view);
                }
                this.handleDOMChange(from, to, typeOver, added);
                if (view.docView && view.docView.dirty)
                    view.updateState(view.state);
                else if (!this.currentSelection.eq(sel))
                    selectionToDOM(view);
                this.currentSelection.set(sel);
            }
        }
        registerMutation(mut, added) {
            // Ignore mutations inside nodes that were already noted as inserted
            if (added.indexOf(mut.target) > -1)
                return null;
            let desc = this.view.docView.nearestDesc(mut.target);
            if (mut.type == "attributes" &&
                (desc == this.view.docView || mut.attributeName == "contenteditable" ||
                    // Firefox sometimes fires spurious events for null/empty styles
                    (mut.attributeName == "style" && !mut.oldValue && !mut.target.getAttribute("style"))))
                return null;
            if (!desc || desc.ignoreMutation(mut))
                return null;
            if (mut.type == "childList") {
                for (let i = 0; i < mut.addedNodes.length; i++)
                    added.push(mut.addedNodes[i]);
                if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))
                    return { from: desc.posBefore, to: desc.posAfter };
                let prev = mut.previousSibling, next = mut.nextSibling;
                if (ie && ie_version <= 11 && mut.addedNodes.length) {
                    // IE11 gives us incorrect next/prev siblings for some
                    // insertions, so if there are added nodes, recompute those
                    for (let i = 0; i < mut.addedNodes.length; i++) {
                        let { previousSibling, nextSibling } = mut.addedNodes[i];
                        if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0)
                            prev = previousSibling;
                        if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0)
                            next = nextSibling;
                    }
                }
                let fromOffset = prev && prev.parentNode == mut.target
                    ? domIndex(prev) + 1 : 0;
                let from = desc.localPosFromDOM(mut.target, fromOffset, -1);
                let toOffset = next && next.parentNode == mut.target
                    ? domIndex(next) : mut.target.childNodes.length;
                let to = desc.localPosFromDOM(mut.target, toOffset, 1);
                return { from, to };
            }
            else if (mut.type == "attributes") {
                return { from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border };
            }
            else { // "characterData"
                return {
                    from: desc.posAtStart,
                    to: desc.posAtEnd,
                    // An event was generated for a text change that didn't change
                    // any text. Mark the dom change to fall back to assuming the
                    // selection was typed over with an identical value if it can't
                    // find another change.
                    typeOver: mut.target.nodeValue == mut.oldValue
                };
            }
        }
    }
    let cssChecked = new WeakMap();
    let cssCheckWarned = false;
    function checkCSS(view) {
        if (cssChecked.has(view))
            return;
        cssChecked.set(view, null);
        if (['normal', 'nowrap', 'pre-line'].indexOf(getComputedStyle(view.dom).whiteSpace) !== -1) {
            view.requiresGeckoHackNode = gecko;
            if (cssCheckWarned)
                return;
            console["warn"]("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.");
            cssCheckWarned = true;
        }
    }
    // Used to work around a Safari Selection/shadow DOM bug
    // Based on https://github.com/codemirror/dev/issues/414 fix
    function safariShadowSelectionRange(view) {
        let found;
        function read(event) {
            event.preventDefault();
            event.stopImmediatePropagation();
            found = event.getTargetRanges()[0];
        }
        // Because Safari (at least in 2018-2022) doesn't provide regular
        // access to the selection inside a shadowRoot, we have to perform a
        // ridiculous hack to get at it—using `execCommand` to trigger a
        // `beforeInput` event so that we can read the target range from the
        // event.
        view.dom.addEventListener("beforeinput", read, true);
        document.execCommand("indent");
        view.dom.removeEventListener("beforeinput", read, true);
        let anchorNode = found.startContainer, anchorOffset = found.startOffset;
        let focusNode = found.endContainer, focusOffset = found.endOffset;
        let currentAnchor = view.domAtPos(view.state.selection.anchor);
        // Since such a range doesn't distinguish between anchor and head,
        // use a heuristic that flips it around if its end matches the
        // current anchor.
        if (isEquivalentPosition(currentAnchor.node, currentAnchor.offset, focusNode, focusOffset))
            [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
        return { anchorNode, anchorOffset, focusNode, focusOffset };
    }

    // Note that all referencing and parsing is done with the
    // start-of-operation selection and document, since that's the one
    // that the DOM represents. If any changes came in in the meantime,
    // the modification is mapped over those before it is applied, in
    // readDOMChange.
    function parseBetween(view, from_, to_) {
        let { node: parent, fromOffset, toOffset, from, to } = view.docView.parseRange(from_, to_);
        let domSel = view.domSelectionRange();
        let find;
        let anchor = domSel.anchorNode;
        if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {
            find = [{ node: anchor, offset: domSel.anchorOffset }];
            if (!selectionCollapsed(domSel))
                find.push({ node: domSel.focusNode, offset: domSel.focusOffset });
        }
        // Work around issue in Chrome where backspacing sometimes replaces
        // the deleted content with a random BR node (issues #799, #831)
        if (chrome && view.input.lastKeyCode === 8) {
            for (let off = toOffset; off > fromOffset; off--) {
                let node = parent.childNodes[off - 1], desc = node.pmViewDesc;
                if (node.nodeName == "BR" && !desc) {
                    toOffset = off;
                    break;
                }
                if (!desc || desc.size)
                    break;
            }
        }
        let startDoc = view.state.doc;
        let parser = view.someProp("domParser") || DOMParser.fromSchema(view.state.schema);
        let $from = startDoc.resolve(from);
        let sel = null, doc = parser.parse(parent, {
            topNode: $from.parent,
            topMatch: $from.parent.contentMatchAt($from.index()),
            topOpen: true,
            from: fromOffset,
            to: toOffset,
            preserveWhitespace: $from.parent.type.whitespace == "pre" ? "full" : true,
            findPositions: find,
            ruleFromNode,
            context: $from
        });
        if (find && find[0].pos != null) {
            let anchor = find[0].pos, head = find[1] && find[1].pos;
            if (head == null)
                head = anchor;
            sel = { anchor: anchor + from, head: head + from };
        }
        return { doc, sel, from, to };
    }
    function ruleFromNode(dom) {
        let desc = dom.pmViewDesc;
        if (desc) {
            return desc.parseRule();
        }
        else if (dom.nodeName == "BR" && dom.parentNode) {
            // Safari replaces the list item or table cell with a BR
            // directly in the list node (?!) if you delete the last
            // character in a list item or table cell (#708, #862)
            if (safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {
                let skip = document.createElement("div");
                skip.appendChild(document.createElement("li"));
                return { skip };
            }
            else if (dom.parentNode.lastChild == dom || safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {
                return { ignore: true };
            }
        }
        else if (dom.nodeName == "IMG" && dom.getAttribute("mark-placeholder")) {
            return { ignore: true };
        }
        return null;
    }
    function readDOMChange(view, from, to, typeOver, addedNodes) {
        if (from < 0) {
            let origin = view.input.lastSelectionTime > Date.now() - 50 ? view.input.lastSelectionOrigin : null;
            let newSel = selectionFromDOM(view, origin);
            if (newSel && !view.state.selection.eq(newSel)) {
                if (chrome && android &&
                    view.input.lastKeyCode === 13 && Date.now() - 100 < view.input.lastKeyCodeTime &&
                    view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter"))))
                    return;
                let tr = view.state.tr.setSelection(newSel);
                if (origin == "pointer")
                    tr.setMeta("pointer", true);
                else if (origin == "key")
                    tr.scrollIntoView();
                view.dispatch(tr);
            }
            return;
        }
        let $before = view.state.doc.resolve(from);
        let shared = $before.sharedDepth(to);
        from = $before.before(shared + 1);
        to = view.state.doc.resolve(to).after(shared + 1);
        let sel = view.state.selection;
        let parse = parseBetween(view, from, to);
        let doc = view.state.doc, compare = doc.slice(parse.from, parse.to);
        let preferredPos, preferredSide;
        // Prefer anchoring to end when Backspace is pressed
        if (view.input.lastKeyCode === 8 && Date.now() - 100 < view.input.lastKeyCodeTime) {
            preferredPos = view.state.selection.to;
            preferredSide = "end";
        }
        else {
            preferredPos = view.state.selection.from;
            preferredSide = "start";
        }
        view.input.lastKeyCode = null;
        let change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide);
        if ((ios && view.input.lastIOSEnter > Date.now() - 225 || android) &&
            addedNodes.some(n => n.nodeName == "DIV" || n.nodeName == "P" || n.nodeName == "LI") &&
            (!change || change.endA >= change.endB) &&
            view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")))) {
            view.input.lastIOSEnter = 0;
            return;
        }
        if (!change) {
            if (typeOver && sel instanceof TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) &&
                !view.composing && !(parse.sel && parse.sel.anchor != parse.sel.head)) {
                change = { start: sel.from, endA: sel.to, endB: sel.to };
            }
            else {
                if (parse.sel) {
                    let sel = resolveSelection(view, view.state.doc, parse.sel);
                    if (sel && !sel.eq(view.state.selection))
                        view.dispatch(view.state.tr.setSelection(sel));
                }
                return;
            }
        }
        // Chrome sometimes leaves the cursor before the inserted text when
        // composing after a cursor wrapper. This moves it forward.
        if (chrome && view.cursorWrapper && parse.sel && parse.sel.anchor == view.cursorWrapper.deco.from &&
            parse.sel.head == parse.sel.anchor) {
            let size = change.endB - change.start;
            parse.sel = { anchor: parse.sel.anchor + size, head: parse.sel.anchor + size };
        }
        view.input.domChangeCount++;
        // Handle the case where overwriting a selection by typing matches
        // the start or end of the selected content, creating a change
        // that's smaller than what was actually overwritten.
        if (view.state.selection.from < view.state.selection.to &&
            change.start == change.endB &&
            view.state.selection instanceof TextSelection) {
            if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2 &&
                view.state.selection.from >= parse.from) {
                change.start = view.state.selection.from;
            }
            else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2 &&
                view.state.selection.to <= parse.to) {
                change.endB += (view.state.selection.to - change.endA);
                change.endA = view.state.selection.to;
            }
        }
        // IE11 will insert a non-breaking space _ahead_ of the space after
        // the cursor space when adding a space before another space. When
        // that happened, adjust the change to cover the space instead.
        if (ie && ie_version <= 11 && change.endB == change.start + 1 &&
            change.endA == change.start && change.start > parse.from &&
            parse.doc.textBetween(change.start - parse.from - 1, change.start - parse.from + 1) == " \u00a0") {
            change.start--;
            change.endA--;
            change.endB--;
        }
        let $from = parse.doc.resolveNoCache(change.start - parse.from);
        let $to = parse.doc.resolveNoCache(change.endB - parse.from);
        let $fromA = doc.resolve(change.start);
        let inlineChange = $from.sameParent($to) && $from.parent.inlineContent && $fromA.end() >= change.endA;
        let nextSel;
        // If this looks like the effect of pressing Enter (or was recorded
        // as being an iOS enter press), just dispatch an Enter key instead.
        if (((ios && view.input.lastIOSEnter > Date.now() - 225 &&
            (!inlineChange || addedNodes.some(n => n.nodeName == "DIV" || n.nodeName == "P"))) ||
            (!inlineChange && $from.pos < parse.doc.content.size &&
                (nextSel = Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) &&
                nextSel.head == $to.pos)) &&
            view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")))) {
            view.input.lastIOSEnter = 0;
            return;
        }
        // Same for backspace
        if (view.state.selection.anchor > change.start &&
            looksLikeJoin(doc, change.start, change.endA, $from, $to) &&
            view.someProp("handleKeyDown", f => f(view, keyEvent(8, "Backspace")))) {
            if (android && chrome)
                view.domObserver.suppressSelectionUpdates(); // #820
            return;
        }
        // Chrome Android will occasionally, during composition, delete the
        // entire composition and then immediately insert it again. This is
        // used to detect that situation.
        if (chrome && android && change.endB == change.start)
            view.input.lastAndroidDelete = Date.now();
        // This tries to detect Android virtual keyboard
        // enter-and-pick-suggestion action. That sometimes (see issue
        // #1059) first fires a DOM mutation, before moving the selection to
        // the newly created block. And then, because ProseMirror cleans up
        // the DOM selection, it gives up moving the selection entirely,
        // leaving the cursor in the wrong place. When that happens, we drop
        // the new paragraph from the initial change, and fire a simulated
        // enter key afterwards.
        if (android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth &&
            parse.sel && parse.sel.anchor == parse.sel.head && parse.sel.head == change.endA) {
            change.endB -= 2;
            $to = parse.doc.resolveNoCache(change.endB - parse.from);
            setTimeout(() => {
                view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(13, "Enter")); });
            }, 20);
        }
        let chFrom = change.start, chTo = change.endA;
        let tr, storedMarks, markChange;
        if (inlineChange) {
            if ($from.pos == $to.pos) { // Deletion
                // IE11 sometimes weirdly moves the DOM selection around after
                // backspacing out the first element in a textblock
                if (ie && ie_version <= 11 && $from.parentOffset == 0) {
                    view.domObserver.suppressSelectionUpdates();
                    setTimeout(() => selectionToDOM(view), 20);
                }
                tr = view.state.tr.delete(chFrom, chTo);
                storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA));
            }
            else if ( // Adding or removing a mark
            change.endA == change.endB &&
                (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset), $fromA.parent.content.cut($fromA.parentOffset, change.endA - $fromA.start())))) {
                tr = view.state.tr;
                if (markChange.type == "add")
                    tr.addMark(chFrom, chTo, markChange.mark);
                else
                    tr.removeMark(chFrom, chTo, markChange.mark);
            }
            else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {
                // Both positions in the same text node -- simply insert text
                let text = $from.parent.textBetween($from.parentOffset, $to.parentOffset);
                if (view.someProp("handleTextInput", f => f(view, chFrom, chTo, text)))
                    return;
                tr = view.state.tr.insertText(text, chFrom, chTo);
            }
        }
        if (!tr)
            tr = view.state.tr.replace(chFrom, chTo, parse.doc.slice(change.start - parse.from, change.endB - parse.from));
        if (parse.sel) {
            let sel = resolveSelection(view, tr.doc, parse.sel);
            // Chrome Android will sometimes, during composition, report the
            // selection in the wrong place. If it looks like that is
            // happening, don't update the selection.
            // Edge just doesn't move the cursor forward when you start typing
            // in an empty block or between br nodes.
            if (sel && !(chrome && android && view.composing && sel.empty &&
                (change.start != change.endB || view.input.lastAndroidDelete < Date.now() - 100) &&
                (sel.head == chFrom || sel.head == tr.mapping.map(chTo) - 1) ||
                ie && sel.empty && sel.head == chFrom))
                tr.setSelection(sel);
        }
        if (storedMarks)
            tr.ensureMarks(storedMarks);
        view.dispatch(tr.scrollIntoView());
    }
    function resolveSelection(view, doc, parsedSel) {
        if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size)
            return null;
        return selectionBetween(view, doc.resolve(parsedSel.anchor), doc.resolve(parsedSel.head));
    }
    // Given two same-length, non-empty fragments of inline content,
    // determine whether the first could be created from the second by
    // removing or adding a single mark type.
    function isMarkChange(cur, prev) {
        let curMarks = cur.firstChild.marks, prevMarks = prev.firstChild.marks;
        let added = curMarks, removed = prevMarks, type, mark, update;
        for (let i = 0; i < prevMarks.length; i++)
            added = prevMarks[i].removeFromSet(added);
        for (let i = 0; i < curMarks.length; i++)
            removed = curMarks[i].removeFromSet(removed);
        if (added.length == 1 && removed.length == 0) {
            mark = added[0];
            type = "add";
            update = (node) => node.mark(mark.addToSet(node.marks));
        }
        else if (added.length == 0 && removed.length == 1) {
            mark = removed[0];
            type = "remove";
            update = (node) => node.mark(mark.removeFromSet(node.marks));
        }
        else {
            return null;
        }
        let updated = [];
        for (let i = 0; i < prev.childCount; i++)
            updated.push(update(prev.child(i)));
        if (Fragment.from(updated).eq(cur))
            return { mark, type };
    }
    function looksLikeJoin(old, start, end, $newStart, $newEnd) {
        if (!$newStart.parent.isTextblock ||
            // The content must have shrunk
            end - start <= $newEnd.pos - $newStart.pos ||
            // newEnd must point directly at or after the end of the block that newStart points into
            skipClosingAndOpening($newStart, true, false) < $newEnd.pos)
            return false;
        let $start = old.resolve(start);
        // Start must be at the end of a block
        if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)
            return false;
        let $next = old.resolve(skipClosingAndOpening($start, true, true));
        // The next textblock must start before end and end near it
        if (!$next.parent.isTextblock || $next.pos > end ||
            skipClosingAndOpening($next, true, false) < end)
            return false;
        // The fragments after the join point must match
        return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content);
    }
    function skipClosingAndOpening($pos, fromEnd, mayOpen) {
        let depth = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos;
        while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {
            depth--;
            end++;
            fromEnd = false;
        }
        if (mayOpen) {
            let next = $pos.node(depth).maybeChild($pos.indexAfter(depth));
            while (next && !next.isLeaf) {
                next = next.firstChild;
                end++;
            }
        }
        return end;
    }
    function findDiff(a, b, pos, preferredPos, preferredSide) {
        let start = a.findDiffStart(b, pos);
        if (start == null)
            return null;
        let { a: endA, b: endB } = a.findDiffEnd(b, pos + a.size, pos + b.size);
        if (preferredSide == "end") {
            let adjust = Math.max(0, start - Math.min(endA, endB));
            preferredPos -= endA + adjust - start;
        }
        if (endA < start && a.size < b.size) {
            let move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0;
            start -= move;
            endB = start + (endB - endA);
            endA = start;
        }
        else if (endB < start) {
            let move = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0;
            start -= move;
            endA = start + (endA - endB);
            endB = start;
        }
        return { start, endA, endB };
    }

    /**
    An editor view manages the DOM structure that represents an
    editable document. Its state and behavior are determined by its
    [props](https://prosemirror.net/docs/ref/#view.DirectEditorProps).
    */
    class EditorView {
        /**
        Create a view. `place` may be a DOM node that the editor should
        be appended to, a function that will place it into the document,
        or an object whose `mount` property holds the node to use as the
        document container. If it is `null`, the editor will not be
        added to the document.
        */
        constructor(place, props) {
            this._root = null;
            /**
            @internal
            */
            this.focused = false;
            /**
            Kludge used to work around a Chrome bug @internal
            */
            this.trackWrites = null;
            this.mounted = false;
            /**
            @internal
            */
            this.markCursor = null;
            /**
            @internal
            */
            this.cursorWrapper = null;
            /**
            @internal
            */
            this.lastSelectedViewDesc = undefined;
            /**
            @internal
            */
            this.input = new InputState;
            this.prevDirectPlugins = [];
            this.pluginViews = [];
            /**
            Holds `true` when a hack node is needed in Firefox to prevent the
            [space is eaten issue](https://github.com/ProseMirror/prosemirror/issues/651)
            @internal
            */
            this.requiresGeckoHackNode = false;
            /**
            When editor content is being dragged, this object contains
            information about the dragged slice and whether it is being
            copied or moved. At any other time, it is null.
            */
            this.dragging = null;
            this._props = props;
            this.state = props.state;
            this.directPlugins = props.plugins || [];
            this.directPlugins.forEach(checkStateComponent);
            this.dispatch = this.dispatch.bind(this);
            this.dom = (place && place.mount) || document.createElement("div");
            if (place) {
                if (place.appendChild)
                    place.appendChild(this.dom);
                else if (typeof place == "function")
                    place(this.dom);
                else if (place.mount)
                    this.mounted = true;
            }
            this.editable = getEditable(this);
            updateCursorWrapper(this);
            this.nodeViews = buildNodeViews(this);
            this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);
            this.domObserver = new DOMObserver(this, (from, to, typeOver, added) => readDOMChange(this, from, to, typeOver, added));
            this.domObserver.start();
            initInput(this);
            this.updatePluginViews();
        }
        /**
        Holds `true` when a
        [composition](https://w3c.github.io/uievents/#events-compositionevents)
        is active.
        */
        get composing() { return this.input.composing; }
        /**
        The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
        */
        get props() {
            if (this._props.state != this.state) {
                let prev = this._props;
                this._props = {};
                for (let name in prev)
                    this._props[name] = prev[name];
                this._props.state = this.state;
            }
            return this._props;
        }
        /**
        Update the view's props. Will immediately cause an update to
        the DOM.
        */
        update(props) {
            if (props.handleDOMEvents != this._props.handleDOMEvents)
                ensureListeners(this);
            let prevProps = this._props;
            this._props = props;
            if (props.plugins) {
                props.plugins.forEach(checkStateComponent);
                this.directPlugins = props.plugins;
            }
            this.updateStateInner(props.state, prevProps);
        }
        /**
        Update the view by updating existing props object with the object
        given as argument. Equivalent to `view.update(Object.assign({},
        view.props, props))`.
        */
        setProps(props) {
            let updated = {};
            for (let name in this._props)
                updated[name] = this._props[name];
            updated.state = this.state;
            for (let name in props)
                updated[name] = props[name];
            this.update(updated);
        }
        /**
        Update the editor's `state` prop, without touching any of the
        other props.
        */
        updateState(state) {
            this.updateStateInner(state, this._props);
        }
        updateStateInner(state, prevProps) {
            let prev = this.state, redraw = false, updateSel = false;
            // When stored marks are added, stop composition, so that they can
            // be displayed.
            if (state.storedMarks && this.composing) {
                clearComposition(this);
                updateSel = true;
            }
            this.state = state;
            let pluginsChanged = prev.plugins != state.plugins || this._props.plugins != prevProps.plugins;
            if (pluginsChanged || this._props.plugins != prevProps.plugins || this._props.nodeViews != prevProps.nodeViews) {
                let nodeViews = buildNodeViews(this);
                if (changedNodeViews(nodeViews, this.nodeViews)) {
                    this.nodeViews = nodeViews;
                    redraw = true;
                }
            }
            if (pluginsChanged || prevProps.handleDOMEvents != this._props.handleDOMEvents) {
                ensureListeners(this);
            }
            this.editable = getEditable(this);
            updateCursorWrapper(this);
            let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this);
            let scroll = prev.plugins != state.plugins && !prev.doc.eq(state.doc) ? "reset"
                : state.scrollToSelection > prev.scrollToSelection ? "to selection" : "preserve";
            let updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);
            if (updateDoc || !state.selection.eq(prev.selection))
                updateSel = true;
            let oldScrollPos = scroll == "preserve" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this);
            if (updateSel) {
                this.domObserver.stop();
                // Work around an issue in Chrome, IE, and Edge where changing
                // the DOM around an active selection puts it into a broken
                // state where the thing the user sees differs from the
                // selection reported by the Selection object (#710, #973,
                // #1011, #1013, #1035).
                let forceSelUpdate = updateDoc && (ie || chrome) && !this.composing &&
                    !prev.selection.empty && !state.selection.empty && selectionContextChanged(prev.selection, state.selection);
                if (updateDoc) {
                    // If the node that the selection points into is written to,
                    // Chrome sometimes starts misreporting the selection, so this
                    // tracks that and forces a selection reset when our update
                    // did write to the node.
                    let chromeKludge = chrome ? (this.trackWrites = this.domSelectionRange().focusNode) : null;
                    if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {
                        this.docView.updateOuterDeco([]);
                        this.docView.destroy();
                        this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);
                    }
                    if (chromeKludge && !this.trackWrites)
                        forceSelUpdate = true;
                }
                // Work around for an issue where an update arriving right between
                // a DOM selection change and the "selectionchange" event for it
                // can cause a spurious DOM selection update, disrupting mouse
                // drag selection.
                if (forceSelUpdate ||
                    !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelectionRange()) &&
                        anchorInRightPlace(this))) {
                    selectionToDOM(this, forceSelUpdate);
                }
                else {
                    syncNodeSelection(this, state.selection);
                    this.domObserver.setCurSelection();
                }
                this.domObserver.start();
            }
            this.updatePluginViews(prev);
            if (scroll == "reset") {
                this.dom.scrollTop = 0;
            }
            else if (scroll == "to selection") {
                this.scrollToSelection();
            }
            else if (oldScrollPos) {
                resetScrollPos(oldScrollPos);
            }
        }
        /**
        @internal
        */
        scrollToSelection() {
            let startDOM = this.domSelectionRange().focusNode;
            if (this.someProp("handleScrollToSelection", f => f(this))) ;
            else if (this.state.selection instanceof NodeSelection) {
                let target = this.docView.domAfterPos(this.state.selection.from);
                if (target.nodeType == 1)
                    scrollRectIntoView(this, target.getBoundingClientRect(), startDOM);
            }
            else {
                scrollRectIntoView(this, this.coordsAtPos(this.state.selection.head, 1), startDOM);
            }
        }
        destroyPluginViews() {
            let view;
            while (view = this.pluginViews.pop())
                if (view.destroy)
                    view.destroy();
        }
        updatePluginViews(prevState) {
            if (!prevState || prevState.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
                this.prevDirectPlugins = this.directPlugins;
                this.destroyPluginViews();
                for (let i = 0; i < this.directPlugins.length; i++) {
                    let plugin = this.directPlugins[i];
                    if (plugin.spec.view)
                        this.pluginViews.push(plugin.spec.view(this));
                }
                for (let i = 0; i < this.state.plugins.length; i++) {
                    let plugin = this.state.plugins[i];
                    if (plugin.spec.view)
                        this.pluginViews.push(plugin.spec.view(this));
                }
            }
            else {
                for (let i = 0; i < this.pluginViews.length; i++) {
                    let pluginView = this.pluginViews[i];
                    if (pluginView.update)
                        pluginView.update(this, prevState);
                }
            }
        }
        someProp(propName, f) {
            let prop = this._props && this._props[propName], value;
            if (prop != null && (value = f ? f(prop) : prop))
                return value;
            for (let i = 0; i < this.directPlugins.length; i++) {
                let prop = this.directPlugins[i].props[propName];
                if (prop != null && (value = f ? f(prop) : prop))
                    return value;
            }
            let plugins = this.state.plugins;
            if (plugins)
                for (let i = 0; i < plugins.length; i++) {
                    let prop = plugins[i].props[propName];
                    if (prop != null && (value = f ? f(prop) : prop))
                        return value;
                }
        }
        /**
        Query whether the view has focus.
        */
        hasFocus() {
            // Work around IE not handling focus correctly if resize handles are shown.
            // If the cursor is inside an element with resize handles, activeElement
            // will be that element instead of this.dom.
            if (ie) {
                // If activeElement is within this.dom, and there are no other elements
                // setting `contenteditable` to false in between, treat it as focused.
                let node = this.root.activeElement;
                if (node == this.dom)
                    return true;
                if (!node || !this.dom.contains(node))
                    return false;
                while (node && this.dom != node && this.dom.contains(node)) {
                    if (node.contentEditable == 'false')
                        return false;
                    node = node.parentElement;
                }
                return true;
            }
            return this.root.activeElement == this.dom;
        }
        /**
        Focus the editor.
        */
        focus() {
            this.domObserver.stop();
            if (this.editable)
                focusPreventScroll(this.dom);
            selectionToDOM(this);
            this.domObserver.start();
        }
        /**
        Get the document root in which the editor exists. This will
        usually be the top-level `document`, but might be a [shadow
        DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
        root if the editor is inside one.
        */
        get root() {
            let cached = this._root;
            if (cached == null)
                for (let search = this.dom.parentNode; search; search = search.parentNode) {
                    if (search.nodeType == 9 || (search.nodeType == 11 && search.host)) {
                        if (!search.getSelection)
                            Object.getPrototypeOf(search).getSelection = () => search.ownerDocument.getSelection();
                        return this._root = search;
                    }
                }
            return cached || document;
        }
        /**
        Given a pair of viewport coordinates, return the document
        position that corresponds to them. May return null if the given
        coordinates aren't inside of the editor. When an object is
        returned, its `pos` property is the position nearest to the
        coordinates, and its `inside` property holds the position of the
        inner node that the position falls inside of, or -1 if it is at
        the top level, not in any node.
        */
        posAtCoords(coords) {
            return posAtCoords(this, coords);
        }
        /**
        Returns the viewport rectangle at a given document position.
        `left` and `right` will be the same number, as this returns a
        flat cursor-ish rectangle. If the position is between two things
        that aren't directly adjacent, `side` determines which element
        is used. When < 0, the element before the position is used,
        otherwise the element after.
        */
        coordsAtPos(pos, side = 1) {
            return coordsAtPos(this, pos, side);
        }
        /**
        Find the DOM position that corresponds to the given document
        position. When `side` is negative, find the position as close as
        possible to the content before the position. When positive,
        prefer positions close to the content after the position. When
        zero, prefer as shallow a position as possible.

        Note that you should **not** mutate the editor's internal DOM,
        only inspect it (and even that is usually not necessary).
        */
        domAtPos(pos, side = 0) {
            return this.docView.domFromPos(pos, side);
        }
        /**
        Find the DOM node that represents the document node after the
        given position. May return `null` when the position doesn't point
        in front of a node or if the node is inside an opaque node view.

        This is intended to be able to call things like
        `getBoundingClientRect` on that DOM node. Do **not** mutate the
        editor DOM directly, or add styling this way, since that will be
        immediately overriden by the editor as it redraws the node.
        */
        nodeDOM(pos) {
            let desc = this.docView.descAt(pos);
            return desc ? desc.nodeDOM : null;
        }
        /**
        Find the document position that corresponds to a given DOM
        position. (Whenever possible, it is preferable to inspect the
        document structure directly, rather than poking around in the
        DOM, but sometimes—for example when interpreting an event
        target—you don't have a choice.)

        The `bias` parameter can be used to influence which side of a DOM
        node to use when the position is inside a leaf node.
        */
        posAtDOM(node, offset, bias = -1) {
            let pos = this.docView.posFromDOM(node, offset, bias);
            if (pos == null)
                throw new RangeError("DOM position not inside the editor");
            return pos;
        }
        /**
        Find out whether the selection is at the end of a textblock when
        moving in a given direction. When, for example, given `"left"`,
        it will return true if moving left from the current cursor
        position would leave that position's parent textblock. Will apply
        to the view's current state by default, but it is possible to
        pass a different state.
        */
        endOfTextblock(dir, state) {
            return endOfTextblock(this, state || this.state, dir);
        }
        /**
        Run the editor's paste logic with the given HTML string. The
        `event`, if given, will be passed to the
        [`handlePaste`](https://prosemirror.net/docs/ref/#view.EditorProps.handlePaste) hook.
        */
        pasteHTML(html, event) {
            return doPaste(this, "", html, false, event || new ClipboardEvent("paste"));
        }
        /**
        Run the editor's paste logic with the given plain-text input.
        */
        pasteText(text, event) {
            return doPaste(this, text, null, true, event || new ClipboardEvent("paste"));
        }
        /**
        Removes the editor from the DOM and destroys all [node
        views](https://prosemirror.net/docs/ref/#view.NodeView).
        */
        destroy() {
            if (!this.docView)
                return;
            destroyInput(this);
            this.destroyPluginViews();
            if (this.mounted) {
                this.docView.update(this.state.doc, [], viewDecorations(this), this);
                this.dom.textContent = "";
            }
            else if (this.dom.parentNode) {
                this.dom.parentNode.removeChild(this.dom);
            }
            this.docView.destroy();
            this.docView = null;
        }
        /**
        This is true when the view has been
        [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
        used anymore).
        */
        get isDestroyed() {
            return this.docView == null;
        }
        /**
        Used for testing.
        */
        dispatchEvent(event) {
            return dispatchEvent(this, event);
        }
        /**
        Dispatch a transaction. Will call
        [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
        when given, and otherwise defaults to applying the transaction to
        the current state and calling
        [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
        This method is bound to the view instance, so that it can be
        easily passed around.
        */
        dispatch(tr) {
            let dispatchTransaction = this._props.dispatchTransaction;
            if (dispatchTransaction)
                dispatchTransaction.call(this, tr);
            else
                this.updateState(this.state.apply(tr));
        }
        /**
        @internal
        */
        domSelectionRange() {
            return safari && this.root.nodeType === 11 && deepActiveElement(this.dom.ownerDocument) == this.dom
                ? safariShadowSelectionRange(this) : this.domSelection();
        }
        /**
        @internal
        */
        domSelection() {
            return this.root.getSelection();
        }
    }
    function computeDocDeco(view) {
        let attrs = Object.create(null);
        attrs.class = "ProseMirror";
        attrs.contenteditable = String(view.editable);
        attrs.translate = "no";
        view.someProp("attributes", value => {
            if (typeof value == "function")
                value = value(view.state);
            if (value)
                for (let attr in value) {
                    if (attr == "class")
                        attrs.class += " " + value[attr];
                    if (attr == "style") {
                        attrs.style = (attrs.style ? attrs.style + ";" : "") + value[attr];
                    }
                    else if (!attrs[attr] && attr != "contenteditable" && attr != "nodeName")
                        attrs[attr] = String(value[attr]);
                }
        });
        return [Decoration.node(0, view.state.doc.content.size, attrs)];
    }
    function updateCursorWrapper(view) {
        if (view.markCursor) {
            let dom = document.createElement("img");
            dom.className = "ProseMirror-separator";
            dom.setAttribute("mark-placeholder", "true");
            dom.setAttribute("alt", "");
            view.cursorWrapper = { dom, deco: Decoration.widget(view.state.selection.head, dom, { raw: true, marks: view.markCursor }) };
        }
        else {
            view.cursorWrapper = null;
        }
    }
    function getEditable(view) {
        return !view.someProp("editable", value => value(view.state) === false);
    }
    function selectionContextChanged(sel1, sel2) {
        let depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head));
        return sel1.$anchor.start(depth) != sel2.$anchor.start(depth);
    }
    function buildNodeViews(view) {
        let result = Object.create(null);
        function add(obj) {
            for (let prop in obj)
                if (!Object.prototype.hasOwnProperty.call(result, prop))
                    result[prop] = obj[prop];
        }
        view.someProp("nodeViews", add);
        view.someProp("markViews", add);
        return result;
    }
    function changedNodeViews(a, b) {
        let nA = 0, nB = 0;
        for (let prop in a) {
            if (a[prop] != b[prop])
                return true;
            nA++;
        }
        for (let _ in b)
            nB++;
        return nA != nB;
    }
    function checkStateComponent(plugin) {
        if (plugin.spec.state || plugin.spec.filterTransaction || plugin.spec.appendTransaction)
            throw new RangeError("Plugins passed directly to the view must not have a state component");
    }

    const pDOM = ["p", 0];
    const blockquoteDOM = ["blockquote", 0];
    const hrDOM = ["hr"];
    const preDOM = ["pre", ["code", 0]];
    const brDOM = ["br"];
    /**
    [Specs](https://prosemirror.net/docs/ref/#model.NodeSpec) for the nodes defined in this schema.
    */
    const nodes = {
        /**
        NodeSpec The top level document node.
        */
        doc: {
            content: "block+"
        },
        /**
        A plain paragraph textblock. Represented in the DOM
        as a `<p>` element.
        */
        paragraph: {
            content: "inline*",
            group: "block",
            parseDOM: [{ tag: "p" }],
            toDOM() { return pDOM; }
        },
        /**
        A blockquote (`<blockquote>`) wrapping one or more blocks.
        */
        blockquote: {
            content: "block+",
            group: "block",
            defining: true,
            parseDOM: [{ tag: "blockquote" }],
            toDOM() { return blockquoteDOM; }
        },
        /**
        A horizontal rule (`<hr>`).
        */
        horizontal_rule: {
            group: "block",
            parseDOM: [{ tag: "hr" }],
            toDOM() { return hrDOM; }
        },
        /**
        A heading textblock, with a `level` attribute that
        should hold the number 1 to 6. Parsed and serialized as `<h1>` to
        `<h6>` elements.
        */
        heading: {
            attrs: { level: { default: 1 } },
            content: "inline*",
            group: "block",
            defining: true,
            parseDOM: [{ tag: "h1", attrs: { level: 1 } },
                { tag: "h2", attrs: { level: 2 } },
                { tag: "h3", attrs: { level: 3 } },
                { tag: "h4", attrs: { level: 4 } },
                { tag: "h5", attrs: { level: 5 } },
                { tag: "h6", attrs: { level: 6 } }],
            toDOM(node) { return ["h" + node.attrs.level, 0]; }
        },
        /**
        A code listing. Disallows marks or non-text inline
        nodes by default. Represented as a `<pre>` element with a
        `<code>` element inside of it.
        */
        code_block: {
            content: "text*",
            marks: "",
            group: "block",
            code: true,
            defining: true,
            parseDOM: [{ tag: "pre", preserveWhitespace: "full" }],
            toDOM() { return preDOM; }
        },
        /**
        The text node.
        */
        text: {
            group: "inline"
        },
        /**
        An inline image (`<img>`) node. Supports `src`,
        `alt`, and `href` attributes. The latter two default to the empty
        string.
        */
        image: {
            inline: true,
            attrs: {
                src: {},
                alt: { default: null },
                title: { default: null }
            },
            group: "inline",
            draggable: true,
            parseDOM: [{ tag: "img[src]", getAttrs(dom) {
                        return {
                            src: dom.getAttribute("src"),
                            title: dom.getAttribute("title"),
                            alt: dom.getAttribute("alt")
                        };
                    } }],
            toDOM(node) { let { src, alt, title } = node.attrs; return ["img", { src, alt, title }]; }
        },
        /**
        A hard line break, represented in the DOM as `<br>`.
        */
        hard_break: {
            inline: true,
            group: "inline",
            selectable: false,
            parseDOM: [{ tag: "br" }],
            toDOM() { return brDOM; }
        }
    };
    const emDOM = ["em", 0];
    const strongDOM = ["strong", 0];
    const codeDOM = ["code", 0];
    /**
    [Specs](https://prosemirror.net/docs/ref/#model.MarkSpec) for the marks in the schema.
    */
    const marks = {
        /**
        A link. Has `href` and `title` attributes. `title`
        defaults to the empty string. Rendered and parsed as an `<a>`
        element.
        */
        link: {
            attrs: {
                href: {},
                title: { default: null }
            },
            inclusive: false,
            parseDOM: [{ tag: "a[href]", getAttrs(dom) {
                        return { href: dom.getAttribute("href"), title: dom.getAttribute("title") };
                    } }],
            toDOM(node) { let { href, title } = node.attrs; return ["a", { href, title }, 0]; }
        },
        /**
        An emphasis mark. Rendered as an `<em>` element. Has parse rules
        that also match `<i>` and `font-style: italic`.
        */
        em: {
            parseDOM: [
                { tag: "i" }, { tag: "em" },
                { style: "font-style=italic" },
                { style: "font-style=normal", clearMark: m => m.type.name == "em" }
            ],
            toDOM() { return emDOM; }
        },
        /**
        A strong mark. Rendered as `<strong>`, parse rules also match
        `<b>` and `font-weight: bold`.
        */
        strong: {
            parseDOM: [
                { tag: "strong" },
                // This works around a Google Docs misbehavior where
                // pasted content will be inexplicably wrapped in `<b>`
                // tags with a font-weight normal.
                { tag: "b", getAttrs: (node) => node.style.fontWeight != "normal" && null },
                { style: "font-weight=400", clearMark: m => m.type.name == "strong" },
                { style: "font-weight", getAttrs: (value) => /^(bold(er)?|[5-9]\d{2,})$/.test(value) && null },
            ],
            toDOM() { return strongDOM; }
        },
        /**
        Code font mark. Represented as a `<code>` element.
        */
        code: {
            parseDOM: [{ tag: "code" }],
            toDOM() { return codeDOM; }
        }
    };
    /**
    This schema roughly corresponds to the document schema used by
    [CommonMark](http://commonmark.org/), minus the list elements,
    which are defined in the [`prosemirror-schema-list`](https://prosemirror.net/docs/ref/#schema-list)
    module.

    To reuse elements from this schema, extend or read from its
    `spec.nodes` and `spec.marks` [properties](https://prosemirror.net/docs/ref/#model.Schema.spec).
    */
    const schema = new Schema({ nodes, marks });

    const olDOM = ["ol", 0];
    const ulDOM = ["ul", 0];
    const liDOM = ["li", 0];
    /**
    An ordered list [node spec](https://prosemirror.net/docs/ref/#model.NodeSpec). Has a single
    attribute, `order`, which determines the number at which the list
    starts counting, and defaults to 1. Represented as an `<ol>`
    element.
    */
    const orderedList = {
        attrs: { order: { default: 1 } },
        parseDOM: [{ tag: "ol", getAttrs(dom) {
                    return { order: dom.hasAttribute("start") ? +dom.getAttribute("start") : 1 };
                } }],
        toDOM(node) {
            return node.attrs.order == 1 ? olDOM : ["ol", { start: node.attrs.order }, 0];
        }
    };
    /**
    A bullet list node spec, represented in the DOM as `<ul>`.
    */
    const bulletList = {
        parseDOM: [{ tag: "ul" }],
        toDOM() { return ulDOM; }
    };
    /**
    A list item (`<li>`) spec.
    */
    const listItem = {
        parseDOM: [{ tag: "li" }],
        toDOM() { return liDOM; },
        defining: true
    };
    function add(obj, props) {
        let copy = {};
        for (let prop in obj)
            copy[prop] = obj[prop];
        for (let prop in props)
            copy[prop] = props[prop];
        return copy;
    }
    /**
    Convenience function for adding list-related node types to a map
    specifying the nodes for a schema. Adds
    [`orderedList`](https://prosemirror.net/docs/ref/#schema-list.orderedList) as `"ordered_list"`,
    [`bulletList`](https://prosemirror.net/docs/ref/#schema-list.bulletList) as `"bullet_list"`, and
    [`listItem`](https://prosemirror.net/docs/ref/#schema-list.listItem) as `"list_item"`.

    `itemContent` determines the content expression for the list items.
    If you want the commands defined in this module to apply to your
    list structure, it should have a shape like `"paragraph block*"` or
    `"paragraph (ordered_list | bullet_list)*"`. `listGroup` can be
    given to assign a group name to the list node types, for example
    `"block"`.
    */
    function addListNodes(nodes, itemContent, listGroup) {
        return nodes.append({
            ordered_list: add(orderedList, { content: "list_item+", group: listGroup }),
            bullet_list: add(bulletList, { content: "list_item+", group: listGroup }),
            list_item: add(listItem, { content: itemContent })
        });
    }
    /**
    Returns a command function that wraps the selection in a list with
    the given type an attributes. If `dispatch` is null, only return a
    value to indicate whether this is possible, but don't actually
    perform the change.
    */
    function wrapInList(listType, attrs = null) {
        return function (state, dispatch) {
            let { $from, $to } = state.selection;
            let range = $from.blockRange($to), doJoin = false, outerRange = range;
            if (!range)
                return false;
            // This is at the top of an existing list item
            if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {
                // Don't do anything if this is the top of the list
                if ($from.index(range.depth - 1) == 0)
                    return false;
                let $insert = state.doc.resolve(range.start - 2);
                outerRange = new NodeRange($insert, $insert, range.depth);
                if (range.endIndex < range.parent.childCount)
                    range = new NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth);
                doJoin = true;
            }
            let wrap = findWrapping(outerRange, listType, attrs, range);
            if (!wrap)
                return false;
            if (dispatch)
                dispatch(doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView());
            return true;
        };
    }
    function doWrapInList(tr, range, wrappers, joinBefore, listType) {
        let content = Fragment.empty;
        for (let i = wrappers.length - 1; i >= 0; i--)
            content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
        tr.step(new ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end, new Slice(content, 0, 0), wrappers.length, true));
        let found = 0;
        for (let i = 0; i < wrappers.length; i++)
            if (wrappers[i].type == listType)
                found = i + 1;
        let splitDepth = wrappers.length - found;
        let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent;
        for (let i = range.startIndex, e = range.endIndex, first = true; i < e; i++, first = false) {
            if (!first && canSplit(tr.doc, splitPos, splitDepth)) {
                tr.split(splitPos, splitDepth);
                splitPos += 2 * splitDepth;
            }
            splitPos += parent.child(i).nodeSize;
        }
        return tr;
    }
    /**
    Build a command that splits a non-empty textblock at the top level
    of a list item by also splitting that list item.
    */
    function splitListItem(itemType) {
        return function (state, dispatch) {
            let { $from, $to, node } = state.selection;
            if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to))
                return false;
            let grandParent = $from.node(-1);
            if (grandParent.type != itemType)
                return false;
            if ($from.parent.content.size == 0 && $from.node(-1).childCount == $from.indexAfter(-1)) {
                // In an empty block. If this is a nested list, the wrapping
                // list item should be split. Otherwise, bail out and let next
                // command handle lifting.
                if ($from.depth == 3 || $from.node(-3).type != itemType ||
                    $from.index(-2) != $from.node(-2).childCount - 1)
                    return false;
                if (dispatch) {
                    let wrap = Fragment.empty;
                    let depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;
                    // Build a fragment containing empty versions of the structure
                    // from the outer list item to the parent node of the cursor
                    for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d--)
                        wrap = Fragment.from($from.node(d).copy(wrap));
                    let depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1
                        : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;
                    // Add a second list item with an empty default start node
                    wrap = wrap.append(Fragment.from(itemType.createAndFill()));
                    let start = $from.before($from.depth - (depthBefore - 1));
                    let tr = state.tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0));
                    let sel = -1;
                    tr.doc.nodesBetween(start, tr.doc.content.size, (node, pos) => {
                        if (sel > -1)
                            return false;
                        if (node.isTextblock && node.content.size == 0)
                            sel = pos + 1;
                    });
                    if (sel > -1)
                        tr.setSelection(Selection.near(tr.doc.resolve(sel)));
                    dispatch(tr.scrollIntoView());
                }
                return true;
            }
            let nextType = $to.pos == $from.end() ? grandParent.contentMatchAt(0).defaultType : null;
            let tr = state.tr.delete($from.pos, $to.pos);
            let types = nextType ? [null, { type: nextType }] : undefined;
            if (!canSplit(tr.doc, $from.pos, 2, types))
                return false;
            if (dispatch)
                dispatch(tr.split($from.pos, 2, types).scrollIntoView());
            return true;
        };
    }
    /**
    Create a command to lift the list item around the selection up into
    a wrapping list.
    */
    function liftListItem(itemType) {
        return function (state, dispatch) {
            let { $from, $to } = state.selection;
            let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);
            if (!range)
                return false;
            if (!dispatch)
                return true;
            if ($from.node(range.depth - 1).type == itemType) // Inside a parent list
                return liftToOuterList(state, dispatch, itemType, range);
            else // Outer list node
                return liftOutOfList(state, dispatch, range);
        };
    }
    function liftToOuterList(state, dispatch, itemType, range) {
        let tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth);
        if (end < endOfList) {
            // There are siblings after the lifted items, which must become
            // children of the last item
            tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));
            range = new NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);
        }
        const target = liftTarget(range);
        if (target == null)
            return false;
        tr.lift(range, target);
        let after = tr.mapping.map(end, -1) - 1;
        if (canJoin(tr.doc, after))
            tr.join(after);
        dispatch(tr.scrollIntoView());
        return true;
    }
    function liftOutOfList(state, dispatch, range) {
        let tr = state.tr, list = range.parent;
        // Merge the list items into a single big item
        for (let pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {
            pos -= list.child(i).nodeSize;
            tr.delete(pos - 1, pos + 1);
        }
        let $start = tr.doc.resolve(range.start), item = $start.nodeAfter;
        if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize)
            return false;
        let atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount;
        let parent = $start.node(-1), indexBefore = $start.index(-1);
        if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, item.content.append(atEnd ? Fragment.empty : Fragment.from(list))))
            return false;
        let start = $start.pos, end = start + item.nodeSize;
        // Strip off the surrounding list. At the sides where we're not at
        // the end of the list, the existing list is closed. At sides where
        // this is the end, it is overwritten to its end.
        tr.step(new ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1, new Slice((atStart ? Fragment.empty : Fragment.from(list.copy(Fragment.empty)))
            .append(atEnd ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));
        dispatch(tr.scrollIntoView());
        return true;
    }
    /**
    Create a command to sink the list item around the selection down
    into an inner list.
    */
    function sinkListItem(itemType) {
        return function (state, dispatch) {
            let { $from, $to } = state.selection;
            let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);
            if (!range)
                return false;
            let startIndex = range.startIndex;
            if (startIndex == 0)
                return false;
            let parent = range.parent, nodeBefore = parent.child(startIndex - 1);
            if (nodeBefore.type != itemType)
                return false;
            if (dispatch) {
                let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;
                let inner = Fragment.from(nestedBefore ? itemType.create() : null);
                let slice = new Slice(Fragment.from(itemType.create(null, Fragment.from(parent.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);
                let before = range.start, after = range.end;
                dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice, 1, true))
                    .scrollIntoView());
            }
            return true;
        };
    }

    var base = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'"
    };

    var shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: "\""
    };

    var chrome$1 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
    var gecko$1 = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
    var mac$3 = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
    var brokenModifierNames = mac$3 || chrome$1 && +chrome$1[1] < 57;

    // Fill in the digit keys
    for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

    // The function keys
    for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

    // And the alphabetic keys
    for (var i = 65; i <= 90; i++) {
      base[i] = String.fromCharCode(i + 32);
      shift[i] = String.fromCharCode(i);
    }

    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

    function keyName(event) {
      var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
        ie$1 && event.shiftKey && event.key && event.key.length == 1 ||
        event.key == "Unidentified";
      var name = (!ignoreKey && event.key) ||
        (event.shiftKey ? shift : base)[event.keyCode] ||
        event.key || "Unidentified";
      // Edge sometimes produces wrong names (Issue #3)
      if (name == "Esc") name = "Escape";
      if (name == "Del") name = "Delete";
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
      if (name == "Left") name = "ArrowLeft";
      if (name == "Up") name = "ArrowUp";
      if (name == "Right") name = "ArrowRight";
      if (name == "Down") name = "ArrowDown";
      return name
    }

    const mac$2 = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
    function normalizeKeyName(name) {
        let parts = name.split(/-(?!$)/), result = parts[parts.length - 1];
        if (result == "Space")
            result = " ";
        let alt, ctrl, shift$$1, meta;
        for (let i = 0; i < parts.length - 1; i++) {
            let mod = parts[i];
            if (/^(cmd|meta|m)$/i.test(mod))
                meta = true;
            else if (/^a(lt)?$/i.test(mod))
                alt = true;
            else if (/^(c|ctrl|control)$/i.test(mod))
                ctrl = true;
            else if (/^s(hift)?$/i.test(mod))
                shift$$1 = true;
            else if (/^mod$/i.test(mod)) {
                if (mac$2)
                    meta = true;
                else
                    ctrl = true;
            }
            else
                throw new Error("Unrecognized modifier name: " + mod);
        }
        if (alt)
            result = "Alt-" + result;
        if (ctrl)
            result = "Ctrl-" + result;
        if (meta)
            result = "Meta-" + result;
        if (shift$$1)
            result = "Shift-" + result;
        return result;
    }
    function normalize(map) {
        let copy = Object.create(null);
        for (let prop in map)
            copy[normalizeKeyName(prop)] = map[prop];
        return copy;
    }
    function modifiers(name, event, shift$$1 = true) {
        if (event.altKey)
            name = "Alt-" + name;
        if (event.ctrlKey)
            name = "Ctrl-" + name;
        if (event.metaKey)
            name = "Meta-" + name;
        if (shift$$1 && event.shiftKey)
            name = "Shift-" + name;
        return name;
    }
    /**
    Create a keymap plugin for the given set of bindings.

    Bindings should map key names to [command](https://prosemirror.net/docs/ref/#commands)-style
    functions, which will be called with `(EditorState, dispatch,
    EditorView)` arguments, and should return true when they've handled
    the key. Note that the view argument isn't part of the command
    protocol, but can be used as an escape hatch if a binding needs to
    directly interact with the UI.

    Key names may be strings like `"Shift-Ctrl-Enter"`—a key
    identifier prefixed with zero or more modifiers. Key identifiers
    are based on the strings that can appear in
    [`KeyEvent.key`](https:developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).
    Use lowercase letters to refer to letter keys (or uppercase letters
    if you want shift to be held). You may use `"Space"` as an alias
    for the `" "` name.

    Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or
    `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or
    `Meta-`) are recognized. For characters that are created by holding
    shift, the `Shift-` prefix is implied, and should not be added
    explicitly.

    You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on
    other platforms.

    You can add multiple keymap plugins to an editor. The order in
    which they appear determines their precedence (the ones early in
    the array get to dispatch first).
    */
    function keymap(bindings) {
        return new Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });
    }
    /**
    Given a set of bindings (using the same format as
    [`keymap`](https://prosemirror.net/docs/ref/#keymap.keymap)), return a [keydown
    handler](https://prosemirror.net/docs/ref/#view.EditorProps.handleKeyDown) that handles them.
    */
    function keydownHandler(bindings) {
        let map = normalize(bindings);
        return function (view, event) {
            let name = keyName(event), baseName, direct = map[modifiers(name, event)];
            if (direct && direct(view.state, view.dispatch, view))
                return true;
            // A character key
            if (name.length == 1 && name != " ") {
                if (event.shiftKey) {
                    // In case the name was already modified by shift, try looking
                    // it up without its shift modifier
                    let noShift = map[modifiers(name, event, false)];
                    if (noShift && noShift(view.state, view.dispatch, view))
                        return true;
                }
                if ((event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) &&
                    (baseName = base[event.keyCode]) && baseName != name) {
                    // Try falling back to the keyCode when there's a modifier
                    // active or the character produced isn't ASCII, and our table
                    // produces a different name from the the keyCode. See #668,
                    // #1060
                    let fromCode = map[modifiers(baseName, event)];
                    if (fromCode && fromCode(view.state, view.dispatch, view))
                        return true;
                }
            }
            return false;
        };
    }

    var GOOD_LEAF_SIZE = 200;

    // :: class<T> A rope sequence is a persistent sequence data structure
    // that supports appending, prepending, and slicing without doing a
    // full copy. It is represented as a mostly-balanced tree.
    var RopeSequence = function RopeSequence () {};

    RopeSequence.prototype.append = function append (other) {
      if (!other.length) { return this }
      other = RopeSequence.from(other);

      return (!this.length && other) ||
        (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||
        (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||
        this.appendInner(other)
    };

    // :: (union<[T], RopeSequence<T>>) → RopeSequence<T>
    // Prepend an array or other rope to this one, returning a new rope.
    RopeSequence.prototype.prepend = function prepend (other) {
      if (!other.length) { return this }
      return RopeSequence.from(other).append(this)
    };

    RopeSequence.prototype.appendInner = function appendInner (other) {
      return new Append(this, other)
    };

    // :: (?number, ?number) → RopeSequence<T>
    // Create a rope repesenting a sub-sequence of this rope.
    RopeSequence.prototype.slice = function slice (from, to) {
        if ( from === void 0 ) from = 0;
        if ( to === void 0 ) to = this.length;

      if (from >= to) { return RopeSequence.empty }
      return this.sliceInner(Math.max(0, from), Math.min(this.length, to))
    };

    // :: (number) → T
    // Retrieve the element at the given position from this rope.
    RopeSequence.prototype.get = function get (i) {
      if (i < 0 || i >= this.length) { return undefined }
      return this.getInner(i)
    };

    // :: ((element: T, index: number) → ?bool, ?number, ?number)
    // Call the given function for each element between the given
    // indices. This tends to be more efficient than looping over the
    // indices and calling `get`, because it doesn't have to descend the
    // tree for every element.
    RopeSequence.prototype.forEach = function forEach (f, from, to) {
        if ( from === void 0 ) from = 0;
        if ( to === void 0 ) to = this.length;

      if (from <= to)
        { this.forEachInner(f, from, to, 0); }
      else
        { this.forEachInvertedInner(f, from, to, 0); }
    };

    // :: ((element: T, index: number) → U, ?number, ?number) → [U]
    // Map the given functions over the elements of the rope, producing
    // a flat array.
    RopeSequence.prototype.map = function map (f, from, to) {
        if ( from === void 0 ) from = 0;
        if ( to === void 0 ) to = this.length;

      var result = [];
      this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to);
      return result
    };

    // :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>
    // Create a rope representing the given array, or return the rope
    // itself if a rope was given.
    RopeSequence.from = function from (values) {
      if (values instanceof RopeSequence) { return values }
      return values && values.length ? new Leaf(values) : RopeSequence.empty
    };

    var Leaf = /*@__PURE__*/(function (RopeSequence) {
      function Leaf(values) {
        RopeSequence.call(this);
        this.values = values;
      }

      if ( RopeSequence ) Leaf.__proto__ = RopeSequence;
      Leaf.prototype = Object.create( RopeSequence && RopeSequence.prototype );
      Leaf.prototype.constructor = Leaf;

      var prototypeAccessors = { length: { configurable: true },depth: { configurable: true } };

      Leaf.prototype.flatten = function flatten () {
        return this.values
      };

      Leaf.prototype.sliceInner = function sliceInner (from, to) {
        if (from == 0 && to == this.length) { return this }
        return new Leaf(this.values.slice(from, to))
      };

      Leaf.prototype.getInner = function getInner (i) {
        return this.values[i]
      };

      Leaf.prototype.forEachInner = function forEachInner (f, from, to, start) {
        for (var i = from; i < to; i++)
          { if (f(this.values[i], start + i) === false) { return false } }
      };

      Leaf.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {
        for (var i = from - 1; i >= to; i--)
          { if (f(this.values[i], start + i) === false) { return false } }
      };

      Leaf.prototype.leafAppend = function leafAppend (other) {
        if (this.length + other.length <= GOOD_LEAF_SIZE)
          { return new Leaf(this.values.concat(other.flatten())) }
      };

      Leaf.prototype.leafPrepend = function leafPrepend (other) {
        if (this.length + other.length <= GOOD_LEAF_SIZE)
          { return new Leaf(other.flatten().concat(this.values)) }
      };

      prototypeAccessors.length.get = function () { return this.values.length };

      prototypeAccessors.depth.get = function () { return 0 };

      Object.defineProperties( Leaf.prototype, prototypeAccessors );

      return Leaf;
    }(RopeSequence));

    // :: RopeSequence
    // The empty rope sequence.
    RopeSequence.empty = new Leaf([]);

    var Append = /*@__PURE__*/(function (RopeSequence) {
      function Append(left, right) {
        RopeSequence.call(this);
        this.left = left;
        this.right = right;
        this.length = left.length + right.length;
        this.depth = Math.max(left.depth, right.depth) + 1;
      }

      if ( RopeSequence ) Append.__proto__ = RopeSequence;
      Append.prototype = Object.create( RopeSequence && RopeSequence.prototype );
      Append.prototype.constructor = Append;

      Append.prototype.flatten = function flatten () {
        return this.left.flatten().concat(this.right.flatten())
      };

      Append.prototype.getInner = function getInner (i) {
        return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length)
      };

      Append.prototype.forEachInner = function forEachInner (f, from, to, start) {
        var leftLen = this.left.length;
        if (from < leftLen &&
            this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false)
          { return false }
        if (to > leftLen &&
            this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false)
          { return false }
      };

      Append.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {
        var leftLen = this.left.length;
        if (from > leftLen &&
            this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false)
          { return false }
        if (to < leftLen &&
            this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false)
          { return false }
      };

      Append.prototype.sliceInner = function sliceInner (from, to) {
        if (from == 0 && to == this.length) { return this }
        var leftLen = this.left.length;
        if (to <= leftLen) { return this.left.slice(from, to) }
        if (from >= leftLen) { return this.right.slice(from - leftLen, to - leftLen) }
        return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen))
      };

      Append.prototype.leafAppend = function leafAppend (other) {
        var inner = this.right.leafAppend(other);
        if (inner) { return new Append(this.left, inner) }
      };

      Append.prototype.leafPrepend = function leafPrepend (other) {
        var inner = this.left.leafPrepend(other);
        if (inner) { return new Append(inner, this.right) }
      };

      Append.prototype.appendInner = function appendInner (other) {
        if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1)
          { return new Append(this.left, new Append(this.right, other)) }
        return new Append(this, other)
      };

      return Append;
    }(RopeSequence));

    var ropeSequence = RopeSequence;

    // ProseMirror's history isn't simply a way to roll back to a previous
    // state, because ProseMirror supports applying changes without adding
    // them to the history (for example during collaboration).
    //
    // To this end, each 'Branch' (one for the undo history and one for
    // the redo history) keeps an array of 'Items', which can optionally
    // hold a step (an actual undoable change), and always hold a position
    // map (which is needed to move changes below them to apply to the
    // current document).
    //
    // An item that has both a step and a selection bookmark is the start
    // of an 'event' — a group of changes that will be undone or redone at
    // once. (It stores only the bookmark, since that way we don't have to
    // provide a document until the selection is actually applied, which
    // is useful when compressing.)
    // Used to schedule history compression
    const max_empty_items = 500;
    class Branch {
        constructor(items, eventCount) {
            this.items = items;
            this.eventCount = eventCount;
        }
        // Pop the latest event off the branch's history and apply it
        // to a document transform.
        popEvent(state, preserveItems) {
            if (this.eventCount == 0)
                return null;
            let end = this.items.length;
            for (;; end--) {
                let next = this.items.get(end - 1);
                if (next.selection) {
                    --end;
                    break;
                }
            }
            let remap, mapFrom;
            if (preserveItems) {
                remap = this.remapping(end, this.items.length);
                mapFrom = remap.maps.length;
            }
            let transform = state.tr;
            let selection, remaining;
            let addAfter = [], addBefore = [];
            this.items.forEach((item, i) => {
                if (!item.step) {
                    if (!remap) {
                        remap = this.remapping(end, i + 1);
                        mapFrom = remap.maps.length;
                    }
                    mapFrom--;
                    addBefore.push(item);
                    return;
                }
                if (remap) {
                    addBefore.push(new Item(item.map));
                    let step = item.step.map(remap.slice(mapFrom)), map;
                    if (step && transform.maybeStep(step).doc) {
                        map = transform.mapping.maps[transform.mapping.maps.length - 1];
                        addAfter.push(new Item(map, undefined, undefined, addAfter.length + addBefore.length));
                    }
                    mapFrom--;
                    if (map)
                        remap.appendMap(map, mapFrom);
                }
                else {
                    transform.maybeStep(item.step);
                }
                if (item.selection) {
                    selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;
                    remaining = new Branch(this.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this.eventCount - 1);
                    return false;
                }
            }, this.items.length, 0);
            return { remaining: remaining, transform, selection: selection };
        }
        // Create a new branch with the given transform added.
        addTransform(transform, selection, histOptions, preserveItems) {
            let newItems = [], eventCount = this.eventCount;
            let oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;
            for (let i = 0; i < transform.steps.length; i++) {
                let step = transform.steps[i].invert(transform.docs[i]);
                let item = new Item(transform.mapping.maps[i], step, selection), merged;
                if (merged = lastItem && lastItem.merge(item)) {
                    item = merged;
                    if (i)
                        newItems.pop();
                    else
                        oldItems = oldItems.slice(0, oldItems.length - 1);
                }
                newItems.push(item);
                if (selection) {
                    eventCount++;
                    selection = undefined;
                }
                if (!preserveItems)
                    lastItem = item;
            }
            let overflow = eventCount - histOptions.depth;
            if (overflow > DEPTH_OVERFLOW) {
                oldItems = cutOffEvents(oldItems, overflow);
                eventCount -= overflow;
            }
            return new Branch(oldItems.append(newItems), eventCount);
        }
        remapping(from, to) {
            let maps = new Mapping;
            this.items.forEach((item, i) => {
                let mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from
                    ? maps.maps.length - item.mirrorOffset : undefined;
                maps.appendMap(item.map, mirrorPos);
            }, from, to);
            return maps;
        }
        addMaps(array) {
            if (this.eventCount == 0)
                return this;
            return new Branch(this.items.append(array.map(map => new Item(map))), this.eventCount);
        }
        // When the collab module receives remote changes, the history has
        // to know about those, so that it can adjust the steps that were
        // rebased on top of the remote changes, and include the position
        // maps for the remote changes in its array of items.
        rebased(rebasedTransform, rebasedCount) {
            if (!this.eventCount)
                return this;
            let rebasedItems = [], start = Math.max(0, this.items.length - rebasedCount);
            let mapping = rebasedTransform.mapping;
            let newUntil = rebasedTransform.steps.length;
            let eventCount = this.eventCount;
            this.items.forEach(item => { if (item.selection)
                eventCount--; }, start);
            let iRebased = rebasedCount;
            this.items.forEach(item => {
                let pos = mapping.getMirror(--iRebased);
                if (pos == null)
                    return;
                newUntil = Math.min(newUntil, pos);
                let map = mapping.maps[pos];
                if (item.step) {
                    let step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);
                    let selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));
                    if (selection)
                        eventCount++;
                    rebasedItems.push(new Item(map, step, selection));
                }
                else {
                    rebasedItems.push(new Item(map));
                }
            }, start);
            let newMaps = [];
            for (let i = rebasedCount; i < newUntil; i++)
                newMaps.push(new Item(mapping.maps[i]));
            let items = this.items.slice(0, start).append(newMaps).append(rebasedItems);
            let branch = new Branch(items, eventCount);
            if (branch.emptyItemCount() > max_empty_items)
                branch = branch.compress(this.items.length - rebasedItems.length);
            return branch;
        }
        emptyItemCount() {
            let count = 0;
            this.items.forEach(item => { if (!item.step)
                count++; });
            return count;
        }
        // Compressing a branch means rewriting it to push the air (map-only
        // items) out. During collaboration, these naturally accumulate
        // because each remote change adds one. The `upto` argument is used
        // to ensure that only the items below a given level are compressed,
        // because `rebased` relies on a clean, untouched set of items in
        // order to associate old items with rebased steps.
        compress(upto = this.items.length) {
            let remap = this.remapping(0, upto), mapFrom = remap.maps.length;
            let items = [], events = 0;
            this.items.forEach((item, i) => {
                if (i >= upto) {
                    items.push(item);
                    if (item.selection)
                        events++;
                }
                else if (item.step) {
                    let step = item.step.map(remap.slice(mapFrom)), map = step && step.getMap();
                    mapFrom--;
                    if (map)
                        remap.appendMap(map, mapFrom);
                    if (step) {
                        let selection = item.selection && item.selection.map(remap.slice(mapFrom));
                        if (selection)
                            events++;
                        let newItem = new Item(map.invert(), step, selection), merged, last = items.length - 1;
                        if (merged = items.length && items[last].merge(newItem))
                            items[last] = merged;
                        else
                            items.push(newItem);
                    }
                }
                else if (item.map) {
                    mapFrom--;
                }
            }, this.items.length, 0);
            return new Branch(ropeSequence.from(items.reverse()), events);
        }
    }
    Branch.empty = new Branch(ropeSequence.empty, 0);
    function cutOffEvents(items, n) {
        let cutPoint;
        items.forEach((item, i) => {
            if (item.selection && (n-- == 0)) {
                cutPoint = i;
                return false;
            }
        });
        return items.slice(cutPoint);
    }
    class Item {
        constructor(
        // The (forward) step map for this item.
        map,
        // The inverted step
        step,
        // If this is non-null, this item is the start of a group, and
        // this selection is the starting selection for the group (the one
        // that was active before the first step was applied)
        selection,
        // If this item is the inverse of a previous mapping on the stack,
        // this points at the inverse's offset
        mirrorOffset) {
            this.map = map;
            this.step = step;
            this.selection = selection;
            this.mirrorOffset = mirrorOffset;
        }
        merge(other) {
            if (this.step && other.step && !other.selection) {
                let step = other.step.merge(this.step);
                if (step)
                    return new Item(step.getMap().invert(), step, this.selection);
            }
        }
    }
    // The value of the state field that tracks undo/redo history for that
    // state. Will be stored in the plugin state when the history plugin
    // is active.
    class HistoryState {
        constructor(done, undone, prevRanges, prevTime) {
            this.done = done;
            this.undone = undone;
            this.prevRanges = prevRanges;
            this.prevTime = prevTime;
        }
    }
    const DEPTH_OVERFLOW = 20;
    // Record a transformation in undo history.
    function applyTransaction(history, state, tr, options) {
        let historyTr = tr.getMeta(historyKey), rebased;
        if (historyTr)
            return historyTr.historyState;
        if (tr.getMeta(closeHistoryKey))
            history = new HistoryState(history.done, history.undone, null, 0);
        let appended = tr.getMeta("appendedTransaction");
        if (tr.steps.length == 0) {
            return history;
        }
        else if (appended && appended.getMeta(historyKey)) {
            if (appended.getMeta(historyKey).redo)
                return new HistoryState(history.done.addTransform(tr, undefined, options, mustPreserveItems(state)), history.undone, rangesFor(tr.mapping.maps[tr.steps.length - 1]), history.prevTime);
            else
                return new HistoryState(history.done, history.undone.addTransform(tr, undefined, options, mustPreserveItems(state)), null, history.prevTime);
        }
        else if (tr.getMeta("addToHistory") !== false && !(appended && appended.getMeta("addToHistory") === false)) {
            // Group transforms that occur in quick succession into one event.
            let newGroup = history.prevTime == 0 || !appended && (history.prevTime < (tr.time || 0) - options.newGroupDelay ||
                !isAdjacentTo(tr, history.prevRanges));
            let prevRanges = appended ? mapRanges(history.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps[tr.steps.length - 1]);
            return new HistoryState(history.done.addTransform(tr, newGroup ? state.selection.getBookmark() : undefined, options, mustPreserveItems(state)), Branch.empty, prevRanges, tr.time);
        }
        else if (rebased = tr.getMeta("rebased")) {
            // Used by the collab module to tell the history that some of its
            // content has been rebased.
            return new HistoryState(history.done.rebased(tr, rebased), history.undone.rebased(tr, rebased), mapRanges(history.prevRanges, tr.mapping), history.prevTime);
        }
        else {
            return new HistoryState(history.done.addMaps(tr.mapping.maps), history.undone.addMaps(tr.mapping.maps), mapRanges(history.prevRanges, tr.mapping), history.prevTime);
        }
    }
    function isAdjacentTo(transform, prevRanges) {
        if (!prevRanges)
            return false;
        if (!transform.docChanged)
            return true;
        let adjacent = false;
        transform.mapping.maps[0].forEach((start, end) => {
            for (let i = 0; i < prevRanges.length; i += 2)
                if (start <= prevRanges[i + 1] && end >= prevRanges[i])
                    adjacent = true;
        });
        return adjacent;
    }
    function rangesFor(map) {
        let result = [];
        map.forEach((_from, _to, from, to) => result.push(from, to));
        return result;
    }
    function mapRanges(ranges, mapping) {
        if (!ranges)
            return null;
        let result = [];
        for (let i = 0; i < ranges.length; i += 2) {
            let from = mapping.map(ranges[i], 1), to = mapping.map(ranges[i + 1], -1);
            if (from <= to)
                result.push(from, to);
        }
        return result;
    }
    // Apply the latest event from one branch to the document and shift the event
    // onto the other branch.
    function histTransaction(history, state, dispatch, redo) {
        let preserveItems = mustPreserveItems(state);
        let histOptions = historyKey.get(state).spec.config;
        let pop = (redo ? history.undone : history.done).popEvent(state, preserveItems);
        if (!pop)
            return;
        let selection = pop.selection.resolve(pop.transform.doc);
        let added = (redo ? history.done : history.undone).addTransform(pop.transform, state.selection.getBookmark(), histOptions, preserveItems);
        let newHist = new HistoryState(redo ? added : pop.remaining, redo ? pop.remaining : added, null, 0);
        dispatch(pop.transform.setSelection(selection).setMeta(historyKey, { redo, historyState: newHist }).scrollIntoView());
    }
    let cachedPreserveItems = false;
    let cachedPreserveItemsPlugins = null;
    // Check whether any plugin in the given state has a
    // `historyPreserveItems` property in its spec, in which case we must
    // preserve steps exactly as they came in, so that they can be
    // rebased.
    function mustPreserveItems(state) {
        let plugins = state.plugins;
        if (cachedPreserveItemsPlugins != plugins) {
            cachedPreserveItems = false;
            cachedPreserveItemsPlugins = plugins;
            for (let i = 0; i < plugins.length; i++)
                if (plugins[i].spec.historyPreserveItems) {
                    cachedPreserveItems = true;
                    break;
                }
        }
        return cachedPreserveItems;
    }
    const historyKey = new PluginKey("history");
    const closeHistoryKey = new PluginKey("closeHistory");
    /**
    Returns a plugin that enables the undo history for an editor. The
    plugin will track undo and redo stacks, which can be used with the
    [`undo`](https://prosemirror.net/docs/ref/#history.undo) and [`redo`](https://prosemirror.net/docs/ref/#history.redo) commands.

    You can set an `"addToHistory"` [metadata
    property](https://prosemirror.net/docs/ref/#state.Transaction.setMeta) of `false` on a transaction
    to prevent it from being rolled back by undo.
    */
    function history(config = {}) {
        config = { depth: config.depth || 100,
            newGroupDelay: config.newGroupDelay || 500 };
        return new Plugin({
            key: historyKey,
            state: {
                init() {
                    return new HistoryState(Branch.empty, Branch.empty, null, 0);
                },
                apply(tr, hist, state) {
                    return applyTransaction(hist, state, tr, config);
                }
            },
            config,
            props: {
                handleDOMEvents: {
                    beforeinput(view, e) {
                        let inputType = e.inputType;
                        let command = inputType == "historyUndo" ? undo : inputType == "historyRedo" ? redo : null;
                        if (!command)
                            return false;
                        e.preventDefault();
                        return command(view.state, view.dispatch);
                    }
                }
            }
        });
    }
    /**
    A command function that undoes the last change, if any.
    */
    const undo = (state, dispatch) => {
        let hist = historyKey.getState(state);
        if (!hist || hist.done.eventCount == 0)
            return false;
        if (dispatch)
            histTransaction(hist, state, dispatch, false);
        return true;
    };
    /**
    A command function that redoes the last undone change, if any.
    */
    const redo = (state, dispatch) => {
        let hist = historyKey.getState(state);
        if (!hist || hist.undone.eventCount == 0)
            return false;
        if (dispatch)
            histTransaction(hist, state, dispatch, true);
        return true;
    };

    /**
    Delete the selection, if there is one.
    */
    const deleteSelection = (state, dispatch) => {
        if (state.selection.empty)
            return false;
        if (dispatch)
            dispatch(state.tr.deleteSelection().scrollIntoView());
        return true;
    };
    function atBlockStart(state, view) {
        let { $cursor } = state.selection;
        if (!$cursor || (view ? !view.endOfTextblock("backward", state)
            : $cursor.parentOffset > 0))
            return null;
        return $cursor;
    }
    /**
    If the selection is empty and at the start of a textblock, try to
    reduce the distance between that block and the one before it—if
    there's a block directly before it that can be joined, join them.
    If not, try to move the selected block closer to the next one in
    the document structure by lifting it out of its parent or moving it
    into a parent of the previous block. Will use the view for accurate
    (bidi-aware) start-of-textblock detection if given.
    */
    const joinBackward = (state, dispatch, view) => {
        let $cursor = atBlockStart(state, view);
        if (!$cursor)
            return false;
        let $cut = findCutBefore($cursor);
        // If there is no node before this, try to lift
        if (!$cut) {
            let range = $cursor.blockRange(), target = range && liftTarget(range);
            if (target == null)
                return false;
            if (dispatch)
                dispatch(state.tr.lift(range, target).scrollIntoView());
            return true;
        }
        let before = $cut.nodeBefore;
        // Apply the joining algorithm
        if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))
            return true;
        // If the node below has no content and the node above is
        // selectable, delete the node below and select the one above.
        if ($cursor.parent.content.size == 0 &&
            (textblockAt(before, "end") || NodeSelection.isSelectable(before))) {
            let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
            if (delStep && delStep.slice.size < delStep.to - delStep.from) {
                if (dispatch) {
                    let tr = state.tr.step(delStep);
                    tr.setSelection(textblockAt(before, "end") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)
                        : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize));
                    dispatch(tr.scrollIntoView());
                }
                return true;
            }
        }
        // If the node before is an atom, delete it
        if (before.isAtom && $cut.depth == $cursor.depth - 1) {
            if (dispatch)
                dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());
            return true;
        }
        return false;
    };
    function textblockAt(node, side, only = false) {
        for (let scan = node; scan; scan = (side == "start" ? scan.firstChild : scan.lastChild)) {
            if (scan.isTextblock)
                return true;
            if (only && scan.childCount != 1)
                return false;
        }
        return false;
    }
    /**
    When the selection is empty and at the start of a textblock, select
    the node before that textblock, if possible. This is intended to be
    bound to keys like backspace, after
    [`joinBackward`](https://prosemirror.net/docs/ref/#commands.joinBackward) or other deleting
    commands, as a fall-back behavior when the schema doesn't allow
    deletion at the selected point.
    */
    const selectNodeBackward = (state, dispatch, view) => {
        let { $head, empty } = state.selection, $cut = $head;
        if (!empty)
            return false;
        if ($head.parent.isTextblock) {
            if (view ? !view.endOfTextblock("backward", state) : $head.parentOffset > 0)
                return false;
            $cut = findCutBefore($head);
        }
        let node = $cut && $cut.nodeBefore;
        if (!node || !NodeSelection.isSelectable(node))
            return false;
        if (dispatch)
            dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView());
        return true;
    };
    function findCutBefore($pos) {
        if (!$pos.parent.type.spec.isolating)
            for (let i = $pos.depth - 1; i >= 0; i--) {
                if ($pos.index(i) > 0)
                    return $pos.doc.resolve($pos.before(i + 1));
                if ($pos.node(i).type.spec.isolating)
                    break;
            }
        return null;
    }
    function atBlockEnd(state, view) {
        let { $cursor } = state.selection;
        if (!$cursor || (view ? !view.endOfTextblock("forward", state)
            : $cursor.parentOffset < $cursor.parent.content.size))
            return null;
        return $cursor;
    }
    /**
    If the selection is empty and the cursor is at the end of a
    textblock, try to reduce or remove the boundary between that block
    and the one after it, either by joining them or by moving the other
    block closer to this one in the tree structure. Will use the view
    for accurate start-of-textblock detection if given.
    */
    const joinForward = (state, dispatch, view) => {
        let $cursor = atBlockEnd(state, view);
        if (!$cursor)
            return false;
        let $cut = findCutAfter($cursor);
        // If there is no node after this, there's nothing to do
        if (!$cut)
            return false;
        let after = $cut.nodeAfter;
        // Try the joining algorithm
        if (deleteBarrier(state, $cut, dispatch))
            return true;
        // If the node above has no content and the node below is
        // selectable, delete the node above and select the one below.
        if ($cursor.parent.content.size == 0 &&
            (textblockAt(after, "start") || NodeSelection.isSelectable(after))) {
            let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
            if (delStep && delStep.slice.size < delStep.to - delStep.from) {
                if (dispatch) {
                    let tr = state.tr.step(delStep);
                    tr.setSelection(textblockAt(after, "start") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)
                        : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)));
                    dispatch(tr.scrollIntoView());
                }
                return true;
            }
        }
        // If the next node is an atom, delete it
        if (after.isAtom && $cut.depth == $cursor.depth - 1) {
            if (dispatch)
                dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());
            return true;
        }
        return false;
    };
    /**
    When the selection is empty and at the end of a textblock, select
    the node coming after that textblock, if possible. This is intended
    to be bound to keys like delete, after
    [`joinForward`](https://prosemirror.net/docs/ref/#commands.joinForward) and similar deleting
    commands, to provide a fall-back behavior when the schema doesn't
    allow deletion at the selected point.
    */
    const selectNodeForward = (state, dispatch, view) => {
        let { $head, empty } = state.selection, $cut = $head;
        if (!empty)
            return false;
        if ($head.parent.isTextblock) {
            if (view ? !view.endOfTextblock("forward", state) : $head.parentOffset < $head.parent.content.size)
                return false;
            $cut = findCutAfter($head);
        }
        let node = $cut && $cut.nodeAfter;
        if (!node || !NodeSelection.isSelectable(node))
            return false;
        if (dispatch)
            dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());
        return true;
    };
    function findCutAfter($pos) {
        if (!$pos.parent.type.spec.isolating)
            for (let i = $pos.depth - 1; i >= 0; i--) {
                let parent = $pos.node(i);
                if ($pos.index(i) + 1 < parent.childCount)
                    return $pos.doc.resolve($pos.after(i + 1));
                if (parent.type.spec.isolating)
                    break;
            }
        return null;
    }
    /**
    Join the selected block or, if there is a text selection, the
    closest ancestor block of the selection that can be joined, with
    the sibling above it.
    */
    const joinUp = (state, dispatch) => {
        let sel = state.selection, nodeSel = sel instanceof NodeSelection, point;
        if (nodeSel) {
            if (sel.node.isTextblock || !canJoin(state.doc, sel.from))
                return false;
            point = sel.from;
        }
        else {
            point = joinPoint(state.doc, sel.from, -1);
            if (point == null)
                return false;
        }
        if (dispatch) {
            let tr = state.tr.join(point);
            if (nodeSel)
                tr.setSelection(NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize));
            dispatch(tr.scrollIntoView());
        }
        return true;
    };
    /**
    Join the selected block, or the closest ancestor of the selection
    that can be joined, with the sibling after it.
    */
    const joinDown = (state, dispatch) => {
        let sel = state.selection, point;
        if (sel instanceof NodeSelection) {
            if (sel.node.isTextblock || !canJoin(state.doc, sel.to))
                return false;
            point = sel.to;
        }
        else {
            point = joinPoint(state.doc, sel.to, 1);
            if (point == null)
                return false;
        }
        if (dispatch)
            dispatch(state.tr.join(point).scrollIntoView());
        return true;
    };
    /**
    Lift the selected block, or the closest ancestor block of the
    selection that can be lifted, out of its parent node.
    */
    const lift$1 = (state, dispatch) => {
        let { $from, $to } = state.selection;
        let range = $from.blockRange($to), target = range && liftTarget(range);
        if (target == null)
            return false;
        if (dispatch)
            dispatch(state.tr.lift(range, target).scrollIntoView());
        return true;
    };
    /**
    If the selection is in a node whose type has a truthy
    [`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, replace the
    selection with a newline character.
    */
    const newlineInCode = (state, dispatch) => {
        let { $head, $anchor } = state.selection;
        if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
            return false;
        if (dispatch)
            dispatch(state.tr.insertText("\n").scrollIntoView());
        return true;
    };
    function defaultBlockAt(match) {
        for (let i = 0; i < match.edgeCount; i++) {
            let { type } = match.edge(i);
            if (type.isTextblock && !type.hasRequiredAttrs())
                return type;
        }
        return null;
    }
    /**
    When the selection is in a node with a truthy
    [`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, create a
    default block after the code block, and move the cursor there.
    */
    const exitCode = (state, dispatch) => {
        let { $head, $anchor } = state.selection;
        if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
            return false;
        let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after));
        if (!type || !above.canReplaceWith(after, after, type))
            return false;
        if (dispatch) {
            let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill());
            tr.setSelection(Selection.near(tr.doc.resolve(pos), 1));
            dispatch(tr.scrollIntoView());
        }
        return true;
    };
    /**
    If a block node is selected, create an empty paragraph before (if
    it is its parent's first child) or after it.
    */
    const createParagraphNear = (state, dispatch) => {
        let sel = state.selection, { $from, $to } = sel;
        if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent)
            return false;
        let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()));
        if (!type || !type.isTextblock)
            return false;
        if (dispatch) {
            let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;
            let tr = state.tr.insert(side, type.createAndFill());
            tr.setSelection(TextSelection.create(tr.doc, side + 1));
            dispatch(tr.scrollIntoView());
        }
        return true;
    };
    /**
    If the cursor is in an empty textblock that can be lifted, lift the
    block.
    */
    const liftEmptyBlock = (state, dispatch) => {
        let { $cursor } = state.selection;
        if (!$cursor || $cursor.parent.content.size)
            return false;
        if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {
            let before = $cursor.before();
            if (canSplit(state.doc, before)) {
                if (dispatch)
                    dispatch(state.tr.split(before).scrollIntoView());
                return true;
            }
        }
        let range = $cursor.blockRange(), target = range && liftTarget(range);
        if (target == null)
            return false;
        if (dispatch)
            dispatch(state.tr.lift(range, target).scrollIntoView());
        return true;
    };
    /**
    Create a variant of [`splitBlock`](https://prosemirror.net/docs/ref/#commands.splitBlock) that uses
    a custom function to determine the type of the newly split off block.
    */
    function splitBlockAs(splitNode) {
        return (state, dispatch) => {
            let { $from, $to } = state.selection;
            if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {
                if (!$from.parentOffset || !canSplit(state.doc, $from.pos))
                    return false;
                if (dispatch)
                    dispatch(state.tr.split($from.pos).scrollIntoView());
                return true;
            }
            if (!$from.parent.isBlock)
                return false;
            if (dispatch) {
                let atEnd = $to.parentOffset == $to.parent.content.size;
                let tr = state.tr;
                if (state.selection instanceof TextSelection || state.selection instanceof AllSelection)
                    tr.deleteSelection();
                let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));
                let splitType = splitNode && splitNode($to.parent, atEnd);
                let types = splitType ? [splitType] : atEnd && deflt ? [{ type: deflt }] : undefined;
                let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);
                if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)) {
                    if (deflt)
                        types = [{ type: deflt }];
                    can = true;
                }
                if (can) {
                    tr.split(tr.mapping.map($from.pos), 1, types);
                    if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {
                        let first = tr.mapping.map($from.before()), $first = tr.doc.resolve(first);
                        if (deflt && $from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt))
                            tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);
                    }
                }
                dispatch(tr.scrollIntoView());
            }
            return true;
        };
    }
    /**
    Split the parent block of the selection. If the selection is a text
    selection, also delete its content.
    */
    const splitBlock = splitBlockAs();
    /**
    Move the selection to the node wrapping the current selection, if
    any. (Will not select the document node.)
    */
    const selectParentNode = (state, dispatch) => {
        let { $from, to } = state.selection, pos;
        let same = $from.sharedDepth(to);
        if (same == 0)
            return false;
        pos = $from.before(same);
        if (dispatch)
            dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)));
        return true;
    };
    /**
    Select the whole document.
    */
    const selectAll = (state, dispatch) => {
        if (dispatch)
            dispatch(state.tr.setSelection(new AllSelection(state.doc)));
        return true;
    };
    function joinMaybeClear(state, $pos, dispatch) {
        let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index();
        if (!before || !after || !before.type.compatibleContent(after.type))
            return false;
        if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {
            if (dispatch)
                dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());
            return true;
        }
        if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))
            return false;
        if (dispatch)
            dispatch(state.tr
                .clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount))
                .join($pos.pos)
                .scrollIntoView());
        return true;
    }
    function deleteBarrier(state, $cut, dispatch) {
        let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match;
        if (before.type.spec.isolating || after.type.spec.isolating)
            return false;
        if (joinMaybeClear(state, $cut, dispatch))
            return true;
        let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1);
        if (canDelAfter &&
            (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&
            match.matchType(conn[0] || after.type).validEnd) {
            if (dispatch) {
                let end = $cut.pos + after.nodeSize, wrap = Fragment.empty;
                for (let i = conn.length - 1; i >= 0; i--)
                    wrap = Fragment.from(conn[i].create(null, wrap));
                wrap = Fragment.from(before.copy(wrap));
                let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap, 1, 0), conn.length, true));
                let joinAt = end + 2 * conn.length;
                if (canJoin(tr.doc, joinAt))
                    tr.join(joinAt);
                dispatch(tr.scrollIntoView());
            }
            return true;
        }
        let selAfter = Selection.findFrom($cut, 1);
        let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range);
        if (target != null && target >= $cut.depth) {
            if (dispatch)
                dispatch(state.tr.lift(range, target).scrollIntoView());
            return true;
        }
        if (canDelAfter && textblockAt(after, "start", true) && textblockAt(before, "end")) {
            let at = before, wrap = [];
            for (;;) {
                wrap.push(at);
                if (at.isTextblock)
                    break;
                at = at.lastChild;
            }
            let afterText = after, afterDepth = 1;
            for (; !afterText.isTextblock; afterText = afterText.firstChild)
                afterDepth++;
            if (at.canReplace(at.childCount, at.childCount, afterText.content)) {
                if (dispatch) {
                    let end = Fragment.empty;
                    for (let i = wrap.length - 1; i >= 0; i--)
                        end = Fragment.from(wrap[i].copy(end));
                    let tr = state.tr.step(new ReplaceAroundStep($cut.pos - wrap.length, $cut.pos + after.nodeSize, $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth, new Slice(end, wrap.length, 0), 0, true));
                    dispatch(tr.scrollIntoView());
                }
                return true;
            }
        }
        return false;
    }
    function selectTextblockSide(side) {
        return function (state, dispatch) {
            let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to;
            let depth = $pos.depth;
            while ($pos.node(depth).isInline) {
                if (!depth)
                    return false;
                depth--;
            }
            if (!$pos.node(depth).isTextblock)
                return false;
            if (dispatch)
                dispatch(state.tr.setSelection(TextSelection.create(state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))));
            return true;
        };
    }
    /**
    Moves the cursor to the start of current text block.
    */
    const selectTextblockStart = selectTextblockSide(-1);
    /**
    Moves the cursor to the end of current text block.
    */
    const selectTextblockEnd = selectTextblockSide(1);
    // Parameterized commands
    /**
    Wrap the selection in a node of the given type with the given
    attributes.
    */
    function wrapIn(nodeType, attrs = null) {
        return function (state, dispatch) {
            let { $from, $to } = state.selection;
            let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs);
            if (!wrapping)
                return false;
            if (dispatch)
                dispatch(state.tr.wrap(range, wrapping).scrollIntoView());
            return true;
        };
    }
    /**
    Returns a command that tries to set the selected textblocks to the
    given node type with the given attributes.
    */
    function setBlockType$1(nodeType, attrs = null) {
        return function (state, dispatch) {
            let applicable = false;
            for (let i = 0; i < state.selection.ranges.length && !applicable; i++) {
                let { $from: { pos: from }, $to: { pos: to } } = state.selection.ranges[i];
                state.doc.nodesBetween(from, to, (node, pos) => {
                    if (applicable)
                        return false;
                    if (!node.isTextblock || node.hasMarkup(nodeType, attrs))
                        return;
                    if (node.type == nodeType) {
                        applicable = true;
                    }
                    else {
                        let $pos = state.doc.resolve(pos), index = $pos.index();
                        applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);
                    }
                });
            }
            if (!applicable)
                return false;
            if (dispatch) {
                let tr = state.tr;
                for (let i = 0; i < state.selection.ranges.length; i++) {
                    let { $from: { pos: from }, $to: { pos: to } } = state.selection.ranges[i];
                    tr.setBlockType(from, to, nodeType, attrs);
                }
                dispatch(tr.scrollIntoView());
            }
            return true;
        };
    }
    function markApplies(doc, ranges, type) {
        for (let i = 0; i < ranges.length; i++) {
            let { $from, $to } = ranges[i];
            let can = $from.depth == 0 ? doc.inlineContent && doc.type.allowsMarkType(type) : false;
            doc.nodesBetween($from.pos, $to.pos, node => {
                if (can)
                    return false;
                can = node.inlineContent && node.type.allowsMarkType(type);
            });
            if (can)
                return true;
        }
        return false;
    }
    /**
    Create a command function that toggles the given mark with the
    given attributes. Will return `false` when the current selection
    doesn't support that mark. This will remove the mark if any marks
    of that type exist in the selection, or add it otherwise. If the
    selection is empty, this applies to the [stored
    marks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks) instead of a range of the
    document.
    */
    function toggleMark(markType, attrs = null) {
        return function (state, dispatch) {
            let { empty, $cursor, ranges } = state.selection;
            if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType))
                return false;
            if (dispatch) {
                if ($cursor) {
                    if (markType.isInSet(state.storedMarks || $cursor.marks()))
                        dispatch(state.tr.removeStoredMark(markType));
                    else
                        dispatch(state.tr.addStoredMark(markType.create(attrs)));
                }
                else {
                    let has = false, tr = state.tr;
                    for (let i = 0; !has && i < ranges.length; i++) {
                        let { $from, $to } = ranges[i];
                        has = state.doc.rangeHasMark($from.pos, $to.pos, markType);
                    }
                    for (let i = 0; i < ranges.length; i++) {
                        let { $from, $to } = ranges[i];
                        if (has) {
                            tr.removeMark($from.pos, $to.pos, markType);
                        }
                        else {
                            let from = $from.pos, to = $to.pos, start = $from.nodeAfter, end = $to.nodeBefore;
                            let spaceStart = start && start.isText ? /^\s*/.exec(start.text)[0].length : 0;
                            let spaceEnd = end && end.isText ? /\s*$/.exec(end.text)[0].length : 0;
                            if (from + spaceStart < to) {
                                from += spaceStart;
                                to -= spaceEnd;
                            }
                            tr.addMark(from, to, markType.create(attrs));
                        }
                    }
                    dispatch(tr.scrollIntoView());
                }
            }
            return true;
        };
    }
    /**
    Combine a number of command functions into a single function (which
    calls them one by one until one returns true).
    */
    function chainCommands(...commands) {
        return function (state, dispatch, view) {
            for (let i = 0; i < commands.length; i++)
                if (commands[i](state, dispatch, view))
                    return true;
            return false;
        };
    }
    let backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward);
    let del = chainCommands(deleteSelection, joinForward, selectNodeForward);
    /**
    A basic keymap containing bindings not specific to any schema.
    Binds the following keys (when multiple commands are listed, they
    are chained with [`chainCommands`](https://prosemirror.net/docs/ref/#commands.chainCommands)):

    * **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`
    * **Mod-Enter** to `exitCode`
    * **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`
    * **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`
    * **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`
    * **Mod-a** to `selectAll`
    */
    const pcBaseKeymap = {
        "Enter": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),
        "Mod-Enter": exitCode,
        "Backspace": backspace,
        "Mod-Backspace": backspace,
        "Shift-Backspace": backspace,
        "Delete": del,
        "Mod-Delete": del,
        "Mod-a": selectAll
    };
    /**
    A copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,
    **Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and
    **Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like
    Ctrl-Delete.
    */
    const macBaseKeymap = {
        "Ctrl-h": pcBaseKeymap["Backspace"],
        "Alt-Backspace": pcBaseKeymap["Mod-Backspace"],
        "Ctrl-d": pcBaseKeymap["Delete"],
        "Ctrl-Alt-Backspace": pcBaseKeymap["Mod-Delete"],
        "Alt-Delete": pcBaseKeymap["Mod-Delete"],
        "Alt-d": pcBaseKeymap["Mod-Delete"],
        "Ctrl-a": selectTextblockStart,
        "Ctrl-e": selectTextblockEnd
    };
    for (let key in pcBaseKeymap)
        macBaseKeymap[key] = pcBaseKeymap[key];
    const mac$4 = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform)
        // @ts-ignore
        : typeof os != "undefined" && os.platform ? os.platform() == "darwin" : false;
    /**
    Depending on the detected platform, this will hold
    [`pcBasekeymap`](https://prosemirror.net/docs/ref/#commands.pcBaseKeymap) or
    [`macBaseKeymap`](https://prosemirror.net/docs/ref/#commands.macBaseKeymap).
    */
    const baseKeymap = mac$4 ? macBaseKeymap : pcBaseKeymap;

    /**
    Create a plugin that, when added to a ProseMirror instance,
    causes a decoration to show up at the drop position when something
    is dragged over the editor.

    Nodes may add a `disableDropCursor` property to their spec to
    control the showing of a drop cursor inside them. This may be a
    boolean or a function, which will be called with a view and a
    position, and should return a boolean.
    */
    function dropCursor(options = {}) {
        return new Plugin({
            view(editorView) { return new DropCursorView(editorView, options); }
        });
    }
    class DropCursorView {
        constructor(editorView, options) {
            this.editorView = editorView;
            this.cursorPos = null;
            this.element = null;
            this.timeout = -1;
            this.width = options.width || 1;
            this.color = options.color || "black";
            this.class = options.class;
            this.handlers = ["dragover", "dragend", "drop", "dragleave"].map(name => {
                let handler = (e) => { this[name](e); };
                editorView.dom.addEventListener(name, handler);
                return { name, handler };
            });
        }
        destroy() {
            this.handlers.forEach(({ name, handler }) => this.editorView.dom.removeEventListener(name, handler));
        }
        update(editorView, prevState) {
            if (this.cursorPos != null && prevState.doc != editorView.state.doc) {
                if (this.cursorPos > editorView.state.doc.content.size)
                    this.setCursor(null);
                else
                    this.updateOverlay();
            }
        }
        setCursor(pos) {
            if (pos == this.cursorPos)
                return;
            this.cursorPos = pos;
            if (pos == null) {
                this.element.parentNode.removeChild(this.element);
                this.element = null;
            }
            else {
                this.updateOverlay();
            }
        }
        updateOverlay() {
            let $pos = this.editorView.state.doc.resolve(this.cursorPos);
            let isBlock = !$pos.parent.inlineContent, rect;
            if (isBlock) {
                let before = $pos.nodeBefore, after = $pos.nodeAfter;
                if (before || after) {
                    let node = this.editorView.nodeDOM(this.cursorPos - (before ? before.nodeSize : 0));
                    if (node) {
                        let nodeRect = node.getBoundingClientRect();
                        let top = before ? nodeRect.bottom : nodeRect.top;
                        if (before && after)
                            top = (top + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2;
                        rect = { left: nodeRect.left, right: nodeRect.right, top: top - this.width / 2, bottom: top + this.width / 2 };
                    }
                }
            }
            if (!rect) {
                let coords = this.editorView.coordsAtPos(this.cursorPos);
                rect = { left: coords.left - this.width / 2, right: coords.left + this.width / 2, top: coords.top, bottom: coords.bottom };
            }
            let parent = this.editorView.dom.offsetParent;
            if (!this.element) {
                this.element = parent.appendChild(document.createElement("div"));
                if (this.class)
                    this.element.className = this.class;
                this.element.style.cssText = "position: absolute; z-index: 50; pointer-events: none; background-color: " + this.color;
            }
            this.element.classList.toggle("prosemirror-dropcursor-block", isBlock);
            this.element.classList.toggle("prosemirror-dropcursor-inline", !isBlock);
            let parentLeft, parentTop;
            if (!parent || parent == document.body && getComputedStyle(parent).position == "static") {
                parentLeft = -pageXOffset;
                parentTop = -pageYOffset;
            }
            else {
                let rect = parent.getBoundingClientRect();
                parentLeft = rect.left - parent.scrollLeft;
                parentTop = rect.top - parent.scrollTop;
            }
            this.element.style.left = (rect.left - parentLeft) + "px";
            this.element.style.top = (rect.top - parentTop) + "px";
            this.element.style.width = (rect.right - rect.left) + "px";
            this.element.style.height = (rect.bottom - rect.top) + "px";
        }
        scheduleRemoval(timeout) {
            clearTimeout(this.timeout);
            this.timeout = setTimeout(() => this.setCursor(null), timeout);
        }
        dragover(event) {
            if (!this.editorView.editable)
                return;
            let pos = this.editorView.posAtCoords({ left: event.clientX, top: event.clientY });
            let node = pos && pos.inside >= 0 && this.editorView.state.doc.nodeAt(pos.inside);
            let disableDropCursor = node && node.type.spec.disableDropCursor;
            let disabled = typeof disableDropCursor == "function" ? disableDropCursor(this.editorView, pos, event) : disableDropCursor;
            if (pos && !disabled) {
                let target = pos.pos;
                if (this.editorView.dragging && this.editorView.dragging.slice) {
                    let point = dropPoint(this.editorView.state.doc, target, this.editorView.dragging.slice);
                    if (point != null)
                        target = point;
                }
                this.setCursor(target);
                this.scheduleRemoval(5000);
            }
        }
        dragend() {
            this.scheduleRemoval(20);
        }
        drop() {
            this.scheduleRemoval(20);
        }
        dragleave(event) {
            if (event.target == this.editorView.dom || !this.editorView.dom.contains(event.relatedTarget))
                this.setCursor(null);
        }
    }

    /**
    Gap cursor selections are represented using this class. Its
    `$anchor` and `$head` properties both point at the cursor position.
    */
    class GapCursor extends Selection {
        /**
        Create a gap cursor.
        */
        constructor($pos) {
            super($pos, $pos);
        }
        map(doc, mapping) {
            let $pos = doc.resolve(mapping.map(this.head));
            return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
        }
        content() { return Slice.empty; }
        eq(other) {
            return other instanceof GapCursor && other.head == this.head;
        }
        toJSON() {
            return { type: "gapcursor", pos: this.head };
        }
        /**
        @internal
        */
        static fromJSON(doc, json) {
            if (typeof json.pos != "number")
                throw new RangeError("Invalid input for GapCursor.fromJSON");
            return new GapCursor(doc.resolve(json.pos));
        }
        /**
        @internal
        */
        getBookmark() { return new GapBookmark(this.anchor); }
        /**
        @internal
        */
        static valid($pos) {
            let parent = $pos.parent;
            if (parent.isTextblock || !closedBefore($pos) || !closedAfter($pos))
                return false;
            let override = parent.type.spec.allowGapCursor;
            if (override != null)
                return override;
            let deflt = parent.contentMatchAt($pos.index()).defaultType;
            return deflt && deflt.isTextblock;
        }
        /**
        @internal
        */
        static findGapCursorFrom($pos, dir, mustMove = false) {
            search: for (;;) {
                if (!mustMove && GapCursor.valid($pos))
                    return $pos;
                let pos = $pos.pos, next = null;
                // Scan up from this position
                for (let d = $pos.depth;; d--) {
                    let parent = $pos.node(d);
                    if (dir > 0 ? $pos.indexAfter(d) < parent.childCount : $pos.index(d) > 0) {
                        next = parent.child(dir > 0 ? $pos.indexAfter(d) : $pos.index(d) - 1);
                        break;
                    }
                    else if (d == 0) {
                        return null;
                    }
                    pos += dir;
                    let $cur = $pos.doc.resolve(pos);
                    if (GapCursor.valid($cur))
                        return $cur;
                }
                // And then down into the next node
                for (;;) {
                    let inside = dir > 0 ? next.firstChild : next.lastChild;
                    if (!inside) {
                        if (next.isAtom && !next.isText && !NodeSelection.isSelectable(next)) {
                            $pos = $pos.doc.resolve(pos + next.nodeSize * dir);
                            mustMove = false;
                            continue search;
                        }
                        break;
                    }
                    next = inside;
                    pos += dir;
                    let $cur = $pos.doc.resolve(pos);
                    if (GapCursor.valid($cur))
                        return $cur;
                }
                return null;
            }
        }
    }
    GapCursor.prototype.visible = false;
    GapCursor.findFrom = GapCursor.findGapCursorFrom;
    Selection.jsonID("gapcursor", GapCursor);
    class GapBookmark {
        constructor(pos) {
            this.pos = pos;
        }
        map(mapping) {
            return new GapBookmark(mapping.map(this.pos));
        }
        resolve(doc) {
            let $pos = doc.resolve(this.pos);
            return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
        }
    }
    function closedBefore($pos) {
        for (let d = $pos.depth; d >= 0; d--) {
            let index = $pos.index(d), parent = $pos.node(d);
            // At the start of this parent, look at next one
            if (index == 0) {
                if (parent.type.spec.isolating)
                    return true;
                continue;
            }
            // See if the node before (or its first ancestor) is closed
            for (let before = parent.child(index - 1);; before = before.lastChild) {
                if ((before.childCount == 0 && !before.inlineContent) || before.isAtom || before.type.spec.isolating)
                    return true;
                if (before.inlineContent)
                    return false;
            }
        }
        // Hit start of document
        return true;
    }
    function closedAfter($pos) {
        for (let d = $pos.depth; d >= 0; d--) {
            let index = $pos.indexAfter(d), parent = $pos.node(d);
            if (index == parent.childCount) {
                if (parent.type.spec.isolating)
                    return true;
                continue;
            }
            for (let after = parent.child(index);; after = after.firstChild) {
                if ((after.childCount == 0 && !after.inlineContent) || after.isAtom || after.type.spec.isolating)
                    return true;
                if (after.inlineContent)
                    return false;
            }
        }
        return true;
    }

    /**
    Create a gap cursor plugin. When enabled, this will capture clicks
    near and arrow-key-motion past places that don't have a normally
    selectable position nearby, and create a gap cursor selection for
    them. The cursor is drawn as an element with class
    `ProseMirror-gapcursor`. You can either include
    `style/gapcursor.css` from the package's directory or add your own
    styles to make it visible.
    */
    function gapCursor() {
        return new Plugin({
            props: {
                decorations: drawGapCursor,
                createSelectionBetween(_view, $anchor, $head) {
                    return $anchor.pos == $head.pos && GapCursor.valid($head) ? new GapCursor($head) : null;
                },
                handleClick,
                handleKeyDown,
                handleDOMEvents: { beforeinput: beforeinput }
            }
        });
    }
    const handleKeyDown = keydownHandler({
        "ArrowLeft": arrow("horiz", -1),
        "ArrowRight": arrow("horiz", 1),
        "ArrowUp": arrow("vert", -1),
        "ArrowDown": arrow("vert", 1)
    });
    function arrow(axis, dir) {
        const dirStr = axis == "vert" ? (dir > 0 ? "down" : "up") : (dir > 0 ? "right" : "left");
        return function (state, dispatch, view) {
            let sel = state.selection;
            let $start = dir > 0 ? sel.$to : sel.$from, mustMove = sel.empty;
            if (sel instanceof TextSelection) {
                if (!view.endOfTextblock(dirStr) || $start.depth == 0)
                    return false;
                mustMove = false;
                $start = state.doc.resolve(dir > 0 ? $start.after() : $start.before());
            }
            let $found = GapCursor.findGapCursorFrom($start, dir, mustMove);
            if (!$found)
                return false;
            if (dispatch)
                dispatch(state.tr.setSelection(new GapCursor($found)));
            return true;
        };
    }
    function handleClick(view, pos, event) {
        if (!view || !view.editable)
            return false;
        let $pos = view.state.doc.resolve(pos);
        if (!GapCursor.valid($pos))
            return false;
        let clickPos = view.posAtCoords({ left: event.clientX, top: event.clientY });
        if (clickPos && clickPos.inside > -1 && NodeSelection.isSelectable(view.state.doc.nodeAt(clickPos.inside)))
            return false;
        view.dispatch(view.state.tr.setSelection(new GapCursor($pos)));
        return true;
    }
    // This is a hack that, when a composition starts while a gap cursor
    // is active, quickly creates an inline context for the composition to
    // happen in, to avoid it being aborted by the DOM selection being
    // moved into a valid position.
    function beforeinput(view, event) {
        if (event.inputType != "insertCompositionText" || !(view.state.selection instanceof GapCursor))
            return false;
        let { $from } = view.state.selection;
        let insert = $from.parent.contentMatchAt($from.index()).findWrapping(view.state.schema.nodes.text);
        if (!insert)
            return false;
        let frag = Fragment.empty;
        for (let i = insert.length - 1; i >= 0; i--)
            frag = Fragment.from(insert[i].createAndFill(null, frag));
        let tr = view.state.tr.replace($from.pos, $from.pos, new Slice(frag, 0, 0));
        tr.setSelection(TextSelection.near(tr.doc.resolve($from.pos + 1)));
        view.dispatch(tr);
        return false;
    }
    function drawGapCursor(state) {
        if (!(state.selection instanceof GapCursor))
            return null;
        let node = document.createElement("div");
        node.className = "ProseMirror-gapcursor";
        return DecorationSet.create(state.doc, [Decoration.widget(state.selection.head, node, { key: "gapcursor" })]);
    }

    function crelt() {
      var elt = arguments[0];
      if (typeof elt == "string") elt = document.createElement(elt);
      var i = 1, next = arguments[1];
      if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
        for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
          var value = next[name];
          if (typeof value == "string") elt.setAttribute(name, value);
          else if (value != null) elt[name] = value;
        }
        i++;
      }
      for (; i < arguments.length; i++) add$1(elt, arguments[i]);
      return elt
    }

    function add$1(elt, child) {
      if (typeof child == "string") {
        elt.appendChild(document.createTextNode(child));
      } else if (child == null) {
      } else if (child.nodeType != null) {
        elt.appendChild(child);
      } else if (Array.isArray(child)) {
        for (var i = 0; i < child.length; i++) add$1(elt, child[i]);
      } else {
        throw new RangeError("Unsupported child node: " + child)
      }
    }

    const SVG = "http://www.w3.org/2000/svg";
    const XLINK = "http://www.w3.org/1999/xlink";
    const prefix$2 = "ProseMirror-icon";
    function hashPath(path) {
        let hash = 0;
        for (let i = 0; i < path.length; i++)
            hash = (((hash << 5) - hash) + path.charCodeAt(i)) | 0;
        return hash;
    }
    function getIcon(icon) {
        let node = document.createElement("div");
        node.className = prefix$2;
        if (icon.path) {
            let { path, width, height } = icon;
            let name = "pm-icon-" + hashPath(path).toString(16);
            if (!document.getElementById(name))
                buildSVG(name, icon);
            let svg = node.appendChild(document.createElementNS(SVG, "svg"));
            svg.style.width = (width / height) + "em";
            let use = svg.appendChild(document.createElementNS(SVG, "use"));
            use.setAttributeNS(XLINK, "href", /([^#]*)/.exec(document.location.toString())[1] + "#" + name);
        }
        else if (icon.dom) {
            node.appendChild(icon.dom.cloneNode(true));
        }
        else {
            let { text, css } = icon;
            node.appendChild(document.createElement("span")).textContent = text || '';
            if (css)
                node.firstChild.style.cssText = css;
        }
        return node;
    }
    function buildSVG(name, data) {
        let collection = document.getElementById(prefix$2 + "-collection");
        if (!collection) {
            collection = document.createElementNS(SVG, "svg");
            collection.id = prefix$2 + "-collection";
            collection.style.display = "none";
            document.body.insertBefore(collection, document.body.firstChild);
        }
        let sym = document.createElementNS(SVG, "symbol");
        sym.id = name;
        sym.setAttribute("viewBox", "0 0 " + data.width + " " + data.height);
        let path = sym.appendChild(document.createElementNS(SVG, "path"));
        path.setAttribute("d", data.path);
        collection.appendChild(sym);
    }

    const prefix$1 = "ProseMirror-menu";
    /**
    An icon or label that, when clicked, executes a command.
    */
    class MenuItem {
        /**
        Create a menu item.
        */
        constructor(
        /**
        The spec used to create this item.
        */
        spec) {
            this.spec = spec;
        }
        /**
        Renders the icon according to its [display
        spec](https://prosemirror.net/docs/ref/#menu.MenuItemSpec.display), and adds an event handler which
        executes the command when the representation is clicked.
        */
        render(view) {
            let spec = this.spec;
            let dom = spec.render ? spec.render(view)
                : spec.icon ? getIcon(spec.icon)
                    : spec.label ? crelt("div", null, translate(view, spec.label))
                        : null;
            if (!dom)
                throw new RangeError("MenuItem without icon or label property");
            if (spec.title) {
                const title = (typeof spec.title === "function" ? spec.title(view.state) : spec.title);
                dom.setAttribute("title", translate(view, title));
            }
            if (spec.class)
                dom.classList.add(spec.class);
            if (spec.css)
                dom.style.cssText += spec.css;
            dom.addEventListener("mousedown", e => {
                e.preventDefault();
                if (!dom.classList.contains(prefix$1 + "-disabled"))
                    spec.run(view.state, view.dispatch, view, e);
            });
            function update(state) {
                if (spec.select) {
                    let selected = spec.select(state);
                    dom.style.display = selected ? "" : "none";
                    if (!selected)
                        return false;
                }
                let enabled = true;
                if (spec.enable) {
                    enabled = spec.enable(state) || false;
                    setClass(dom, prefix$1 + "-disabled", !enabled);
                }
                if (spec.active) {
                    let active = enabled && spec.active(state) || false;
                    setClass(dom, prefix$1 + "-active", active);
                }
                return true;
            }
            return { dom, update };
        }
    }
    function translate(view, text) {
        return view._props.translate ? view._props.translate(text) : text;
    }
    let lastMenuEvent = { time: 0, node: null };
    function markMenuEvent(e) {
        lastMenuEvent.time = Date.now();
        lastMenuEvent.node = e.target;
    }
    function isMenuEvent(wrapper) {
        return Date.now() - 100 < lastMenuEvent.time &&
            lastMenuEvent.node && wrapper.contains(lastMenuEvent.node);
    }
    /**
    A drop-down menu, displayed as a label with a downwards-pointing
    triangle to the right of it.
    */
    class Dropdown {
        /**
        Create a dropdown wrapping the elements.
        */
        constructor(content,
        /**
        @internal
        */
        options = {}) {
            this.options = options;
            this.options = options || {};
            this.content = Array.isArray(content) ? content : [content];
        }
        /**
        Render the dropdown menu and sub-items.
        */
        render(view) {
            let content = renderDropdownItems(this.content, view);
            let label = crelt("div", { class: prefix$1 + "-dropdown " + (this.options.class || ""),
                style: this.options.css }, translate(view, this.options.label || ""));
            if (this.options.title)
                label.setAttribute("title", translate(view, this.options.title));
            let wrap = crelt("div", { class: prefix$1 + "-dropdown-wrap" }, label);
            let open = null;
            let listeningOnClose = null;
            let close = () => {
                if (open && open.close()) {
                    open = null;
                    window.removeEventListener("mousedown", listeningOnClose);
                }
            };
            label.addEventListener("mousedown", e => {
                e.preventDefault();
                markMenuEvent(e);
                if (open) {
                    close();
                }
                else {
                    open = this.expand(wrap, content.dom);
                    window.addEventListener("mousedown", listeningOnClose = () => {
                        if (!isMenuEvent(wrap))
                            close();
                    });
                }
            });
            function update(state) {
                let inner = content.update(state);
                wrap.style.display = inner ? "" : "none";
                return inner;
            }
            return { dom: wrap, update };
        }
        /**
        @internal
        */
        expand(dom, items) {
            let menuDOM = crelt("div", { class: prefix$1 + "-dropdown-menu " + (this.options.class || "") }, items);
            let done = false;
            function close() {
                if (done)
                    return;
                done = true;
                dom.removeChild(menuDOM);
                return true;
            }
            dom.appendChild(menuDOM);
            return { close, node: menuDOM };
        }
    }
    function renderDropdownItems(items, view) {
        let rendered = [], updates = [];
        for (let i = 0; i < items.length; i++) {
            let { dom, update } = items[i].render(view);
            rendered.push(crelt("div", { class: prefix$1 + "-dropdown-item" }, dom));
            updates.push(update);
        }
        return { dom: rendered, update: combineUpdates(updates, rendered) };
    }
    function combineUpdates(updates, nodes) {
        return (state) => {
            let something = false;
            for (let i = 0; i < updates.length; i++) {
                let up = updates[i](state);
                nodes[i].style.display = up ? "" : "none";
                if (up)
                    something = true;
            }
            return something;
        };
    }
    /**
    Represents a submenu wrapping a group of elements that start
    hidden and expand to the right when hovered over or tapped.
    */
    class DropdownSubmenu {
        /**
        Creates a submenu for the given group of menu elements. The
        following options are recognized:
        */
        constructor(content,
        /**
        @internal
        */
        options = {}) {
            this.options = options;
            this.content = Array.isArray(content) ? content : [content];
        }
        /**
        Renders the submenu.
        */
        render(view) {
            let items = renderDropdownItems(this.content, view);
            let label = crelt("div", { class: prefix$1 + "-submenu-label" }, translate(view, this.options.label || ""));
            let wrap = crelt("div", { class: prefix$1 + "-submenu-wrap" }, label, crelt("div", { class: prefix$1 + "-submenu" }, items.dom));
            let listeningOnClose = null;
            label.addEventListener("mousedown", e => {
                e.preventDefault();
                markMenuEvent(e);
                setClass(wrap, prefix$1 + "-submenu-wrap-active", false);
                if (!listeningOnClose)
                    window.addEventListener("mousedown", listeningOnClose = () => {
                        if (!isMenuEvent(wrap)) {
                            wrap.classList.remove(prefix$1 + "-submenu-wrap-active");
                            window.removeEventListener("mousedown", listeningOnClose);
                            listeningOnClose = null;
                        }
                    });
            });
            function update(state) {
                let inner = items.update(state);
                wrap.style.display = inner ? "" : "none";
                return inner;
            }
            return { dom: wrap, update };
        }
    }
    /**
    Render the given, possibly nested, array of menu elements into a
    document fragment, placing separators between them (and ensuring no
    superfluous separators appear when some of the groups turn out to
    be empty).
    */
    function renderGrouped(view, content) {
        let result = document.createDocumentFragment();
        let updates = [], separators = [];
        for (let i = 0; i < content.length; i++) {
            let items = content[i], localUpdates = [], localNodes = [];
            for (let j = 0; j < items.length; j++) {
                let { dom, update } = items[j].render(view);
                let span = crelt("span", { class: prefix$1 + "item" }, dom);
                result.appendChild(span);
                localNodes.push(span);
                localUpdates.push(update);
            }
            if (localUpdates.length) {
                updates.push(combineUpdates(localUpdates, localNodes));
                if (i < content.length - 1)
                    separators.push(result.appendChild(separator()));
            }
        }
        function update(state) {
            let something = false, needSep = false;
            for (let i = 0; i < updates.length; i++) {
                let hasContent = updates[i](state);
                if (i)
                    separators[i - 1].style.display = needSep && hasContent ? "" : "none";
                needSep = hasContent;
                if (hasContent)
                    something = true;
            }
            return something;
        }
        return { dom: result, update };
    }
    function separator() {
        return crelt("span", { class: prefix$1 + "separator" });
    }
    /**
    A set of basic editor-related icons. Contains the properties
    `join`, `lift`, `selectParentNode`, `undo`, `redo`, `strong`, `em`,
    `code`, `link`, `bulletList`, `orderedList`, and `blockquote`, each
    holding an object that can be used as the `icon` option to
    `MenuItem`.
    */
    const icons = {
        join: {
            width: 800, height: 900,
            path: "M0 75h800v125h-800z M0 825h800v-125h-800z M250 400h100v-100h100v100h100v100h-100v100h-100v-100h-100z"
        },
        lift: {
            width: 1024, height: 1024,
            path: "M219 310v329q0 7-5 12t-12 5q-8 0-13-5l-164-164q-5-5-5-13t5-13l164-164q5-5 13-5 7 0 12 5t5 12zM1024 749v109q0 7-5 12t-12 5h-987q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h987q7 0 12 5t5 12zM1024 530v109q0 7-5 12t-12 5h-621q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h621q7 0 12 5t5 12zM1024 310v109q0 7-5 12t-12 5h-621q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h621q7 0 12 5t5 12zM1024 91v109q0 7-5 12t-12 5h-987q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h987q7 0 12 5t5 12z"
        },
        selectParentNode: { text: "\u2b1a", css: "font-weight: bold" },
        undo: {
            width: 1024, height: 1024,
            path: "M761 1024c113-206 132-520-313-509v253l-384-384 384-384v248c534-13 594 472 313 775z"
        },
        redo: {
            width: 1024, height: 1024,
            path: "M576 248v-248l384 384-384 384v-253c-446-10-427 303-313 509-280-303-221-789 313-775z"
        },
        strong: {
            width: 805, height: 1024,
            path: "M317 869q42 18 80 18 214 0 214-191 0-65-23-102-15-25-35-42t-38-26-46-14-48-6-54-1q-41 0-57 5 0 30-0 90t-0 90q0 4-0 38t-0 55 2 47 6 38zM309 442q24 4 62 4 46 0 81-7t62-25 42-51 14-81q0-40-16-70t-45-46-61-24-70-8q-28 0-74 7 0 28 2 86t2 86q0 15-0 45t-0 45q0 26 0 39zM0 950l1-53q8-2 48-9t60-15q4-6 7-15t4-19 3-18 1-21 0-19v-37q0-561-12-585-2-4-12-8t-25-6-28-4-27-2-17-1l-2-47q56-1 194-6t213-5q13 0 39 0t38 0q40 0 78 7t73 24 61 40 42 59 16 78q0 29-9 54t-22 41-36 32-41 25-48 22q88 20 146 76t58 141q0 57-20 102t-53 74-78 48-93 27-100 8q-25 0-75-1t-75-1q-60 0-175 6t-132 6z"
        },
        em: {
            width: 585, height: 1024,
            path: "M0 949l9-48q3-1 46-12t63-21q16-20 23-57 0-4 35-165t65-310 29-169v-14q-13-7-31-10t-39-4-33-3l10-58q18 1 68 3t85 4 68 1q27 0 56-1t69-4 56-3q-2 22-10 50-17 5-58 16t-62 19q-4 10-8 24t-5 22-4 26-3 24q-15 84-50 239t-44 203q-1 5-7 33t-11 51-9 47-3 32l0 10q9 2 105 17-1 25-9 56-6 0-18 0t-18 0q-16 0-49-5t-49-5q-78-1-117-1-29 0-81 5t-69 6z"
        },
        code: {
            width: 896, height: 1024,
            path: "M608 192l-96 96 224 224-224 224 96 96 288-320-288-320zM288 192l-288 320 288 320 96-96-224-224 224-224-96-96z"
        },
        link: {
            width: 951, height: 1024,
            path: "M832 694q0-22-16-38l-118-118q-16-16-38-16-24 0-41 18 1 1 10 10t12 12 8 10 7 14 2 15q0 22-16 38t-38 16q-8 0-15-2t-14-7-10-8-12-12-10-10q-18 17-18 41 0 22 16 38l117 118q15 15 38 15 22 0 38-14l84-83q16-16 16-38zM430 292q0-22-16-38l-117-118q-16-16-38-16-22 0-38 15l-84 83q-16 16-16 38 0 22 16 38l118 118q15 15 38 15 24 0 41-17-1-1-10-10t-12-12-8-10-7-14-2-15q0-22 16-38t38-16q8 0 15 2t14 7 10 8 12 12 10 10q18-17 18-41zM941 694q0 68-48 116l-84 83q-47 47-116 47-69 0-116-48l-117-118q-47-47-47-116 0-70 50-119l-50-50q-49 50-118 50-68 0-116-48l-118-118q-48-48-48-116t48-116l84-83q47-47 116-47 69 0 116 48l117 118q47 47 47 116 0 70-50 119l50 50q49-50 118-50 68 0 116 48l118 118q48 48 48 116z"
        },
        bulletList: {
            width: 768, height: 896,
            path: "M0 512h128v-128h-128v128zM0 256h128v-128h-128v128zM0 768h128v-128h-128v128zM256 512h512v-128h-512v128zM256 256h512v-128h-512v128zM256 768h512v-128h-512v128z"
        },
        orderedList: {
            width: 768, height: 896,
            path: "M320 512h448v-128h-448v128zM320 768h448v-128h-448v128zM320 128v128h448v-128h-448zM79 384h78v-256h-36l-85 23v50l43-2v185zM189 590c0-36-12-78-96-78-33 0-64 6-83 16l1 66c21-10 42-15 67-15s32 11 32 28c0 26-30 58-110 112v50h192v-67l-91 2c49-30 87-66 87-113l1-1z"
        },
        blockquote: {
            width: 640, height: 896,
            path: "M0 448v256h256v-256h-128c0 0 0-128 128-128v-128c0 0-256 0-256 256zM640 320v-128c0 0-256 0-256 256v256h256v-256h-128c0 0 0-128 128-128z"
        }
    };
    /**
    Menu item for the `joinUp` command.
    */
    const joinUpItem = new MenuItem({
        title: "Join with above block",
        run: joinUp,
        select: state => joinUp(state),
        icon: icons.join
    });
    /**
    Menu item for the `lift` command.
    */
    const liftItem = new MenuItem({
        title: "Lift out of enclosing block",
        run: lift$1,
        select: state => lift$1(state),
        icon: icons.lift
    });
    /**
    Menu item for the `selectParentNode` command.
    */
    const selectParentNodeItem = new MenuItem({
        title: "Select parent node",
        run: selectParentNode,
        select: state => selectParentNode(state),
        icon: icons.selectParentNode
    });
    /**
    Menu item for the `undo` command.
    */
    let undoItem = new MenuItem({
        title: "Undo last change",
        run: undo,
        enable: state => undo(state),
        icon: icons.undo
    });
    /**
    Menu item for the `redo` command.
    */
    let redoItem = new MenuItem({
        title: "Redo last undone change",
        run: redo,
        enable: state => redo(state),
        icon: icons.redo
    });
    /**
    Build a menu item for wrapping the selection in a given node type.
    Adds `run` and `select` properties to the ones present in
    `options`. `options.attrs` may be an object that provides
    attributes for the wrapping node.
    */
    function wrapItem(nodeType, options) {
        let passedOptions = {
            run(state, dispatch) {
                return wrapIn(nodeType, options.attrs)(state, dispatch);
            },
            select(state) {
                return wrapIn(nodeType, options.attrs)(state);
            }
        };
        for (let prop in options)
            passedOptions[prop] = options[prop];
        return new MenuItem(passedOptions);
    }
    /**
    Build a menu item for changing the type of the textblock around the
    selection to the given type. Provides `run`, `active`, and `select`
    properties. Others must be given in `options`. `options.attrs` may
    be an object to provide the attributes for the textblock node.
    */
    function blockTypeItem(nodeType, options) {
        let command = setBlockType$1(nodeType, options.attrs);
        let passedOptions = {
            run: command,
            enable(state) { return command(state); },
            active(state) {
                let { $from, to, node } = state.selection;
                if (node)
                    return node.hasMarkup(nodeType, options.attrs);
                return to <= $from.end() && $from.parent.hasMarkup(nodeType, options.attrs);
            }
        };
        for (let prop in options)
            passedOptions[prop] = options[prop];
        return new MenuItem(passedOptions);
    }
    // Work around classList.toggle being broken in IE11
    function setClass(dom, cls, on) {
        if (on)
            dom.classList.add(cls);
        else
            dom.classList.remove(cls);
    }

    const prefix$1$1 = "ProseMirror-menubar";
    function isIOS() {
        if (typeof navigator == "undefined")
            return false;
        let agent = navigator.userAgent;
        return !/Edge\/\d/.test(agent) && /AppleWebKit/.test(agent) && /Mobile\/\w+/.test(agent);
    }
    /**
    A plugin that will place a menu bar above the editor. Note that
    this involves wrapping the editor in an additional `<div>`.
    */
    function menuBar(options) {
        return new Plugin({
            view(editorView) { return new MenuBarView(editorView, options); }
        });
    }
    class MenuBarView {
        constructor(editorView, options) {
            this.editorView = editorView;
            this.options = options;
            this.spacer = null;
            this.maxHeight = 0;
            this.widthForMaxHeight = 0;
            this.floating = false;
            this.scrollHandler = null;
            this.wrapper = crelt("div", { class: prefix$1$1 + "-wrapper" });
            this.menu = this.wrapper.appendChild(crelt("div", { class: prefix$1$1 }));
            this.menu.className = prefix$1$1;
            if (editorView.dom.parentNode)
                editorView.dom.parentNode.replaceChild(this.wrapper, editorView.dom);
            this.wrapper.appendChild(editorView.dom);
            let { dom, update } = renderGrouped(this.editorView, this.options.content);
            this.contentUpdate = update;
            this.menu.appendChild(dom);
            this.update();
            if (options.floating && !isIOS()) {
                this.updateFloat();
                let potentialScrollers = getAllWrapping(this.wrapper);
                this.scrollHandler = (e) => {
                    let root = this.editorView.root;
                    if (!(root.body || root).contains(this.wrapper))
                        potentialScrollers.forEach(el => el.removeEventListener("scroll", this.scrollHandler));
                    else
                        this.updateFloat(e.target.getBoundingClientRect ? e.target : undefined);
                };
                potentialScrollers.forEach(el => el.addEventListener('scroll', this.scrollHandler));
            }
        }
        update() {
            this.contentUpdate(this.editorView.state);
            if (this.floating) {
                this.updateScrollCursor();
            }
            else {
                if (this.menu.offsetWidth != this.widthForMaxHeight) {
                    this.widthForMaxHeight = this.menu.offsetWidth;
                    this.maxHeight = 0;
                }
                if (this.menu.offsetHeight > this.maxHeight) {
                    this.maxHeight = this.menu.offsetHeight;
                    this.menu.style.minHeight = this.maxHeight + "px";
                }
            }
        }
        updateScrollCursor() {
            let selection = this.editorView.root.getSelection();
            if (!selection.focusNode)
                return;
            let rects = selection.getRangeAt(0).getClientRects();
            let selRect = rects[selectionIsInverted(selection) ? 0 : rects.length - 1];
            if (!selRect)
                return;
            let menuRect = this.menu.getBoundingClientRect();
            if (selRect.top < menuRect.bottom && selRect.bottom > menuRect.top) {
                let scrollable = findWrappingScrollable(this.wrapper);
                if (scrollable)
                    scrollable.scrollTop -= (menuRect.bottom - selRect.top);
            }
        }
        updateFloat(scrollAncestor) {
            let parent = this.wrapper, editorRect = parent.getBoundingClientRect(), top = scrollAncestor ? Math.max(0, scrollAncestor.getBoundingClientRect().top) : 0;
            if (this.floating) {
                if (editorRect.top >= top || editorRect.bottom < this.menu.offsetHeight + 10) {
                    this.floating = false;
                    this.menu.style.position = this.menu.style.left = this.menu.style.top = this.menu.style.width = "";
                    this.menu.style.display = "";
                    this.spacer.parentNode.removeChild(this.spacer);
                    this.spacer = null;
                }
                else {
                    let border = (parent.offsetWidth - parent.clientWidth) / 2;
                    this.menu.style.left = (editorRect.left + border) + "px";
                    this.menu.style.display = (editorRect.top > window.innerHeight ? "none" : "");
                    if (scrollAncestor)
                        this.menu.style.top = top + "px";
                }
            }
            else {
                if (editorRect.top < top && editorRect.bottom >= this.menu.offsetHeight + 10) {
                    this.floating = true;
                    let menuRect = this.menu.getBoundingClientRect();
                    this.menu.style.left = menuRect.left + "px";
                    this.menu.style.width = menuRect.width + "px";
                    if (scrollAncestor)
                        this.menu.style.top = top + "px";
                    this.menu.style.position = "fixed";
                    this.spacer = crelt("div", { class: prefix$1$1 + "-spacer", style: `height: ${menuRect.height}px` });
                    parent.insertBefore(this.spacer, this.menu);
                }
            }
        }
        destroy() {
            if (this.wrapper.parentNode)
                this.wrapper.parentNode.replaceChild(this.editorView.dom, this.wrapper);
        }
    }
    // Not precise, but close enough
    function selectionIsInverted(selection) {
        if (selection.anchorNode == selection.focusNode)
            return selection.anchorOffset > selection.focusOffset;
        return selection.anchorNode.compareDocumentPosition(selection.focusNode) == Node.DOCUMENT_POSITION_FOLLOWING;
    }
    function findWrappingScrollable(node) {
        for (let cur = node.parentNode; cur; cur = cur.parentNode)
            if (cur.scrollHeight > cur.clientHeight)
                return cur;
    }
    function getAllWrapping(node) {
        let res = [window];
        for (let cur = node.parentNode; cur; cur = cur.parentNode)
            res.push(cur);
        return res;
    }

    /**
    Input rules are regular expressions describing a piece of text
    that, when typed, causes something to happen. This might be
    changing two dashes into an emdash, wrapping a paragraph starting
    with `"> "` into a blockquote, or something entirely different.
    */
    class InputRule {
        // :: (RegExp, union<string, (state: EditorState, match: [string], start: number, end: number) → ?Transaction>)
        /**
        Create an input rule. The rule applies when the user typed
        something and the text directly in front of the cursor matches
        `match`, which should end with `$`.

        The `handler` can be a string, in which case the matched text, or
        the first matched group in the regexp, is replaced by that
        string.

        Or a it can be a function, which will be called with the match
        array produced by
        [`RegExp.exec`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec),
        as well as the start and end of the matched range, and which can
        return a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) that describes the
        rule's effect, or null to indicate the input was not handled.
        */
        constructor(
        /**
        @internal
        */
        match, handler) {
            this.match = match;
            this.match = match;
            this.handler = typeof handler == "string" ? stringHandler(handler) : handler;
        }
    }
    function stringHandler(string) {
        return function (state, match, start, end) {
            let insert = string;
            if (match[1]) {
                let offset = match[0].lastIndexOf(match[1]);
                insert += match[0].slice(offset + match[1].length);
                start += offset;
                let cutOff = start - end;
                if (cutOff > 0) {
                    insert = match[0].slice(offset - cutOff, offset) + insert;
                    start = end;
                }
            }
            return state.tr.insertText(insert, start, end);
        };
    }
    const MAX_MATCH = 500;
    /**
    Create an input rules plugin. When enabled, it will cause text
    input that matches any of the given rules to trigger the rule's
    action.
    */
    function inputRules({ rules }) {
        let plugin = new Plugin({
            state: {
                init() { return null; },
                apply(tr, prev) {
                    let stored = tr.getMeta(this);
                    if (stored)
                        return stored;
                    return tr.selectionSet || tr.docChanged ? null : prev;
                }
            },
            props: {
                handleTextInput(view, from, to, text) {
                    return run(view, from, to, text, rules, plugin);
                },
                handleDOMEvents: {
                    compositionend: (view) => {
                        setTimeout(() => {
                            let { $cursor } = view.state.selection;
                            if ($cursor)
                                run(view, $cursor.pos, $cursor.pos, "", rules, plugin);
                        });
                    }
                }
            },
            isInputRules: true
        });
        return plugin;
    }
    function run(view, from, to, text, rules, plugin) {
        if (view.composing)
            return false;
        let state = view.state, $from = state.doc.resolve(from);
        if ($from.parent.type.spec.code)
            return false;
        let textBefore = $from.parent.textBetween(Math.max(0, $from.parentOffset - MAX_MATCH), $from.parentOffset, null, "\ufffc") + text;
        for (let i = 0; i < rules.length; i++) {
            let match = rules[i].match.exec(textBefore);
            let tr = match && rules[i].handler(state, match, from - (match[0].length - text.length), to);
            if (!tr)
                continue;
            view.dispatch(tr.setMeta(plugin, { transform: tr, from, to, text }));
            return true;
        }
        return false;
    }
    /**
    This is a command that will undo an input rule, if applying such a
    rule was the last thing that the user did.
    */
    const undoInputRule = (state, dispatch) => {
        let plugins = state.plugins;
        for (let i = 0; i < plugins.length; i++) {
            let plugin = plugins[i], undoable;
            if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {
                if (dispatch) {
                    let tr = state.tr, toUndo = undoable.transform;
                    for (let j = toUndo.steps.length - 1; j >= 0; j--)
                        tr.step(toUndo.steps[j].invert(toUndo.docs[j]));
                    if (undoable.text) {
                        let marks = tr.doc.resolve(undoable.from).marks();
                        tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));
                    }
                    else {
                        tr.delete(undoable.from, undoable.to);
                    }
                    dispatch(tr);
                }
                return true;
            }
        }
        return false;
    };

    /**
    Converts double dashes to an emdash.
    */
    const emDash = new InputRule(/--$/, "—");
    /**
    Converts three dots to an ellipsis character.
    */
    const ellipsis = new InputRule(/\.\.\.$/, "…");
    /**
    “Smart” opening double quotes.
    */
    const openDoubleQuote = new InputRule(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(")$/, "“");
    /**
    “Smart” closing double quotes.
    */
    const closeDoubleQuote = new InputRule(/"$/, "”");
    /**
    “Smart” opening single quotes.
    */
    const openSingleQuote = new InputRule(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(')$/, "‘");
    /**
    “Smart” closing single quotes.
    */
    const closeSingleQuote = new InputRule(/'$/, "’");
    /**
    Smart-quote related input rules.
    */
    const smartQuotes = [openDoubleQuote, closeDoubleQuote, openSingleQuote, closeSingleQuote];

    /**
    Build an input rule for automatically wrapping a textblock when a
    given string is typed. The `regexp` argument is
    directly passed through to the `InputRule` constructor. You'll
    probably want the regexp to start with `^`, so that the pattern can
    only occur at the start of a textblock.

    `nodeType` is the type of node to wrap in. If it needs attributes,
    you can either pass them directly, or pass a function that will
    compute them from the regular expression match.

    By default, if there's a node with the same type above the newly
    wrapped node, the rule will try to [join](https://prosemirror.net/docs/ref/#transform.Transform.join) those
    two nodes. You can pass a join predicate, which takes a regular
    expression match and the node before the wrapped node, and can
    return a boolean to indicate whether a join should happen.
    */
    function wrappingInputRule(regexp, nodeType, getAttrs = null, joinPredicate) {
        return new InputRule(regexp, (state, match, start, end) => {
            let attrs = getAttrs instanceof Function ? getAttrs(match) : getAttrs;
            let tr = state.tr.delete(start, end);
            let $start = tr.doc.resolve(start), range = $start.blockRange(), wrapping = range && findWrapping(range, nodeType, attrs);
            if (!wrapping)
                return null;
            tr.wrap(range, wrapping);
            let before = tr.doc.resolve(start - 1).nodeBefore;
            if (before && before.type == nodeType && canJoin(tr.doc, start - 1) &&
                (!joinPredicate || joinPredicate(match, before)))
                tr.join(start - 1);
            return tr;
        });
    }
    /**
    Build an input rule that changes the type of a textblock when the
    matched text is typed into it. You'll usually want to start your
    regexp with `^` to that it is only matched at the start of a
    textblock. The optional `getAttrs` parameter can be used to compute
    the new node's attributes, and works the same as in the
    `wrappingInputRule` function.
    */
    function textblockTypeInputRule(regexp, nodeType, getAttrs = null) {
        return new InputRule(regexp, (state, match, start, end) => {
            let $start = state.doc.resolve(start);
            let attrs = getAttrs instanceof Function ? getAttrs(match) : getAttrs;
            if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), nodeType))
                return null;
            return state.tr
                .delete(start, end)
                .setBlockType(start, start, nodeType, attrs);
        });
    }

    const prefix = "ProseMirror-prompt";
    function openPrompt(options) {
        let wrapper = document.body.appendChild(document.createElement("div"));
        wrapper.className = prefix;
        let mouseOutside = (e) => { if (!wrapper.contains(e.target))
            close(); };
        setTimeout(() => window.addEventListener("mousedown", mouseOutside), 50);
        let close = () => {
            window.removeEventListener("mousedown", mouseOutside);
            if (wrapper.parentNode)
                wrapper.parentNode.removeChild(wrapper);
        };
        let domFields = [];
        for (let name in options.fields)
            domFields.push(options.fields[name].render());
        let submitButton = document.createElement("button");
        submitButton.type = "submit";
        submitButton.className = prefix + "-submit";
        submitButton.textContent = "OK";
        let cancelButton = document.createElement("button");
        cancelButton.type = "button";
        cancelButton.className = prefix + "-cancel";
        cancelButton.textContent = "Cancel";
        cancelButton.addEventListener("click", close);
        let form = wrapper.appendChild(document.createElement("form"));
        if (options.title)
            form.appendChild(document.createElement("h5")).textContent = options.title;
        domFields.forEach(field => {
            form.appendChild(document.createElement("div")).appendChild(field);
        });
        let buttons = form.appendChild(document.createElement("div"));
        buttons.className = prefix + "-buttons";
        buttons.appendChild(submitButton);
        buttons.appendChild(document.createTextNode(" "));
        buttons.appendChild(cancelButton);
        let box = wrapper.getBoundingClientRect();
        wrapper.style.top = ((window.innerHeight - box.height) / 2) + "px";
        wrapper.style.left = ((window.innerWidth - box.width) / 2) + "px";
        let submit = () => {
            let params = getValues(options.fields, domFields);
            if (params) {
                close();
                options.callback(params);
            }
        };
        form.addEventListener("submit", e => {
            e.preventDefault();
            submit();
        });
        form.addEventListener("keydown", e => {
            if (e.keyCode == 27) {
                e.preventDefault();
                close();
            }
            else if (e.keyCode == 13 && !(e.ctrlKey || e.metaKey || e.shiftKey)) {
                e.preventDefault();
                submit();
            }
            else if (e.keyCode == 9) {
                window.setTimeout(() => {
                    if (!wrapper.contains(document.activeElement))
                        close();
                }, 500);
            }
        });
        let input = form.elements[0];
        if (input)
            input.focus();
    }
    function getValues(fields, domFields) {
        let result = Object.create(null), i = 0;
        for (let name in fields) {
            let field = fields[name], dom = domFields[i++];
            let value = field.read(dom), bad = field.validate(value);
            if (bad) {
                reportInvalid(dom, bad);
                return null;
            }
            result[name] = field.clean(value);
        }
        return result;
    }
    function reportInvalid(dom, message) {
        // FIXME this is awful and needs a lot more work
        let parent = dom.parentNode;
        let msg = parent.appendChild(document.createElement("div"));
        msg.style.left = (dom.offsetLeft + dom.offsetWidth + 2) + "px";
        msg.style.top = (dom.offsetTop - 5) + "px";
        msg.className = "ProseMirror-invalid";
        msg.textContent = message;
        setTimeout(() => parent.removeChild(msg), 1500);
    }
    /**
    The type of field that `openPrompt` expects to be passed to it.
    */
    class Field {
        /**
        Create a field with the given options. Options support by all
        field types are:
        */
        constructor(
        /**
        @internal
        */
        options) {
            this.options = options;
        }
        /**
        Read the field's value from its DOM node.
        */
        read(dom) { return dom.value; }
        /**
        A field-type-specific validation function.
        */
        validateType(value) { return null; }
        /**
        @internal
        */
        validate(value) {
            if (!value && this.options.required)
                return "Required field";
            return this.validateType(value) || (this.options.validate ? this.options.validate(value) : null);
        }
        clean(value) {
            return this.options.clean ? this.options.clean(value) : value;
        }
    }
    /**
    A field class for single-line text fields.
    */
    class TextField extends Field {
        render() {
            let input = document.createElement("input");
            input.type = "text";
            input.placeholder = this.options.label;
            input.value = this.options.value || "";
            input.autocomplete = "off";
            return input;
        }
    }

    // Helpers to create specific types of items
    function canInsert(state, nodeType) {
        let $from = state.selection.$from;
        for (let d = $from.depth; d >= 0; d--) {
            let index = $from.index(d);
            if ($from.node(d).canReplaceWith(index, index, nodeType))
                return true;
        }
        return false;
    }
    function insertImageItem(nodeType) {
        return new MenuItem({
            title: "Insert image",
            label: "Image",
            enable(state) { return canInsert(state, nodeType); },
            run(state, _, view) {
                let { from, to } = state.selection, attrs = null;
                if (state.selection instanceof NodeSelection && state.selection.node.type == nodeType)
                    attrs = state.selection.node.attrs;
                openPrompt({
                    title: "Insert image",
                    fields: {
                        src: new TextField({ label: "Location", required: true, value: attrs && attrs.src }),
                        title: new TextField({ label: "Title", value: attrs && attrs.title }),
                        alt: new TextField({ label: "Description",
                            value: attrs ? attrs.alt : state.doc.textBetween(from, to, " ") })
                    },
                    callback(attrs) {
                        view.dispatch(view.state.tr.replaceSelectionWith(nodeType.createAndFill(attrs)));
                        view.focus();
                    }
                });
            }
        });
    }
    function cmdItem(cmd, options) {
        let passedOptions = {
            label: options.title,
            run: cmd
        };
        for (let prop in options)
            passedOptions[prop] = options[prop];
        if (!options.enable && !options.select)
            passedOptions[options.enable ? "enable" : "select"] = state => cmd(state);
        return new MenuItem(passedOptions);
    }
    function markActive(state, type) {
        let { from, $from, to, empty } = state.selection;
        if (empty)
            return !!type.isInSet(state.storedMarks || $from.marks());
        else
            return state.doc.rangeHasMark(from, to, type);
    }
    function markItem(markType, options) {
        let passedOptions = {
            active(state) { return markActive(state, markType); }
        };
        for (let prop in options)
            passedOptions[prop] = options[prop];
        return cmdItem(toggleMark(markType), passedOptions);
    }
    function linkItem(markType) {
        return new MenuItem({
            title: "Add or remove link",
            icon: icons.link,
            active(state) { return markActive(state, markType); },
            enable(state) { return !state.selection.empty; },
            run(state, dispatch, view) {
                if (markActive(state, markType)) {
                    toggleMark(markType)(state, dispatch);
                    return true;
                }
                openPrompt({
                    title: "Create a link",
                    fields: {
                        href: new TextField({
                            label: "Link target",
                            required: true
                        }),
                        title: new TextField({ label: "Title" })
                    },
                    callback(attrs) {
                        toggleMark(markType, attrs)(view.state, view.dispatch);
                        view.focus();
                    }
                });
            }
        });
    }
    function wrapListItem(nodeType, options) {
        return cmdItem(wrapInList(nodeType, options.attrs), options);
    }
    /**
    Given a schema, look for default mark and node types in it and
    return an object with relevant menu items relating to those marks.
    */
    function buildMenuItems(schema) {
        let r = {};
        let mark;
        if (mark = schema.marks.strong)
            r.toggleStrong = markItem(mark, { title: "Toggle strong style", icon: icons.strong });
        if (mark = schema.marks.em)
            r.toggleEm = markItem(mark, { title: "Toggle emphasis", icon: icons.em });
        if (mark = schema.marks.code)
            r.toggleCode = markItem(mark, { title: "Toggle code font", icon: icons.code });
        if (mark = schema.marks.link)
            r.toggleLink = linkItem(mark);
        let node;
        if (node = schema.nodes.image)
            r.insertImage = insertImageItem(node);
        if (node = schema.nodes.bullet_list)
            r.wrapBulletList = wrapListItem(node, {
                title: "Wrap in bullet list",
                icon: icons.bulletList
            });
        if (node = schema.nodes.ordered_list)
            r.wrapOrderedList = wrapListItem(node, {
                title: "Wrap in ordered list",
                icon: icons.orderedList
            });
        if (node = schema.nodes.blockquote)
            r.wrapBlockQuote = wrapItem(node, {
                title: "Wrap in block quote",
                icon: icons.blockquote
            });
        if (node = schema.nodes.paragraph)
            r.makeParagraph = blockTypeItem(node, {
                title: "Change to paragraph",
                label: "Plain"
            });
        if (node = schema.nodes.code_block)
            r.makeCodeBlock = blockTypeItem(node, {
                title: "Change to code block",
                label: "Code"
            });
        if (node = schema.nodes.heading)
            for (let i = 1; i <= 10; i++)
                r["makeHead" + i] = blockTypeItem(node, {
                    title: "Change to heading " + i,
                    label: "Level " + i,
                    attrs: { level: i }
                });
        if (node = schema.nodes.horizontal_rule) {
            let hr = node;
            r.insertHorizontalRule = new MenuItem({
                title: "Insert horizontal rule",
                label: "Horizontal rule",
                enable(state) { return canInsert(state, hr); },
                run(state, dispatch) { dispatch(state.tr.replaceSelectionWith(hr.create())); }
            });
        }
        let cut = (arr) => arr.filter(x => x);
        r.insertMenu = new Dropdown(cut([r.insertImage, r.insertHorizontalRule]), { label: "Insert" });
        r.typeMenu = new Dropdown(cut([r.makeParagraph, r.makeCodeBlock, r.makeHead1 && new DropdownSubmenu(cut([
                r.makeHead1, r.makeHead2, r.makeHead3, r.makeHead4, r.makeHead5, r.makeHead6
            ]), { label: "Heading" })]), { label: "Type..." });
        r.inlineMenu = [cut([r.toggleStrong, r.toggleEm, r.toggleCode, r.toggleLink])];
        r.blockMenu = [cut([r.wrapBulletList, r.wrapOrderedList, r.wrapBlockQuote, joinUpItem,
                liftItem, selectParentNodeItem])];
        r.fullMenu = r.inlineMenu.concat([[r.insertMenu, r.typeMenu]], [[undoItem, redoItem]], r.blockMenu);
        return r;
    }

    const mac$1 = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
    /**
    Inspect the given schema looking for marks and nodes from the
    basic schema, and if found, add key bindings related to them.
    This will add:

    * **Mod-b** for toggling [strong](https://prosemirror.net/docs/ref/#schema-basic.StrongMark)
    * **Mod-i** for toggling [emphasis](https://prosemirror.net/docs/ref/#schema-basic.EmMark)
    * **Mod-`** for toggling [code font](https://prosemirror.net/docs/ref/#schema-basic.CodeMark)
    * **Ctrl-Shift-0** for making the current textblock a paragraph
    * **Ctrl-Shift-1** to **Ctrl-Shift-Digit6** for making the current
      textblock a heading of the corresponding level
    * **Ctrl-Shift-Backslash** to make the current textblock a code block
    * **Ctrl-Shift-8** to wrap the selection in an ordered list
    * **Ctrl-Shift-9** to wrap the selection in a bullet list
    * **Ctrl->** to wrap the selection in a block quote
    * **Enter** to split a non-empty textblock in a list item while at
      the same time splitting the list item
    * **Mod-Enter** to insert a hard break
    * **Mod-_** to insert a horizontal rule
    * **Backspace** to undo an input rule
    * **Alt-ArrowUp** to `joinUp`
    * **Alt-ArrowDown** to `joinDown`
    * **Mod-BracketLeft** to `lift`
    * **Escape** to `selectParentNode`

    You can suppress or map these bindings by passing a `mapKeys`
    argument, which maps key names (say `"Mod-B"` to either `false`, to
    remove the binding, or a new key name string.
    */
    function buildKeymap(schema, mapKeys) {
        let keys = {}, type;
        function bind(key, cmd) {
            if (mapKeys) {
                let mapped = mapKeys[key];
                if (mapped === false)
                    return;
                if (mapped)
                    key = mapped;
            }
            keys[key] = cmd;
        }
        bind("Mod-z", undo);
        bind("Shift-Mod-z", redo);
        bind("Backspace", undoInputRule);
        if (!mac$1)
            bind("Mod-y", redo);
        bind("Alt-ArrowUp", joinUp);
        bind("Alt-ArrowDown", joinDown);
        bind("Mod-BracketLeft", lift$1);
        bind("Escape", selectParentNode);
        if (type = schema.marks.strong) {
            bind("Mod-b", toggleMark(type));
            bind("Mod-B", toggleMark(type));
        }
        if (type = schema.marks.em) {
            bind("Mod-i", toggleMark(type));
            bind("Mod-I", toggleMark(type));
        }
        if (type = schema.marks.code)
            bind("Mod-`", toggleMark(type));
        if (type = schema.nodes.bullet_list)
            bind("Shift-Ctrl-8", wrapInList(type));
        if (type = schema.nodes.ordered_list)
            bind("Shift-Ctrl-9", wrapInList(type));
        if (type = schema.nodes.blockquote)
            bind("Ctrl->", wrapIn(type));
        if (type = schema.nodes.hard_break) {
            let br = type, cmd = chainCommands(exitCode, (state, dispatch) => {
                if (dispatch)
                    dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView());
                return true;
            });
            bind("Mod-Enter", cmd);
            bind("Shift-Enter", cmd);
            if (mac$1)
                bind("Ctrl-Enter", cmd);
        }
        if (type = schema.nodes.list_item) {
            bind("Enter", splitListItem(type));
            bind("Mod-[", liftListItem(type));
            bind("Mod-]", sinkListItem(type));
        }
        if (type = schema.nodes.paragraph)
            bind("Shift-Ctrl-0", setBlockType$1(type));
        if (type = schema.nodes.code_block)
            bind("Shift-Ctrl-\\", setBlockType$1(type));
        if (type = schema.nodes.heading)
            for (let i = 1; i <= 6; i++)
                bind("Shift-Ctrl-" + i, setBlockType$1(type, { level: i }));
        if (type = schema.nodes.horizontal_rule) {
            let hr = type;
            bind("Mod-_", (state, dispatch) => {
                if (dispatch)
                    dispatch(state.tr.replaceSelectionWith(hr.create()).scrollIntoView());
                return true;
            });
        }
        return keys;
    }

    /**
    Given a blockquote node type, returns an input rule that turns `"> "`
    at the start of a textblock into a blockquote.
    */
    function blockQuoteRule(nodeType) {
        return wrappingInputRule(/^\s*>\s$/, nodeType);
    }
    /**
    Given a list node type, returns an input rule that turns a number
    followed by a dot at the start of a textblock into an ordered list.
    */
    function orderedListRule(nodeType) {
        return wrappingInputRule(/^(\d+)\.\s$/, nodeType, match => ({ order: +match[1] }), (match, node) => node.childCount + node.attrs.order == +match[1]);
    }
    /**
    Given a list node type, returns an input rule that turns a bullet
    (dash, plush, or asterisk) at the start of a textblock into a
    bullet list.
    */
    function bulletListRule(nodeType) {
        return wrappingInputRule(/^\s*([-+*])\s$/, nodeType);
    }
    /**
    Given a code block node type, returns an input rule that turns a
    textblock starting with three backticks into a code block.
    */
    function codeBlockRule(nodeType) {
        return textblockTypeInputRule(/^```$/, nodeType);
    }
    /**
    Given a node type and a maximum level, creates an input rule that
    turns up to that number of `#` characters followed by a space at
    the start of a textblock into a heading whose level corresponds to
    the number of `#` signs.
    */
    function headingRule(nodeType, maxLevel) {
        return textblockTypeInputRule(new RegExp("^(#{1," + maxLevel + "})\\s$"), nodeType, match => ({ level: match[1].length }));
    }
    /**
    A set of input rules for creating the basic block quotes, lists,
    code blocks, and heading.
    */
    function buildInputRules(schema) {
        let rules = smartQuotes.concat(ellipsis, emDash), type;
        if (type = schema.nodes.blockquote)
            rules.push(blockQuoteRule(type));
        if (type = schema.nodes.ordered_list)
            rules.push(orderedListRule(type));
        if (type = schema.nodes.bullet_list)
            rules.push(bulletListRule(type));
        if (type = schema.nodes.code_block)
            rules.push(codeBlockRule(type));
        if (type = schema.nodes.heading)
            rules.push(headingRule(type, 6));
        return inputRules({ rules });
    }

    /**
    Create an array of plugins pre-configured for the given schema.
    The resulting array will include the following plugins:

     * Input rules for smart quotes and creating the block types in the
       schema using markdown conventions (say `"> "` to create a
       blockquote)

     * A keymap that defines keys to create and manipulate the nodes in the
       schema

     * A keymap binding the default keys provided by the
       prosemirror-commands module

     * The undo history plugin

     * The drop cursor plugin

     * The gap cursor plugin

     * A custom plugin that adds a `menuContent` prop for the
       prosemirror-menu wrapper, and a CSS class that enables the
       additional styling defined in `style/style.css` in this package

    Probably only useful for quickly setting up a passable
    editor—you'll need more control over your settings in most
    real-world situations.
    */
    function exampleSetup(options) {
        let plugins = [
            buildInputRules(options.schema),
            keymap(buildKeymap(options.schema, options.mapKeys)),
            keymap(baseKeymap),
            dropCursor(),
            gapCursor()
        ];
        if (options.menuBar !== false)
            plugins.push(menuBar({ floating: options.floatingMenu !== false,
                content: options.menuContent || buildMenuItems(options.schema).fullMenu }));
        if (options.history !== false)
            plugins.push(history());
        return plugins.concat(new Plugin({
            props: {
                attributes: { class: "ProseMirror-example-setup-style" }
            }
        }));
    }

    __$styleInject("*,body{box-sizing:border-box;margin:0}body{padding:32px;padding:2rem;color:#444;font-family:sans-serif;font-size:18px;background-image:linear-gradient(180deg,#efefff 0,#fff);background-repeat:no-repeat}body *+:not(.suggestion-item){margin-top:16px;margin-top:1rem}h1{color:#111}.debug:before{content:\"Script Output:\";display:block;font-family:sans-serif;font-size:50%;letter-spacing:.1em;text-transform:uppercase}.debug__output{display:block;margin-top:4px;margin-top:.25rem;padding:16px;padding:1rem;background-color:#fff;border:1px solid #d0d0d0;font-size:80%}.credits{color:#a2a2a2;font-size:75%;text-align:center}.credits a{color:inherit}.tribute-container{position:absolute;top:0;left:0;height:auto;max-height:300px;max-width:500px;overflow:auto;display:block;z-index:3}.tribute-container ul{margin:0;margin-top:2px;padding:0;list-style:none;background:#efefef}.tribute-container li{padding:5px;cursor:pointer}.tribute-container li.highlight{background:#ddd}.tribute-container li span{font-weight:700}.tribute-container li.no-match{cursor:default}.tribute-container .menu-highlighted{font-weight:700}.suggestion-item-active{background:#08c;color:#fff}.prosemirror-mention-node,.prosemirror-tag-node{color:#08c}.prosemirror-suggestion{background:rgba(0,0,0,.05);border:1px solid #999}.suggestion-item-list{background:#fff;border:1px solid #999}.suggestion-item{padding:5px}.suggestion-item:before{border-top:1px solid}.menubar{border-bottom:1px solid rgba(0,0,0,.2);line-height:.1;padding-bottom:20px;font-size:25px}.menuicon{display:inline-block;border-right:1px solid rgba(0,0,0,.2);color:#888;line-height:1;padding:0 7px;margin:1px;cursor:pointer;text-align:center;min-width:1.4em}.heading,.strong{font-weight:700}.em{font-style:italic}.ProseMirror-textblock-dropdown{min-width:3em}.ProseMirror-menu{margin:0 -4px;line-height:1}.ProseMirror-tooltip .ProseMirror-menu{width:-moz-fit-content;width:fit-content;white-space:pre}.ProseMirror-menuitem{margin-right:3px;display:inline-block}.ProseMirror-menuseparator{border-right:1px solid #ddd;margin-right:3px}.ProseMirror-menu-dropdown,.ProseMirror-menu-dropdown-menu{font-size:90%;white-space:nowrap}.ProseMirror-menu-dropdown{vertical-align:1px;cursor:pointer;position:relative;padding-right:15px}.ProseMirror-menu-dropdown-wrap{padding:1px 0 1px 4px;display:inline-block;position:relative}.ProseMirror-menu-dropdown:after{content:\"\";border-left:4px solid transparent;border-right:4px solid transparent;border-top:4px solid currentColor;opacity:.6;position:absolute;right:4px;top:calc(50% - 2px)}.ProseMirror-menu-dropdown-menu,.ProseMirror-menu-submenu{position:absolute;background:#fff;color:#666;border:1px solid #aaa;padding:2px}.ProseMirror-menu-dropdown-menu{z-index:2;min-width:6em}.ProseMirror-menu-dropdown-item{cursor:pointer;padding:2px 8px 2px 4px}.ProseMirror-menu-dropdown-item:hover{background:#f2f2f2}.ProseMirror-menu-submenu-wrap{position:relative;margin-right:-4px}.ProseMirror-menu-submenu-label:after{content:\"\";border-top:4px solid transparent;border-bottom:4px solid transparent;border-left:4px solid currentColor;opacity:.6;position:absolute;right:4px;top:calc(50% - 4px)}.ProseMirror-menu-submenu{display:none;min-width:4em;left:100%;top:-3px}.ProseMirror-menu-active{background:#eee;border-radius:4px}.ProseMirror-menu-disabled{opacity:.3}.ProseMirror-menu-submenu-wrap-active .ProseMirror-menu-submenu,.ProseMirror-menu-submenu-wrap:hover .ProseMirror-menu-submenu{display:block}.ProseMirror-menubar{border-top-left-radius:inherit;border-top-right-radius:inherit;position:relative;min-height:1em;color:#666;padding:1px 6px;top:0;left:0;right:0;border-bottom:1px solid silver;background:#fff;z-index:1;box-sizing:border-box;overflow:visible}.ProseMirror-icon{display:inline-block;line-height:.8;vertical-align:-2px;padding:2px 8px;cursor:pointer}.ProseMirror-menu-disabled.ProseMirror-icon{cursor:default}.ProseMirror-icon svg{fill:currentColor;height:1em}.ProseMirror-icon span{vertical-align:text-top}#editor{width:50%;display:inline-block;min-height:300px}.ProseMirror{text-align:left;text-align:initial}body{text-align:center!important}#output{text-align:left;text-align:initial}", undefined);

    __$styleInject("/*!\n * Bootstrap v4.0.0 (https://getbootstrap.com)\n * Copyright 2011-2018 The Bootstrap Authors\n * Copyright 2011-2018 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */*,:after,:before{box-sizing:border-box}html{font-family:sans-serif;line-height:1.15;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;-ms-overflow-style:scrollbar;-webkit-tap-highlight-color:transparent}@-ms-viewport{width:device-width}article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}body{margin:0;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif;font-size:16px;font-size:1rem;font-weight:400;line-height:1.5;color:#212529;text-align:left;background-color:#fff}[tabindex=\"-1\"]:focus{outline:0!important}hr{box-sizing:content-box;height:0;overflow:visible}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:8px;margin-bottom:.5rem}p{margin-top:0;margin-bottom:16px;margin-bottom:1rem}abbr[data-original-title],abbr[title]{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;border-bottom:0}address{font-style:normal;line-height:inherit}address,dl,ol,ul{margin-bottom:16px;margin-bottom:1rem}dl,ol,ul{margin-top:0}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:8px;margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 16px;margin:0 0 1rem}dfn{font-style:italic}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:#007bff;text-decoration:none;background-color:transparent;-webkit-text-decoration-skip:objects}a:hover{color:#0056b3;text-decoration:underline}a:not([href]):not([tabindex]),a:not([href]):not([tabindex]):focus,a:not([href]):not([tabindex]):hover{color:inherit;text-decoration:none}a:not([href]):not([tabindex]):focus{outline:0}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}pre{margin-top:0;margin-bottom:16px;margin-bottom:1rem;overflow:auto;-ms-overflow-style:scrollbar}figure{margin:0 0 16px;margin:0 0 1rem}img{vertical-align:middle;border-style:none}svg:not(:root){overflow:hidden}table{border-collapse:collapse}caption{padding-top:12px;padding-top:.75rem;padding-bottom:12px;padding-bottom:.75rem;color:#6c757d;text-align:left;caption-side:bottom}th{text-align:inherit}label{display:inline-block;margin-bottom:8px;margin-bottom:.5rem}button{border-radius:0}button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}button,input,optgroup,select,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{padding:0;border-style:none}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=date],input[type=datetime-local],input[type=month],input[type=time]{-webkit-appearance:listbox}textarea{overflow:auto;resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;max-width:100%;padding:0;margin-bottom:8px;margin-bottom:.5rem;font-size:24px;font-size:1.5rem;line-height:inherit;color:inherit;white-space:normal}progress{vertical-align:baseline}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{outline-offset:-2px;-webkit-appearance:none}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}output{display:inline-block}summary{display:list-item;cursor:pointer}template{display:none}[hidden]{display:none!important}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{margin-bottom:8px;margin-bottom:.5rem;font-family:inherit;font-weight:500;line-height:1.2;color:inherit}.h1,h1{font-size:40px;font-size:2.5rem}.h2,h2{font-size:32px;font-size:2rem}.h3,h3{font-size:28px;font-size:1.75rem}.h4,h4{font-size:24px;font-size:1.5rem}.h5,h5{font-size:20px;font-size:1.25rem}.h6,h6{font-size:16px;font-size:1rem}.lead{font-size:20px;font-size:1.25rem;font-weight:300}.display-1{font-size:96px;font-size:6rem}.display-1,.display-2{font-weight:300;line-height:1.2}.display-2{font-size:88px;font-size:5.5rem}.display-3{font-size:72px;font-size:4.5rem}.display-3,.display-4{font-weight:300;line-height:1.2}.display-4{font-size:56px;font-size:3.5rem}hr{margin-top:16px;margin-top:1rem;margin-bottom:16px;margin-bottom:1rem;border:0;border-top:1px solid rgba(0,0,0,.1)}.small,small{font-size:80%;font-weight:400}.mark,mark{padding:.2em;background-color:#fcf8e3}.list-inline,.list-unstyled{padding-left:0;list-style:none}.list-inline-item{display:inline-block}.list-inline-item:not(:last-child){margin-right:8px;margin-right:.5rem}.initialism{font-size:90%;text-transform:uppercase}.blockquote{margin-bottom:16px;margin-bottom:1rem;font-size:20px;font-size:1.25rem}.blockquote-footer{display:block;font-size:80%;color:#6c757d}.blockquote-footer:before{content:\"\\2014 \\00A0\"}.img-fluid,.img-thumbnail{max-width:100%;height:auto}.img-thumbnail{padding:4px;padding:.25rem;background-color:#fff;border:1px solid #dee2e6;border-radius:.25rem}.figure{display:inline-block}.figure-img{margin-bottom:8px;margin-bottom:.5rem;line-height:1}.figure-caption{font-size:90%;color:#6c757d}code,kbd,pre,samp{font-family:SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace}code{font-size:87.5%;color:#e83e8c;word-break:break-word}a>code{color:inherit}kbd{padding:3.2px 6.4px;padding:.2rem .4rem;font-size:87.5%;color:#fff;background-color:#212529;border-radius:.2rem}kbd kbd{padding:0;font-size:100%;font-weight:700}pre{display:block;font-size:87.5%;color:#212529}pre code{font-size:inherit;color:inherit;word-break:normal}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}@media (min-width:576px){.container{max-width:540px}}@media (min-width:768px){.container{max-width:720px}}@media (min-width:992px){.container{max-width:960px}}@media (min-width:1200px){.container{max-width:1140px}}.container-fluid{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}.row{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-15px;margin-left:-15px}.no-gutters{margin-right:0;margin-left:0}.no-gutters>.col,.no-gutters>[class*=col-]{padding-right:0;padding-left:0}.col,.col-1,.col-2,.col-3,.col-4,.col-5,.col-6,.col-7,.col-8,.col-9,.col-10,.col-11,.col-12,.col-auto,.col-lg,.col-lg-1,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-auto,.col-md,.col-md-1,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-10,.col-md-11,.col-md-12,.col-md-auto,.col-sm,.col-sm-1,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-auto,.col-xl,.col-xl-1,.col-xl-2,.col-xl-3,.col-xl-4,.col-xl-5,.col-xl-6,.col-xl-7,.col-xl-8,.col-xl-9,.col-xl-10,.col-xl-11,.col-xl-12,.col-xl-auto{position:relative;width:100%;min-height:1px;padding-right:15px;padding-left:15px}.col{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-first{-ms-flex-order:-1;order:-1}.order-last{-ms-flex-order:13;order:13}.order-0{-ms-flex-order:0;order:0}.order-1{-ms-flex-order:1;order:1}.order-2{-ms-flex-order:2;order:2}.order-3{-ms-flex-order:3;order:3}.order-4{-ms-flex-order:4;order:4}.order-5{-ms-flex-order:5;order:5}.order-6{-ms-flex-order:6;order:6}.order-7{-ms-flex-order:7;order:7}.order-8{-ms-flex-order:8;order:8}.order-9{-ms-flex-order:9;order:9}.order-10{-ms-flex-order:10;order:10}.order-11{-ms-flex-order:11;order:11}.order-12{-ms-flex-order:12;order:12}.offset-1{margin-left:8.333333%}.offset-2{margin-left:16.666667%}.offset-3{margin-left:25%}.offset-4{margin-left:33.333333%}.offset-5{margin-left:41.666667%}.offset-6{margin-left:50%}.offset-7{margin-left:58.333333%}.offset-8{margin-left:66.666667%}.offset-9{margin-left:75%}.offset-10{margin-left:83.333333%}.offset-11{margin-left:91.666667%}@media (min-width:576px){.col-sm{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-sm-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-sm-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-sm-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-sm-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-sm-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-sm-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-sm-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-sm-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-sm-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-sm-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-sm-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-sm-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-sm-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-sm-first{-ms-flex-order:-1;order:-1}.order-sm-last{-ms-flex-order:13;order:13}.order-sm-0{-ms-flex-order:0;order:0}.order-sm-1{-ms-flex-order:1;order:1}.order-sm-2{-ms-flex-order:2;order:2}.order-sm-3{-ms-flex-order:3;order:3}.order-sm-4{-ms-flex-order:4;order:4}.order-sm-5{-ms-flex-order:5;order:5}.order-sm-6{-ms-flex-order:6;order:6}.order-sm-7{-ms-flex-order:7;order:7}.order-sm-8{-ms-flex-order:8;order:8}.order-sm-9{-ms-flex-order:9;order:9}.order-sm-10{-ms-flex-order:10;order:10}.order-sm-11{-ms-flex-order:11;order:11}.order-sm-12{-ms-flex-order:12;order:12}.offset-sm-0{margin-left:0}.offset-sm-1{margin-left:8.333333%}.offset-sm-2{margin-left:16.666667%}.offset-sm-3{margin-left:25%}.offset-sm-4{margin-left:33.333333%}.offset-sm-5{margin-left:41.666667%}.offset-sm-6{margin-left:50%}.offset-sm-7{margin-left:58.333333%}.offset-sm-8{margin-left:66.666667%}.offset-sm-9{margin-left:75%}.offset-sm-10{margin-left:83.333333%}.offset-sm-11{margin-left:91.666667%}}@media (min-width:768px){.col-md{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-md-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-md-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-md-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-md-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-md-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-md-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-md-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-md-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-md-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-md-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-md-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-md-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-md-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-md-first{-ms-flex-order:-1;order:-1}.order-md-last{-ms-flex-order:13;order:13}.order-md-0{-ms-flex-order:0;order:0}.order-md-1{-ms-flex-order:1;order:1}.order-md-2{-ms-flex-order:2;order:2}.order-md-3{-ms-flex-order:3;order:3}.order-md-4{-ms-flex-order:4;order:4}.order-md-5{-ms-flex-order:5;order:5}.order-md-6{-ms-flex-order:6;order:6}.order-md-7{-ms-flex-order:7;order:7}.order-md-8{-ms-flex-order:8;order:8}.order-md-9{-ms-flex-order:9;order:9}.order-md-10{-ms-flex-order:10;order:10}.order-md-11{-ms-flex-order:11;order:11}.order-md-12{-ms-flex-order:12;order:12}.offset-md-0{margin-left:0}.offset-md-1{margin-left:8.333333%}.offset-md-2{margin-left:16.666667%}.offset-md-3{margin-left:25%}.offset-md-4{margin-left:33.333333%}.offset-md-5{margin-left:41.666667%}.offset-md-6{margin-left:50%}.offset-md-7{margin-left:58.333333%}.offset-md-8{margin-left:66.666667%}.offset-md-9{margin-left:75%}.offset-md-10{margin-left:83.333333%}.offset-md-11{margin-left:91.666667%}}@media (min-width:992px){.col-lg{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-lg-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-lg-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-lg-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-lg-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-lg-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-lg-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-lg-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-lg-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-lg-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-lg-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-lg-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-lg-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-lg-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-lg-first{-ms-flex-order:-1;order:-1}.order-lg-last{-ms-flex-order:13;order:13}.order-lg-0{-ms-flex-order:0;order:0}.order-lg-1{-ms-flex-order:1;order:1}.order-lg-2{-ms-flex-order:2;order:2}.order-lg-3{-ms-flex-order:3;order:3}.order-lg-4{-ms-flex-order:4;order:4}.order-lg-5{-ms-flex-order:5;order:5}.order-lg-6{-ms-flex-order:6;order:6}.order-lg-7{-ms-flex-order:7;order:7}.order-lg-8{-ms-flex-order:8;order:8}.order-lg-9{-ms-flex-order:9;order:9}.order-lg-10{-ms-flex-order:10;order:10}.order-lg-11{-ms-flex-order:11;order:11}.order-lg-12{-ms-flex-order:12;order:12}.offset-lg-0{margin-left:0}.offset-lg-1{margin-left:8.333333%}.offset-lg-2{margin-left:16.666667%}.offset-lg-3{margin-left:25%}.offset-lg-4{margin-left:33.333333%}.offset-lg-5{margin-left:41.666667%}.offset-lg-6{margin-left:50%}.offset-lg-7{margin-left:58.333333%}.offset-lg-8{margin-left:66.666667%}.offset-lg-9{margin-left:75%}.offset-lg-10{margin-left:83.333333%}.offset-lg-11{margin-left:91.666667%}}@media (min-width:1200px){.col-xl{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-xl-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:none}.col-xl-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-xl-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-xl-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-xl-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-xl-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-xl-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-xl-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-xl-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-xl-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-xl-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-xl-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-xl-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-xl-first{-ms-flex-order:-1;order:-1}.order-xl-last{-ms-flex-order:13;order:13}.order-xl-0{-ms-flex-order:0;order:0}.order-xl-1{-ms-flex-order:1;order:1}.order-xl-2{-ms-flex-order:2;order:2}.order-xl-3{-ms-flex-order:3;order:3}.order-xl-4{-ms-flex-order:4;order:4}.order-xl-5{-ms-flex-order:5;order:5}.order-xl-6{-ms-flex-order:6;order:6}.order-xl-7{-ms-flex-order:7;order:7}.order-xl-8{-ms-flex-order:8;order:8}.order-xl-9{-ms-flex-order:9;order:9}.order-xl-10{-ms-flex-order:10;order:10}.order-xl-11{-ms-flex-order:11;order:11}.order-xl-12{-ms-flex-order:12;order:12}.offset-xl-0{margin-left:0}.offset-xl-1{margin-left:8.333333%}.offset-xl-2{margin-left:16.666667%}.offset-xl-3{margin-left:25%}.offset-xl-4{margin-left:33.333333%}.offset-xl-5{margin-left:41.666667%}.offset-xl-6{margin-left:50%}.offset-xl-7{margin-left:58.333333%}.offset-xl-8{margin-left:66.666667%}.offset-xl-9{margin-left:75%}.offset-xl-10{margin-left:83.333333%}.offset-xl-11{margin-left:91.666667%}}.table{width:100%;max-width:100%;margin-bottom:16px;margin-bottom:1rem;background-color:transparent}.table td,.table th{padding:12px;padding:.75rem;vertical-align:top;border-top:1px solid #dee2e6}.table thead th{vertical-align:bottom;border-bottom:2px solid #dee2e6}.table tbody+tbody{border-top:2px solid #dee2e6}.table .table{background-color:#fff}.table-sm td,.table-sm th{padding:4.8px;padding:.3rem}.table-bordered,.table-bordered td,.table-bordered th{border:1px solid #dee2e6}.table-bordered thead td,.table-bordered thead th{border-bottom-width:2px}.table-striped tbody tr:nth-of-type(odd){background-color:rgba(0,0,0,.05)}.table-hover tbody tr:hover{background-color:rgba(0,0,0,.075)}.table-primary,.table-primary>td,.table-primary>th{background-color:#b8daff}.table-hover .table-primary:hover,.table-hover .table-primary:hover>td,.table-hover .table-primary:hover>th{background-color:#9fcdff}.table-secondary,.table-secondary>td,.table-secondary>th{background-color:#d6d8db}.table-hover .table-secondary:hover,.table-hover .table-secondary:hover>td,.table-hover .table-secondary:hover>th{background-color:#c8cbcf}.table-success,.table-success>td,.table-success>th{background-color:#c3e6cb}.table-hover .table-success:hover,.table-hover .table-success:hover>td,.table-hover .table-success:hover>th{background-color:#b1dfbb}.table-info,.table-info>td,.table-info>th{background-color:#bee5eb}.table-hover .table-info:hover,.table-hover .table-info:hover>td,.table-hover .table-info:hover>th{background-color:#abdde5}.table-warning,.table-warning>td,.table-warning>th{background-color:#ffeeba}.table-hover .table-warning:hover,.table-hover .table-warning:hover>td,.table-hover .table-warning:hover>th{background-color:#ffe8a1}.table-danger,.table-danger>td,.table-danger>th{background-color:#f5c6cb}.table-hover .table-danger:hover,.table-hover .table-danger:hover>td,.table-hover .table-danger:hover>th{background-color:#f1b0b7}.table-light,.table-light>td,.table-light>th{background-color:#fdfdfe}.table-hover .table-light:hover,.table-hover .table-light:hover>td,.table-hover .table-light:hover>th{background-color:#ececf6}.table-dark,.table-dark>td,.table-dark>th{background-color:#c6c8ca}.table-hover .table-dark:hover,.table-hover .table-dark:hover>td,.table-hover .table-dark:hover>th{background-color:#b9bbbe}.table-active,.table-active>td,.table-active>th,.table-hover .table-active:hover,.table-hover .table-active:hover>td,.table-hover .table-active:hover>th{background-color:rgba(0,0,0,.075)}.table .thead-dark th{color:#fff;background-color:#212529;border-color:#32383e}.table .thead-light th{color:#495057;background-color:#e9ecef;border-color:#dee2e6}.table-dark{color:#fff;background-color:#212529}.table-dark td,.table-dark th,.table-dark thead th{border-color:#32383e}.table-dark.table-bordered{border:0}.table-dark.table-striped tbody tr:nth-of-type(odd){background-color:hsla(0,0%,100%,.05)}.table-dark.table-hover tbody tr:hover{background-color:hsla(0,0%,100%,.075)}@media (max-width:575.98px){.table-responsive-sm{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-sm>.table-bordered{border:0}}@media (max-width:767.98px){.table-responsive-md{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-md>.table-bordered{border:0}}@media (max-width:991.98px){.table-responsive-lg{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-lg>.table-bordered{border:0}}@media (max-width:1199.98px){.table-responsive-xl{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive-xl>.table-bordered{border:0}}.table-responsive{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar}.table-responsive>.table-bordered{border:0}.form-control{display:block;width:100%;padding:6px 12px;padding:.375rem .75rem;font-size:16px;font-size:1rem;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:.25rem;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}.form-control::-ms-expand{background-color:transparent;border:0}.form-control:focus{color:#495057;background-color:#fff;border-color:#80bdff;outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.form-control::-webkit-input-placeholder{color:#6c757d;opacity:1}.form-control::-moz-placeholder{color:#6c757d;opacity:1}.form-control:-ms-input-placeholder,.form-control::-ms-input-placeholder{color:#6c757d;opacity:1}.form-control::placeholder{color:#6c757d;opacity:1}.form-control:disabled,.form-control[readonly]{background-color:#e9ecef;opacity:1}select.form-control:not([size]):not([multiple]){height:calc(2.25rem + 2px)}select.form-control:focus::-ms-value{color:#495057;background-color:#fff}.form-control-file,.form-control-range{display:block;width:100%}.col-form-label{padding-top:calc(.375rem + 1px);padding-bottom:calc(.375rem + 1px);margin-bottom:0;font-size:inherit;line-height:1.5}.col-form-label-lg{padding-top:calc(.5rem + 1px);padding-bottom:calc(.5rem + 1px);font-size:20px;font-size:1.25rem;line-height:1.5}.col-form-label-sm{padding-top:calc(.25rem + 1px);padding-bottom:calc(.25rem + 1px);font-size:14px;font-size:.875rem;line-height:1.5}.form-control-plaintext{display:block;width:100%;padding-top:6px;padding-top:.375rem;padding-bottom:6px;padding-bottom:.375rem;margin-bottom:0;line-height:1.5;background-color:transparent;border:solid transparent;border-width:1px 0}.form-control-plaintext.form-control-lg,.form-control-plaintext.form-control-sm,.input-group-lg>.form-control-plaintext.form-control,.input-group-lg>.input-group-append>.form-control-plaintext.btn,.input-group-lg>.input-group-append>.form-control-plaintext.input-group-text,.input-group-lg>.input-group-prepend>.form-control-plaintext.btn,.input-group-lg>.input-group-prepend>.form-control-plaintext.input-group-text,.input-group-sm>.form-control-plaintext.form-control,.input-group-sm>.input-group-append>.form-control-plaintext.btn,.input-group-sm>.input-group-append>.form-control-plaintext.input-group-text,.input-group-sm>.input-group-prepend>.form-control-plaintext.btn,.input-group-sm>.input-group-prepend>.form-control-plaintext.input-group-text{padding-right:0;padding-left:0}.form-control-sm,.input-group-sm>.form-control,.input-group-sm>.input-group-append>.btn,.input-group-sm>.input-group-append>.input-group-text,.input-group-sm>.input-group-prepend>.btn,.input-group-sm>.input-group-prepend>.input-group-text{padding:4px 8px;padding:.25rem .5rem;font-size:14px;font-size:.875rem;line-height:1.5;border-radius:.2rem}.input-group-sm>.input-group-append>select.btn:not([size]):not([multiple]),.input-group-sm>.input-group-append>select.input-group-text:not([size]):not([multiple]),.input-group-sm>.input-group-prepend>select.btn:not([size]):not([multiple]),.input-group-sm>.input-group-prepend>select.input-group-text:not([size]):not([multiple]),.input-group-sm>select.form-control:not([size]):not([multiple]),select.form-control-sm:not([size]):not([multiple]){height:calc(1.8125rem + 2px)}.form-control-lg,.input-group-lg>.form-control,.input-group-lg>.input-group-append>.btn,.input-group-lg>.input-group-append>.input-group-text,.input-group-lg>.input-group-prepend>.btn,.input-group-lg>.input-group-prepend>.input-group-text{padding:8px 16px;padding:.5rem 1rem;font-size:20px;font-size:1.25rem;line-height:1.5;border-radius:.3rem}.input-group-lg>.input-group-append>select.btn:not([size]):not([multiple]),.input-group-lg>.input-group-append>select.input-group-text:not([size]):not([multiple]),.input-group-lg>.input-group-prepend>select.btn:not([size]):not([multiple]),.input-group-lg>.input-group-prepend>select.input-group-text:not([size]):not([multiple]),.input-group-lg>select.form-control:not([size]):not([multiple]),select.form-control-lg:not([size]):not([multiple]){height:calc(2.875rem + 2px)}.form-group{margin-bottom:16px;margin-bottom:1rem}.form-text{display:block;margin-top:4px;margin-top:.25rem}.form-row{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-5px;margin-left:-5px}.form-row>.col,.form-row>[class*=col-]{padding-right:5px;padding-left:5px}.form-check{position:relative;display:block;padding-left:20px;padding-left:1.25rem}.form-check-input{position:absolute;margin-top:4.8px;margin-top:.3rem;margin-left:-20px;margin-left:-1.25rem}.form-check-input:disabled~.form-check-label{color:#6c757d}.form-check-label{margin-bottom:0}.form-check-inline{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center;padding-left:0;margin-right:12px;margin-right:.75rem}.form-check-inline .form-check-input{position:static;margin-top:0;margin-right:5px;margin-right:.3125rem;margin-left:0}.valid-feedback{display:none;width:100%;margin-top:4px;margin-top:.25rem;font-size:80%;color:#28a745}.valid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:8px;padding:.5rem;margin-top:1.6px;margin-top:.1rem;font-size:14px;font-size:.875rem;line-height:1;color:#fff;background-color:rgba(40,167,69,.8);border-radius:.2rem}.custom-select.is-valid,.form-control.is-valid,.was-validated .custom-select:valid,.was-validated .form-control:valid{border-color:#28a745}.custom-select.is-valid:focus,.form-control.is-valid:focus,.was-validated .custom-select:valid:focus,.was-validated .form-control:valid:focus{border-color:#28a745;box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.custom-select.is-valid~.valid-feedback,.custom-select.is-valid~.valid-tooltip,.form-control.is-valid~.valid-feedback,.form-control.is-valid~.valid-tooltip,.was-validated .custom-select:valid~.valid-feedback,.was-validated .custom-select:valid~.valid-tooltip,.was-validated .form-control:valid~.valid-feedback,.was-validated .form-control:valid~.valid-tooltip{display:block}.form-check-input.is-valid~.form-check-label,.was-validated .form-check-input:valid~.form-check-label{color:#28a745}.form-check-input.is-valid~.valid-feedback,.form-check-input.is-valid~.valid-tooltip,.was-validated .form-check-input:valid~.valid-feedback,.was-validated .form-check-input:valid~.valid-tooltip{display:block}.custom-control-input.is-valid~.custom-control-label,.was-validated .custom-control-input:valid~.custom-control-label{color:#28a745}.custom-control-input.is-valid~.custom-control-label:before,.was-validated .custom-control-input:valid~.custom-control-label:before{background-color:#71dd8a}.custom-control-input.is-valid~.valid-feedback,.custom-control-input.is-valid~.valid-tooltip,.was-validated .custom-control-input:valid~.valid-feedback,.was-validated .custom-control-input:valid~.valid-tooltip{display:block}.custom-control-input.is-valid:checked~.custom-control-label:before,.was-validated .custom-control-input:valid:checked~.custom-control-label:before{background-color:#34ce57}.custom-control-input.is-valid:focus~.custom-control-label:before,.was-validated .custom-control-input:valid:focus~.custom-control-label:before{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(40,167,69,.25)}.custom-file-input.is-valid~.custom-file-label,.was-validated .custom-file-input:valid~.custom-file-label{border-color:#28a745}.custom-file-input.is-valid~.custom-file-label:before,.was-validated .custom-file-input:valid~.custom-file-label:before{border-color:inherit}.custom-file-input.is-valid~.valid-feedback,.custom-file-input.is-valid~.valid-tooltip,.was-validated .custom-file-input:valid~.valid-feedback,.was-validated .custom-file-input:valid~.valid-tooltip{display:block}.custom-file-input.is-valid:focus~.custom-file-label,.was-validated .custom-file-input:valid:focus~.custom-file-label{box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.invalid-feedback{display:none;width:100%;margin-top:4px;margin-top:.25rem;font-size:80%;color:#dc3545}.invalid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:8px;padding:.5rem;margin-top:1.6px;margin-top:.1rem;font-size:14px;font-size:.875rem;line-height:1;color:#fff;background-color:rgba(220,53,69,.8);border-radius:.2rem}.custom-select.is-invalid,.form-control.is-invalid,.was-validated .custom-select:invalid,.was-validated .form-control:invalid{border-color:#dc3545}.custom-select.is-invalid:focus,.form-control.is-invalid:focus,.was-validated .custom-select:invalid:focus,.was-validated .form-control:invalid:focus{border-color:#dc3545;box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.custom-select.is-invalid~.invalid-feedback,.custom-select.is-invalid~.invalid-tooltip,.form-control.is-invalid~.invalid-feedback,.form-control.is-invalid~.invalid-tooltip,.was-validated .custom-select:invalid~.invalid-feedback,.was-validated .custom-select:invalid~.invalid-tooltip,.was-validated .form-control:invalid~.invalid-feedback,.was-validated .form-control:invalid~.invalid-tooltip{display:block}.form-check-input.is-invalid~.form-check-label,.was-validated .form-check-input:invalid~.form-check-label{color:#dc3545}.form-check-input.is-invalid~.invalid-feedback,.form-check-input.is-invalid~.invalid-tooltip,.was-validated .form-check-input:invalid~.invalid-feedback,.was-validated .form-check-input:invalid~.invalid-tooltip{display:block}.custom-control-input.is-invalid~.custom-control-label,.was-validated .custom-control-input:invalid~.custom-control-label{color:#dc3545}.custom-control-input.is-invalid~.custom-control-label:before,.was-validated .custom-control-input:invalid~.custom-control-label:before{background-color:#efa2a9}.custom-control-input.is-invalid~.invalid-feedback,.custom-control-input.is-invalid~.invalid-tooltip,.was-validated .custom-control-input:invalid~.invalid-feedback,.was-validated .custom-control-input:invalid~.invalid-tooltip{display:block}.custom-control-input.is-invalid:checked~.custom-control-label:before,.was-validated .custom-control-input:invalid:checked~.custom-control-label:before{background-color:#e4606d}.custom-control-input.is-invalid:focus~.custom-control-label:before,.was-validated .custom-control-input:invalid:focus~.custom-control-label:before{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(220,53,69,.25)}.custom-file-input.is-invalid~.custom-file-label,.was-validated .custom-file-input:invalid~.custom-file-label{border-color:#dc3545}.custom-file-input.is-invalid~.custom-file-label:before,.was-validated .custom-file-input:invalid~.custom-file-label:before{border-color:inherit}.custom-file-input.is-invalid~.invalid-feedback,.custom-file-input.is-invalid~.invalid-tooltip,.was-validated .custom-file-input:invalid~.invalid-feedback,.was-validated .custom-file-input:invalid~.invalid-tooltip{display:block}.custom-file-input.is-invalid:focus~.custom-file-label,.was-validated .custom-file-input:invalid:focus~.custom-file-label{box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.form-inline{display:-ms-flexbox;display:flex;-ms-flex-flow:row wrap;flex-flow:row wrap;-ms-flex-align:center;align-items:center}.form-inline .form-check{width:100%}@media (min-width:576px){.form-inline label{-ms-flex-align:center;-ms-flex-pack:center;justify-content:center}.form-inline .form-group,.form-inline label{display:-ms-flexbox;display:flex;align-items:center;margin-bottom:0}.form-inline .form-group{-ms-flex:0 0 auto;flex:0 0 auto;-ms-flex-flow:row wrap;flex-flow:row wrap;-ms-flex-align:center}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-plaintext{display:inline-block}.form-inline .input-group{width:auto}.form-inline .form-check{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:auto;padding-left:0}.form-inline .form-check-input{position:relative;margin-top:0;margin-right:.25rem;margin-left:0}.form-inline .custom-control{-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.form-inline .custom-control-label{margin-bottom:0}}.btn{display:inline-block;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid transparent;padding:6px 12px;padding:.375rem .75rem;font-size:16px;font-size:1rem;line-height:1.5;border-radius:.25rem;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}.btn:focus,.btn:hover{text-decoration:none}.btn.focus,.btn:focus{outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.btn.disabled,.btn:disabled{opacity:.65}.btn:not(:disabled):not(.disabled){cursor:pointer}.btn:not(:disabled):not(.disabled).active,.btn:not(:disabled):not(.disabled):active{background-image:none}a.btn.disabled,fieldset:disabled a.btn{pointer-events:none}.btn-primary{color:#fff;background-color:#007bff;border-color:#007bff}.btn-primary:hover{color:#fff;background-color:#0069d9;border-color:#0062cc}.btn-primary.focus,.btn-primary:focus{box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.btn-primary.disabled,.btn-primary:disabled{color:#fff;background-color:#007bff;border-color:#007bff}.btn-primary:not(:disabled):not(.disabled).active,.btn-primary:not(:disabled):not(.disabled):active,.show>.btn-primary.dropdown-toggle{color:#fff;background-color:#0062cc;border-color:#005cbf}.btn-primary:not(:disabled):not(.disabled).active:focus,.btn-primary:not(:disabled):not(.disabled):active:focus,.show>.btn-primary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.btn-secondary{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-secondary:hover{color:#fff;background-color:#5a6268;border-color:#545b62}.btn-secondary.focus,.btn-secondary:focus{box-shadow:0 0 0 .2rem hsla(208,7%,46%,.5)}.btn-secondary.disabled,.btn-secondary:disabled{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-secondary:not(:disabled):not(.disabled).active,.btn-secondary:not(:disabled):not(.disabled):active,.show>.btn-secondary.dropdown-toggle{color:#fff;background-color:#545b62;border-color:#4e555b}.btn-secondary:not(:disabled):not(.disabled).active:focus,.btn-secondary:not(:disabled):not(.disabled):active:focus,.show>.btn-secondary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem hsla(208,7%,46%,.5)}.btn-success{color:#fff;background-color:#28a745;border-color:#28a745}.btn-success:hover{color:#fff;background-color:#218838;border-color:#1e7e34}.btn-success.focus,.btn-success:focus{box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.btn-success.disabled,.btn-success:disabled{color:#fff;background-color:#28a745;border-color:#28a745}.btn-success:not(:disabled):not(.disabled).active,.btn-success:not(:disabled):not(.disabled):active,.show>.btn-success.dropdown-toggle{color:#fff;background-color:#1e7e34;border-color:#1c7430}.btn-success:not(:disabled):not(.disabled).active:focus,.btn-success:not(:disabled):not(.disabled):active:focus,.show>.btn-success.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.btn-info{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-info:hover{color:#fff;background-color:#138496;border-color:#117a8b}.btn-info.focus,.btn-info:focus{box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.btn-info.disabled,.btn-info:disabled{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-info:not(:disabled):not(.disabled).active,.btn-info:not(:disabled):not(.disabled):active,.show>.btn-info.dropdown-toggle{color:#fff;background-color:#117a8b;border-color:#10707f}.btn-info:not(:disabled):not(.disabled).active:focus,.btn-info:not(:disabled):not(.disabled):active:focus,.show>.btn-info.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.btn-warning{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-warning:hover{color:#212529;background-color:#e0a800;border-color:#d39e00}.btn-warning.focus,.btn-warning:focus{box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.btn-warning.disabled,.btn-warning:disabled{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-warning:not(:disabled):not(.disabled).active,.btn-warning:not(:disabled):not(.disabled):active,.show>.btn-warning.dropdown-toggle{color:#212529;background-color:#d39e00;border-color:#c69500}.btn-warning:not(:disabled):not(.disabled).active:focus,.btn-warning:not(:disabled):not(.disabled):active:focus,.show>.btn-warning.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.btn-danger{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-danger:hover{color:#fff;background-color:#c82333;border-color:#bd2130}.btn-danger.focus,.btn-danger:focus{box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.btn-danger.disabled,.btn-danger:disabled{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-danger:not(:disabled):not(.disabled).active,.btn-danger:not(:disabled):not(.disabled):active,.show>.btn-danger.dropdown-toggle{color:#fff;background-color:#bd2130;border-color:#b21f2d}.btn-danger:not(:disabled):not(.disabled).active:focus,.btn-danger:not(:disabled):not(.disabled):active:focus,.show>.btn-danger.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.btn-light{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:hover{color:#212529;background-color:#e2e6ea;border-color:#dae0e5}.btn-light.focus,.btn-light:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-light.disabled,.btn-light:disabled{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:not(:disabled):not(.disabled).active,.btn-light:not(:disabled):not(.disabled):active,.show>.btn-light.dropdown-toggle{color:#212529;background-color:#dae0e5;border-color:#d3d9df}.btn-light:not(:disabled):not(.disabled).active:focus,.btn-light:not(:disabled):not(.disabled):active:focus,.show>.btn-light.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-dark{color:#fff;background-color:#343a40;border-color:#343a40}.btn-dark:hover{color:#fff;background-color:#23272b;border-color:#1d2124}.btn-dark.focus,.btn-dark:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-dark.disabled,.btn-dark:disabled{color:#fff;background-color:#343a40;border-color:#343a40}.btn-dark:not(:disabled):not(.disabled).active,.btn-dark:not(:disabled):not(.disabled):active,.show>.btn-dark.dropdown-toggle{color:#fff;background-color:#1d2124;border-color:#171a1d}.btn-dark:not(:disabled):not(.disabled).active:focus,.btn-dark:not(:disabled):not(.disabled):active:focus,.show>.btn-dark.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-outline-primary{color:#007bff;background-color:transparent;background-image:none;border-color:#007bff}.btn-outline-primary:hover{color:#fff;background-color:#007bff;border-color:#007bff}.btn-outline-primary.focus,.btn-outline-primary:focus{box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.btn-outline-primary.disabled,.btn-outline-primary:disabled{color:#007bff;background-color:transparent}.btn-outline-primary:not(:disabled):not(.disabled).active,.btn-outline-primary:not(:disabled):not(.disabled):active,.show>.btn-outline-primary.dropdown-toggle{color:#fff;background-color:#007bff;border-color:#007bff}.btn-outline-primary:not(:disabled):not(.disabled).active:focus,.btn-outline-primary:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-primary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.btn-outline-secondary{color:#6c757d;background-color:transparent;background-image:none;border-color:#6c757d}.btn-outline-secondary:hover{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-outline-secondary.focus,.btn-outline-secondary:focus{box-shadow:0 0 0 .2rem hsla(208,7%,46%,.5)}.btn-outline-secondary.disabled,.btn-outline-secondary:disabled{color:#6c757d;background-color:transparent}.btn-outline-secondary:not(:disabled):not(.disabled).active,.btn-outline-secondary:not(:disabled):not(.disabled):active,.show>.btn-outline-secondary.dropdown-toggle{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-outline-secondary:not(:disabled):not(.disabled).active:focus,.btn-outline-secondary:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-secondary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem hsla(208,7%,46%,.5)}.btn-outline-success{color:#28a745;background-color:transparent;background-image:none;border-color:#28a745}.btn-outline-success:hover{color:#fff;background-color:#28a745;border-color:#28a745}.btn-outline-success.focus,.btn-outline-success:focus{box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.btn-outline-success.disabled,.btn-outline-success:disabled{color:#28a745;background-color:transparent}.btn-outline-success:not(:disabled):not(.disabled).active,.btn-outline-success:not(:disabled):not(.disabled):active,.show>.btn-outline-success.dropdown-toggle{color:#fff;background-color:#28a745;border-color:#28a745}.btn-outline-success:not(:disabled):not(.disabled).active:focus,.btn-outline-success:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-success.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.btn-outline-info{color:#17a2b8;background-color:transparent;background-image:none;border-color:#17a2b8}.btn-outline-info:hover{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-outline-info.focus,.btn-outline-info:focus{box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.btn-outline-info.disabled,.btn-outline-info:disabled{color:#17a2b8;background-color:transparent}.btn-outline-info:not(:disabled):not(.disabled).active,.btn-outline-info:not(:disabled):not(.disabled):active,.show>.btn-outline-info.dropdown-toggle{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-outline-info:not(:disabled):not(.disabled).active:focus,.btn-outline-info:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-info.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.btn-outline-warning{color:#ffc107;background-color:transparent;background-image:none;border-color:#ffc107}.btn-outline-warning:hover{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-outline-warning.focus,.btn-outline-warning:focus{box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.btn-outline-warning.disabled,.btn-outline-warning:disabled{color:#ffc107;background-color:transparent}.btn-outline-warning:not(:disabled):not(.disabled).active,.btn-outline-warning:not(:disabled):not(.disabled):active,.show>.btn-outline-warning.dropdown-toggle{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-outline-warning:not(:disabled):not(.disabled).active:focus,.btn-outline-warning:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-warning.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.btn-outline-danger{color:#dc3545;background-color:transparent;background-image:none;border-color:#dc3545}.btn-outline-danger:hover{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-outline-danger.focus,.btn-outline-danger:focus{box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.btn-outline-danger.disabled,.btn-outline-danger:disabled{color:#dc3545;background-color:transparent}.btn-outline-danger:not(:disabled):not(.disabled).active,.btn-outline-danger:not(:disabled):not(.disabled):active,.show>.btn-outline-danger.dropdown-toggle{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-outline-danger:not(:disabled):not(.disabled).active:focus,.btn-outline-danger:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-danger.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.btn-outline-light{color:#f8f9fa;background-color:transparent;background-image:none;border-color:#f8f9fa}.btn-outline-light:hover{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light.focus,.btn-outline-light:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-outline-light.disabled,.btn-outline-light:disabled{color:#f8f9fa;background-color:transparent}.btn-outline-light:not(:disabled):not(.disabled).active,.btn-outline-light:not(:disabled):not(.disabled):active,.show>.btn-outline-light.dropdown-toggle{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light:not(:disabled):not(.disabled).active:focus,.btn-outline-light:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-light.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-outline-dark{color:#343a40;background-color:transparent;background-image:none;border-color:#343a40}.btn-outline-dark:hover{color:#fff;background-color:#343a40;border-color:#343a40}.btn-outline-dark.focus,.btn-outline-dark:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-outline-dark.disabled,.btn-outline-dark:disabled{color:#343a40;background-color:transparent}.btn-outline-dark:not(:disabled):not(.disabled).active,.btn-outline-dark:not(:disabled):not(.disabled):active,.show>.btn-outline-dark.dropdown-toggle{color:#fff;background-color:#343a40;border-color:#343a40}.btn-outline-dark:not(:disabled):not(.disabled).active:focus,.btn-outline-dark:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-dark.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-link{font-weight:400;color:#007bff;background-color:transparent}.btn-link:hover{color:#0056b3;background-color:transparent}.btn-link.focus,.btn-link:focus,.btn-link:hover{text-decoration:underline;border-color:transparent}.btn-link.focus,.btn-link:focus{box-shadow:none}.btn-link.disabled,.btn-link:disabled{color:#6c757d}.btn-group-lg>.btn,.btn-lg{padding:8px 16px;padding:.5rem 1rem;font-size:20px;font-size:1.25rem;line-height:1.5;border-radius:.3rem}.btn-group-sm>.btn,.btn-sm{padding:4px 8px;padding:.25rem .5rem;font-size:14px;font-size:.875rem;line-height:1.5;border-radius:.2rem}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:8px;margin-top:.5rem}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{opacity:0;transition:opacity .15s linear}.fade.show{opacity:1}.collapse{display:none}.collapse.show{display:block}tr.collapse.show{display:table-row}tbody.collapse.show{display:table-row-group}.collapsing{height:0;overflow:hidden;transition:height .35s ease}.collapsing,.dropdown,.dropup{position:relative}.dropdown-toggle:after{display:inline-block;width:0;height:0;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle:empty:after{margin-left:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;min-width:10rem;padding:8px 0;padding:.5rem 0;margin:2px 0 0;margin:.125rem 0 0;font-size:16px;font-size:1rem;color:#212529;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.dropup .dropdown-menu{margin-top:0;margin-bottom:2px;margin-bottom:.125rem}.dropup .dropdown-toggle:after{display:inline-block;width:0;height:0;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup .dropdown-toggle:empty:after{margin-left:0}.dropright .dropdown-menu{margin-top:0;margin-left:2px;margin-left:.125rem}.dropright .dropdown-toggle:after{display:inline-block;width:0;height:0;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid transparent;border-bottom:.3em solid transparent;border-left:.3em solid}.dropright .dropdown-toggle:empty:after{margin-left:0}.dropright .dropdown-toggle:after{vertical-align:0}.dropleft .dropdown-menu{margin-top:0;margin-right:2px;margin-right:.125rem}.dropleft .dropdown-toggle:after{display:inline-block;width:0;height:0;margin-left:.255em;vertical-align:.255em;content:\"\";display:none}.dropleft .dropdown-toggle:before{display:inline-block;width:0;height:0;margin-right:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropleft .dropdown-toggle:empty:after{margin-left:0}.dropleft .dropdown-toggle:before{vertical-align:0}.dropdown-divider{height:0;margin:8px 0;margin:.5rem 0;overflow:hidden;border-top:1px solid #e9ecef}.dropdown-item{display:block;width:100%;padding:4px 24px;padding:.25rem 1.5rem;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.dropdown-item:focus,.dropdown-item:hover{color:#16181b;text-decoration:none;background-color:#f8f9fa}.dropdown-item.active,.dropdown-item:active{color:#fff;text-decoration:none;background-color:#007bff}.dropdown-item.disabled,.dropdown-item:disabled{color:#6c757d;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:8px 24px;padding:.5rem 1.5rem;margin-bottom:0;font-size:14px;font-size:.875rem;color:#6c757d;white-space:nowrap}.btn-group,.btn-group-vertical{position:relative;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;-ms-flex:0 1 auto;flex:0 1 auto}.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:hover,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus,.btn-group>.btn:hover{z-index:1}.btn-group-vertical .btn+.btn,.btn-group-vertical .btn+.btn-group,.btn-group-vertical .btn-group+.btn,.btn-group-vertical .btn-group+.btn-group,.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group{margin-left:-1px}.btn-toolbar{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-pack:start;justify-content:flex-start}.btn-toolbar .input-group{width:auto}.btn-group>.btn:first-child{margin-left:0}.btn-group>.btn-group:not(:last-child)>.btn,.btn-group>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:not(:first-child)>.btn,.btn-group>.btn:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.dropdown-toggle-split{padding-right:9px;padding-right:.5625rem;padding-left:9px;padding-left:.5625rem}.dropdown-toggle-split:after{margin-left:0}.btn-group-sm>.btn+.dropdown-toggle-split,.btn-sm+.dropdown-toggle-split{padding-right:6px;padding-right:.375rem;padding-left:6px;padding-left:.375rem}.btn-group-lg>.btn+.dropdown-toggle-split,.btn-lg+.dropdown-toggle-split{padding-right:12px;padding-right:.75rem;padding-left:12px;padding-left:.75rem}.btn-group-vertical{-ms-flex-direction:column;flex-direction:column;-ms-flex-align:start;align-items:flex-start;-ms-flex-pack:center;justify-content:center}.btn-group-vertical .btn,.btn-group-vertical .btn-group{width:100%}.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn-group:not(:last-child)>.btn,.btn-group-vertical>.btn:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:not(:first-child)>.btn,.btn-group-vertical>.btn:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.btn-group-toggle>.btn,.btn-group-toggle>.btn-group>.btn{margin-bottom:0}.btn-group-toggle>.btn-group>.btn input[type=checkbox],.btn-group-toggle>.btn-group>.btn input[type=radio],.btn-group-toggle>.btn input[type=checkbox],.btn-group-toggle>.btn input[type=radio]{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.input-group{position:relative;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:stretch;align-items:stretch;width:100%}.input-group>.custom-file,.input-group>.custom-select,.input-group>.form-control{position:relative;-ms-flex:1 1 auto;flex:1 1 auto;width:1%;margin-bottom:0}.input-group>.custom-file:focus,.input-group>.custom-select:focus,.input-group>.form-control:focus{z-index:3}.input-group>.custom-file+.custom-file,.input-group>.custom-file+.custom-select,.input-group>.custom-file+.form-control,.input-group>.custom-select+.custom-file,.input-group>.custom-select+.custom-select,.input-group>.custom-select+.form-control,.input-group>.form-control+.custom-file,.input-group>.form-control+.custom-select,.input-group>.form-control+.form-control{margin-left:-1px}.input-group>.custom-select:not(:last-child),.input-group>.form-control:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.custom-select:not(:first-child),.input-group>.form-control:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.input-group>.custom-file{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.input-group>.custom-file:not(:last-child) .custom-file-label,.input-group>.custom-file:not(:last-child) .custom-file-label:before{border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.custom-file:not(:first-child) .custom-file-label,.input-group>.custom-file:not(:first-child) .custom-file-label:before{border-top-left-radius:0;border-bottom-left-radius:0}.input-group-append,.input-group-prepend{display:-ms-flexbox;display:flex}.input-group-append .btn,.input-group-prepend .btn{position:relative;z-index:2}.input-group-append .btn+.btn,.input-group-append .btn+.input-group-text,.input-group-append .input-group-text+.btn,.input-group-append .input-group-text+.input-group-text,.input-group-prepend .btn+.btn,.input-group-prepend .btn+.input-group-text,.input-group-prepend .input-group-text+.btn,.input-group-prepend .input-group-text+.input-group-text{margin-left:-1px}.input-group-prepend{margin-right:-1px}.input-group-append{margin-left:-1px}.input-group-text{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;padding:6px 12px;padding:.375rem .75rem;margin-bottom:0;font-size:16px;font-size:1rem;font-weight:400;line-height:1.5;color:#495057;text-align:center;white-space:nowrap;background-color:#e9ecef;border:1px solid #ced4da;border-radius:.25rem}.input-group-text input[type=checkbox],.input-group-text input[type=radio]{margin-top:0}.input-group>.input-group-append:last-child>.btn:not(:last-child):not(.dropdown-toggle),.input-group>.input-group-append:last-child>.input-group-text:not(:last-child),.input-group>.input-group-append:not(:last-child)>.btn,.input-group>.input-group-append:not(:last-child)>.input-group-text,.input-group>.input-group-prepend>.btn,.input-group>.input-group-prepend>.input-group-text{border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.input-group-append>.btn,.input-group>.input-group-append>.input-group-text,.input-group>.input-group-prepend:first-child>.btn:not(:first-child),.input-group>.input-group-prepend:first-child>.input-group-text:not(:first-child),.input-group>.input-group-prepend:not(:first-child)>.btn,.input-group>.input-group-prepend:not(:first-child)>.input-group-text{border-top-left-radius:0;border-bottom-left-radius:0}.custom-control{position:relative;display:block;min-height:24px;min-height:1.5rem;padding-left:24px;padding-left:1.5rem}.custom-control-inline{display:-ms-inline-flexbox;display:inline-flex;margin-right:16px;margin-right:1rem}.custom-control-input{position:absolute;z-index:-1;opacity:0}.custom-control-input:checked~.custom-control-label:before{color:#fff;background-color:#007bff}.custom-control-input:focus~.custom-control-label:before{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(0,123,255,.25)}.custom-control-input:active~.custom-control-label:before{color:#fff;background-color:#b3d7ff}.custom-control-input:disabled~.custom-control-label{color:#6c757d}.custom-control-input:disabled~.custom-control-label:before{background-color:#e9ecef}.custom-control-label{margin-bottom:0}.custom-control-label:before{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:#dee2e6}.custom-control-label:after,.custom-control-label:before{position:absolute;top:4px;top:.25rem;left:0;display:block;width:16px;width:1rem;height:16px;height:1rem;content:\"\"}.custom-control-label:after{background-repeat:no-repeat;background-position:50%;background-size:50% 50%}.custom-checkbox .custom-control-label:before{border-radius:.25rem}.custom-checkbox .custom-control-input:checked~.custom-control-label:before{background-color:#007bff}.custom-checkbox .custom-control-input:checked~.custom-control-label:after{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3E%3C/svg%3E\")}.custom-checkbox .custom-control-input:indeterminate~.custom-control-label:before{background-color:#007bff}.custom-checkbox .custom-control-input:indeterminate~.custom-control-label:after{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3E%3Cpath stroke='%23fff' d='M0 2h4'/%3E%3C/svg%3E\")}.custom-checkbox .custom-control-input:disabled:checked~.custom-control-label:before{background-color:rgba(0,123,255,.5)}.custom-checkbox .custom-control-input:disabled:indeterminate~.custom-control-label:before{background-color:rgba(0,123,255,.5)}.custom-radio .custom-control-label:before{border-radius:50%}.custom-radio .custom-control-input:checked~.custom-control-label:before{background-color:#007bff}.custom-radio .custom-control-input:checked~.custom-control-label:after{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill='%23fff'/%3E%3C/svg%3E\")}.custom-radio .custom-control-input:disabled:checked~.custom-control-label:before{background-color:rgba(0,123,255,.5)}.custom-select{display:inline-block;width:100%;height:calc(2.25rem + 2px);padding:6px 28px 6px 12px;padding:.375rem 1.75rem .375rem .75rem;line-height:1.5;color:#495057;vertical-align:middle;background:#fff url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E\") no-repeat right 12px center;background:#fff url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E\") no-repeat right .75rem center;background-size:8px 10px;border:1px solid #ced4da;border-radius:.25rem;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-select:focus{border-color:#80bdff;outline:0;box-shadow:inset 0 1px 2px rgba(0,0,0,.075),0 0 5px rgba(128,189,255,.5)}.custom-select:focus::-ms-value{color:#495057;background-color:#fff}.custom-select[multiple],.custom-select[size]:not([size=\"1\"]){height:auto;padding-right:12px;padding-right:.75rem;background-image:none}.custom-select:disabled{color:#6c757d;background-color:#e9ecef}.custom-select::-ms-expand{opacity:0}.custom-select-sm{height:calc(1.8125rem + 2px);font-size:75%}.custom-select-lg,.custom-select-sm{padding-top:6px;padding-top:.375rem;padding-bottom:6px;padding-bottom:.375rem}.custom-select-lg{height:calc(2.875rem + 2px);font-size:125%}.custom-file{display:inline-block;margin-bottom:0}.custom-file,.custom-file-input{position:relative;width:100%;height:calc(2.25rem + 2px)}.custom-file-input{z-index:2;margin:0;opacity:0}.custom-file-input:focus~.custom-file-control{border-color:#80bdff;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.custom-file-input:focus~.custom-file-control:before{border-color:#80bdff}.custom-file-input:lang(en)~.custom-file-label:after{content:\"Browse\"}.custom-file-label{left:0;z-index:1;height:calc(2.25rem + 2px);background-color:#fff;border:1px solid #ced4da;border-radius:.25rem}.custom-file-label,.custom-file-label:after{position:absolute;top:0;right:0;padding:6px 12px;padding:.375rem .75rem;line-height:1.5;color:#495057}.custom-file-label:after{bottom:0;z-index:3;display:block;height:calc((2.25rem + 2px) - 1px * 2);content:\"Browse\";background-color:#e9ecef;border-left:1px solid #ced4da;border-radius:0 .25rem .25rem 0}.nav{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-left:0;margin-bottom:0;list-style:none}.nav-link{display:block;padding:8px 16px;padding:.5rem 1rem}.nav-link:focus,.nav-link:hover{text-decoration:none}.nav-link.disabled{color:#6c757d}.nav-tabs{border-bottom:1px solid #dee2e6}.nav-tabs .nav-item{margin-bottom:-1px}.nav-tabs .nav-link{border:1px solid transparent;border-top-left-radius:4px;border-top-left-radius:.25rem;border-top-right-radius:4px;border-top-right-radius:.25rem}.nav-tabs .nav-link:focus,.nav-tabs .nav-link:hover{border-color:#e9ecef #e9ecef #dee2e6}.nav-tabs .nav-link.disabled{color:#6c757d;background-color:transparent;border-color:transparent}.nav-tabs .nav-item.show .nav-link,.nav-tabs .nav-link.active{color:#495057;background-color:#fff;border-color:#dee2e6 #dee2e6 #fff}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}.nav-pills .nav-link{border-radius:.25rem}.nav-pills .nav-link.active,.nav-pills .show>.nav-link{color:#fff;background-color:#007bff}.nav-fill .nav-item{-ms-flex:1 1 auto;flex:1 1 auto;text-align:center}.nav-justified .nav-item{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;text-align:center}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.navbar{position:relative;padding:8px 16px;padding:.5rem 1rem}.navbar,.navbar>.container,.navbar>.container-fluid{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}.navbar-brand{display:inline-block;padding-top:5px;padding-top:.3125rem;padding-bottom:5px;padding-bottom:.3125rem;margin-right:16px;margin-right:1rem;font-size:20px;font-size:1.25rem;line-height:inherit;white-space:nowrap}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-nav{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;padding-left:0;margin-bottom:0;list-style:none}.navbar-nav .nav-link{padding-right:0;padding-left:0}.navbar-nav .dropdown-menu{position:static;float:none}.navbar-text{display:inline-block;padding-top:8px;padding-top:.5rem;padding-bottom:8px;padding-bottom:.5rem}.navbar-collapse{-ms-flex-preferred-size:100%;flex-basis:100%;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center}.navbar-toggler{padding:4px 12px;padding:.25rem .75rem;font-size:20px;font-size:1.25rem;line-height:1;background-color:transparent;border:1px solid transparent;border-radius:.25rem}.navbar-toggler:focus,.navbar-toggler:hover{text-decoration:none}.navbar-toggler:not(:disabled):not(.disabled){cursor:pointer}.navbar-toggler-icon{display:inline-block;width:1.5em;height:1.5em;vertical-align:middle;content:\"\";background:no-repeat 50%;background-size:100% 100%}@media (max-width:575.98px){.navbar-expand-sm>.container,.navbar-expand-sm>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:576px){.navbar-expand-sm{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-sm .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-sm .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand-sm .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-sm>.container,.navbar-expand-sm>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-sm .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-sm .navbar-toggler{display:none}.navbar-expand-sm .dropup .dropdown-menu{top:auto;bottom:100%}}@media (max-width:767.98px){.navbar-expand-md>.container,.navbar-expand-md>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:768px){.navbar-expand-md{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-md .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-md .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand-md .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-md>.container,.navbar-expand-md>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-md .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-md .navbar-toggler{display:none}.navbar-expand-md .dropup .dropdown-menu{top:auto;bottom:100%}}@media (max-width:991.98px){.navbar-expand-lg>.container,.navbar-expand-lg>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:992px){.navbar-expand-lg{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-lg .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-lg .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand-lg .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-lg>.container,.navbar-expand-lg>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-lg .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-lg .navbar-toggler{display:none}.navbar-expand-lg .dropup .dropdown-menu{top:auto;bottom:100%}}@media (max-width:1199.98px){.navbar-expand-xl>.container,.navbar-expand-xl>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:1200px){.navbar-expand-xl{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-xl .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xl .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand-xl .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-xl>.container,.navbar-expand-xl>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-xl .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-xl .navbar-toggler{display:none}.navbar-expand-xl .dropup .dropdown-menu{top:auto;bottom:100%}}.navbar-expand{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand>.container,.navbar-expand>.container-fluid{padding-right:0;padding-left:0}.navbar-expand .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.navbar-expand .navbar-nav .dropdown-menu-right{right:0;left:auto}.navbar-expand .navbar-nav .nav-link{padding-right:8px;padding-right:.5rem;padding-left:8px;padding-left:.5rem}.navbar-expand>.container,.navbar-expand>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand .navbar-toggler{display:none}.navbar-expand .dropup .dropdown-menu{top:auto;bottom:100%}.navbar-light .navbar-brand,.navbar-light .navbar-brand:focus,.navbar-light .navbar-brand:hover{color:rgba(0,0,0,.9)}.navbar-light .navbar-nav .nav-link{color:rgba(0,0,0,.5)}.navbar-light .navbar-nav .nav-link:focus,.navbar-light .navbar-nav .nav-link:hover{color:rgba(0,0,0,.7)}.navbar-light .navbar-nav .nav-link.disabled{color:rgba(0,0,0,.3)}.navbar-light .navbar-nav .active>.nav-link,.navbar-light .navbar-nav .nav-link.active,.navbar-light .navbar-nav .nav-link.show,.navbar-light .navbar-nav .show>.nav-link{color:rgba(0,0,0,.9)}.navbar-light .navbar-toggler{color:rgba(0,0,0,.5);border-color:rgba(0,0,0,.1)}.navbar-light .navbar-toggler-icon{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba(0, 0, 0, 0.5)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E\")}.navbar-light .navbar-text{color:rgba(0,0,0,.5)}.navbar-light .navbar-text a,.navbar-light .navbar-text a:focus,.navbar-light .navbar-text a:hover{color:rgba(0,0,0,.9)}.navbar-dark .navbar-brand,.navbar-dark .navbar-brand:focus,.navbar-dark .navbar-brand:hover{color:#fff}.navbar-dark .navbar-nav .nav-link{color:hsla(0,0%,100%,.5)}.navbar-dark .navbar-nav .nav-link:focus,.navbar-dark .navbar-nav .nav-link:hover{color:hsla(0,0%,100%,.75)}.navbar-dark .navbar-nav .nav-link.disabled{color:hsla(0,0%,100%,.25)}.navbar-dark .navbar-nav .active>.nav-link,.navbar-dark .navbar-nav .nav-link.active,.navbar-dark .navbar-nav .nav-link.show,.navbar-dark .navbar-nav .show>.nav-link{color:#fff}.navbar-dark .navbar-toggler{color:hsla(0,0%,100%,.5);border-color:hsla(0,0%,100%,.1)}.navbar-dark .navbar-toggler-icon{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='rgba(255, 255, 255, 0.5)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E\")}.navbar-dark .navbar-text{color:hsla(0,0%,100%,.5)}.navbar-dark .navbar-text a,.navbar-dark .navbar-text a:focus,.navbar-dark .navbar-text a:hover{color:#fff}.card{position:relative;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;min-width:0;word-wrap:break-word;background-color:#fff;background-clip:border-box;border:1px solid rgba(0,0,0,.125);border-radius:.25rem}.card>hr{margin-right:0;margin-left:0}.card>.list-group:first-child .list-group-item:first-child{border-top-left-radius:4px;border-top-left-radius:.25rem;border-top-right-radius:4px;border-top-right-radius:.25rem}.card>.list-group:last-child .list-group-item:last-child{border-bottom-right-radius:4px;border-bottom-right-radius:.25rem;border-bottom-left-radius:4px;border-bottom-left-radius:.25rem}.card-body{-ms-flex:1 1 auto;flex:1 1 auto;padding:20px;padding:1.25rem}.card-title{margin-bottom:12px;margin-bottom:.75rem}.card-subtitle{margin-top:-6px;margin-top:-.375rem}.card-subtitle,.card-text:last-child{margin-bottom:0}.card-link:hover{text-decoration:none}.card-link+.card-link{margin-left:20px;margin-left:1.25rem}.card-header{padding:12px 20px;padding:.75rem 1.25rem;margin-bottom:0;background-color:rgba(0,0,0,.03);border-bottom:1px solid rgba(0,0,0,.125)}.card-header:first-child{border-radius:calc(.25rem - 1px) calc(.25rem - 1px) 0 0}.card-header+.list-group .list-group-item:first-child{border-top:0}.card-footer{padding:12px 20px;padding:.75rem 1.25rem;background-color:rgba(0,0,0,.03);border-top:1px solid rgba(0,0,0,.125)}.card-footer:last-child{border-radius:0 0 calc(.25rem - 1px) calc(.25rem - 1px)}.card-header-tabs{margin-bottom:-12px;margin-bottom:-.75rem;border-bottom:0}.card-header-pills,.card-header-tabs{margin-right:-10px;margin-right:-.625rem;margin-left:-10px;margin-left:-.625rem}.card-img-overlay{position:absolute;top:0;right:0;bottom:0;left:0;padding:20px;padding:1.25rem}.card-img{width:100%;border-radius:calc(.25rem - 1px)}.card-img-top{width:100%;border-top-left-radius:calc(.25rem - 1px);border-top-right-radius:calc(.25rem - 1px)}.card-img-bottom{width:100%;border-bottom-right-radius:calc(.25rem - 1px);border-bottom-left-radius:calc(.25rem - 1px)}.card-deck{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.card-deck .card{margin-bottom:15px}@media (min-width:576px){.card-deck{-ms-flex-flow:row wrap;flex-flow:row wrap;margin-right:-15px;margin-left:-15px}.card-deck .card{display:-ms-flexbox;display:flex;-ms-flex:1 0 0%;flex:1 0 0%;-ms-flex-direction:column;flex-direction:column;margin-right:15px;margin-bottom:0;margin-left:15px}}.card-group{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.card-group>.card{margin-bottom:15px}@media (min-width:576px){.card-group{-ms-flex-flow:row wrap;flex-flow:row wrap}.card-group>.card{-ms-flex:1 0 0%;flex:1 0 0%;margin-bottom:0}.card-group>.card+.card{margin-left:0;border-left:0}.card-group>.card:first-child{border-top-right-radius:0;border-bottom-right-radius:0}.card-group>.card:first-child .card-header,.card-group>.card:first-child .card-img-top{border-top-right-radius:0}.card-group>.card:first-child .card-footer,.card-group>.card:first-child .card-img-bottom{border-bottom-right-radius:0}.card-group>.card:last-child{border-top-left-radius:0;border-bottom-left-radius:0}.card-group>.card:last-child .card-header,.card-group>.card:last-child .card-img-top{border-top-left-radius:0}.card-group>.card:last-child .card-footer,.card-group>.card:last-child .card-img-bottom{border-bottom-left-radius:0}.card-group>.card:only-child{border-radius:.25rem}.card-group>.card:only-child .card-header,.card-group>.card:only-child .card-img-top{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.card-group>.card:only-child .card-footer,.card-group>.card:only-child .card-img-bottom{border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.card-group>.card:not(:first-child):not(:last-child):not(:only-child),.card-group>.card:not(:first-child):not(:last-child):not(:only-child) .card-footer,.card-group>.card:not(:first-child):not(:last-child):not(:only-child) .card-header,.card-group>.card:not(:first-child):not(:last-child):not(:only-child) .card-img-bottom,.card-group>.card:not(:first-child):not(:last-child):not(:only-child) .card-img-top{border-radius:0}}.card-columns .card{margin-bottom:12px;margin-bottom:.75rem}@media (min-width:576px){.card-columns{column-count:3;column-gap:1.25rem}.card-columns .card{display:inline-block;width:100%}}.breadcrumb{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:12px 16px;padding:.75rem 1rem;margin-bottom:16px;margin-bottom:1rem;list-style:none;background-color:#e9ecef;border-radius:.25rem}.breadcrumb-item+.breadcrumb-item:before{display:inline-block;padding-right:8px;padding-right:.5rem;padding-left:8px;padding-left:.5rem;color:#6c757d;content:\"/\"}.breadcrumb-item+.breadcrumb-item:hover:before{text-decoration:underline;text-decoration:none}.breadcrumb-item.active{color:#6c757d}.pagination{display:-ms-flexbox;display:flex;padding-left:0;list-style:none;border-radius:.25rem}.page-link{position:relative;display:block;padding:8px 12px;padding:.5rem .75rem;margin-left:-1px;line-height:1.25;color:#007bff;background-color:#fff;border:1px solid #dee2e6}.page-link:hover{color:#0056b3;text-decoration:none;background-color:#e9ecef;border-color:#dee2e6}.page-link:focus{z-index:2;outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.page-link:not(:disabled):not(.disabled){cursor:pointer}.page-item:first-child .page-link{margin-left:0;border-top-left-radius:4px;border-top-left-radius:.25rem;border-bottom-left-radius:4px;border-bottom-left-radius:.25rem}.page-item:last-child .page-link{border-top-right-radius:4px;border-top-right-radius:.25rem;border-bottom-right-radius:4px;border-bottom-right-radius:.25rem}.page-item.active .page-link{z-index:1;color:#fff;background-color:#007bff;border-color:#007bff}.page-item.disabled .page-link{color:#6c757d;pointer-events:none;cursor:auto;background-color:#fff;border-color:#dee2e6}.pagination-lg .page-link{padding:12px 24px;padding:.75rem 1.5rem;font-size:20px;font-size:1.25rem;line-height:1.5}.pagination-lg .page-item:first-child .page-link{border-top-left-radius:4.8px;border-top-left-radius:.3rem;border-bottom-left-radius:4.8px;border-bottom-left-radius:.3rem}.pagination-lg .page-item:last-child .page-link{border-top-right-radius:4.8px;border-top-right-radius:.3rem;border-bottom-right-radius:4.8px;border-bottom-right-radius:.3rem}.pagination-sm .page-link{padding:4px 8px;padding:.25rem .5rem;font-size:14px;font-size:.875rem;line-height:1.5}.pagination-sm .page-item:first-child .page-link{border-top-left-radius:3.2px;border-top-left-radius:.2rem;border-bottom-left-radius:3.2px;border-bottom-left-radius:.2rem}.pagination-sm .page-item:last-child .page-link{border-top-right-radius:3.2px;border-top-right-radius:.2rem;border-bottom-right-radius:3.2px;border-bottom-right-radius:.2rem}.badge{display:inline-block;padding:.25em .4em;font-size:75%;font-weight:700;line-height:1;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25rem}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.badge-pill{padding-right:.6em;padding-left:.6em;border-radius:10rem}.badge-primary{color:#fff;background-color:#007bff}.badge-primary[href]:focus,.badge-primary[href]:hover{color:#fff;text-decoration:none;background-color:#0062cc}.badge-secondary{color:#fff;background-color:#6c757d}.badge-secondary[href]:focus,.badge-secondary[href]:hover{color:#fff;text-decoration:none;background-color:#545b62}.badge-success{color:#fff;background-color:#28a745}.badge-success[href]:focus,.badge-success[href]:hover{color:#fff;text-decoration:none;background-color:#1e7e34}.badge-info{color:#fff;background-color:#17a2b8}.badge-info[href]:focus,.badge-info[href]:hover{color:#fff;text-decoration:none;background-color:#117a8b}.badge-warning{color:#212529;background-color:#ffc107}.badge-warning[href]:focus,.badge-warning[href]:hover{color:#212529;text-decoration:none;background-color:#d39e00}.badge-danger{color:#fff;background-color:#dc3545}.badge-danger[href]:focus,.badge-danger[href]:hover{color:#fff;text-decoration:none;background-color:#bd2130}.badge-light{color:#212529;background-color:#f8f9fa}.badge-light[href]:focus,.badge-light[href]:hover{color:#212529;text-decoration:none;background-color:#dae0e5}.badge-dark{color:#fff;background-color:#343a40}.badge-dark[href]:focus,.badge-dark[href]:hover{color:#fff;text-decoration:none;background-color:#1d2124}.jumbotron{padding:32px 16px;padding:2rem 1rem;margin-bottom:32px;margin-bottom:2rem;background-color:#e9ecef;border-radius:.3rem}@media (min-width:576px){.jumbotron{padding:4rem 2rem}}.jumbotron-fluid{padding-right:0;padding-left:0;border-radius:0}.alert{position:relative;padding:12px 20px;padding:.75rem 1.25rem;margin-bottom:16px;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}.alert-heading{color:inherit}.alert-link{font-weight:700}.alert-dismissible{padding-right:64px;padding-right:4rem}.alert-dismissible .close{position:absolute;top:0;right:0;padding:12px 20px;padding:.75rem 1.25rem;color:inherit}.alert-primary{color:#004085;background-color:#cce5ff;border-color:#b8daff}.alert-primary hr{border-top-color:#9fcdff}.alert-primary .alert-link{color:#002752}.alert-secondary{color:#383d41;background-color:#e2e3e5;border-color:#d6d8db}.alert-secondary hr{border-top-color:#c8cbcf}.alert-secondary .alert-link{color:#202326}.alert-success{color:#155724;background-color:#d4edda;border-color:#c3e6cb}.alert-success hr{border-top-color:#b1dfbb}.alert-success .alert-link{color:#0b2e13}.alert-info{color:#0c5460;background-color:#d1ecf1;border-color:#bee5eb}.alert-info hr{border-top-color:#abdde5}.alert-info .alert-link{color:#062c33}.alert-warning{color:#856404;background-color:#fff3cd;border-color:#ffeeba}.alert-warning hr{border-top-color:#ffe8a1}.alert-warning .alert-link{color:#533f03}.alert-danger{color:#721c24;background-color:#f8d7da;border-color:#f5c6cb}.alert-danger hr{border-top-color:#f1b0b7}.alert-danger .alert-link{color:#491217}.alert-light{color:#818182;background-color:#fefefe;border-color:#fdfdfe}.alert-light hr{border-top-color:#ececf6}.alert-light .alert-link{color:#686868}.alert-dark{color:#1b1e21;background-color:#d6d8d9;border-color:#c6c8ca}.alert-dark hr{border-top-color:#b9bbbe}.alert-dark .alert-link{color:#040505}@keyframes a{0%{background-position:1rem 0}to{background-position:0 0}}.progress{height:16px;height:1rem;overflow:hidden;font-size:12px;font-size:.75rem;background-color:#e9ecef;border-radius:.25rem}.progress,.progress-bar{display:-ms-flexbox;display:flex}.progress-bar{-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;color:#fff;text-align:center;background-color:#007bff;transition:width .6s ease}.progress-bar-striped{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent);background-size:1rem 1rem}.progress-bar-animated{animation:a 1s linear infinite}.media{display:-ms-flexbox;display:flex;-ms-flex-align:start;align-items:flex-start}.media-body{-ms-flex:1;flex:1}.list-group{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;padding-left:0;margin-bottom:0}.list-group-item-action{width:100%;color:#495057;text-align:inherit}.list-group-item-action:focus,.list-group-item-action:hover{color:#495057;text-decoration:none;background-color:#f8f9fa}.list-group-item-action:active{color:#212529;background-color:#e9ecef}.list-group-item{position:relative;display:block;padding:12px 20px;padding:.75rem 1.25rem;margin-bottom:-1px;background-color:#fff;border:1px solid rgba(0,0,0,.125)}.list-group-item:first-child{border-top-left-radius:4px;border-top-left-radius:.25rem;border-top-right-radius:4px;border-top-right-radius:.25rem}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:4px;border-bottom-right-radius:.25rem;border-bottom-left-radius:4px;border-bottom-left-radius:.25rem}.list-group-item:focus,.list-group-item:hover{z-index:1;text-decoration:none}.list-group-item.disabled,.list-group-item:disabled{color:#6c757d;background-color:#fff}.list-group-item.active{z-index:2;color:#fff;background-color:#007bff;border-color:#007bff}.list-group-flush .list-group-item{border-right:0;border-left:0;border-radius:0}.list-group-flush:first-child .list-group-item:first-child{border-top:0}.list-group-flush:last-child .list-group-item:last-child{border-bottom:0}.list-group-item-primary{color:#004085;background-color:#b8daff}.list-group-item-primary.list-group-item-action:focus,.list-group-item-primary.list-group-item-action:hover{color:#004085;background-color:#9fcdff}.list-group-item-primary.list-group-item-action.active{color:#fff;background-color:#004085;border-color:#004085}.list-group-item-secondary{color:#383d41;background-color:#d6d8db}.list-group-item-secondary.list-group-item-action:focus,.list-group-item-secondary.list-group-item-action:hover{color:#383d41;background-color:#c8cbcf}.list-group-item-secondary.list-group-item-action.active{color:#fff;background-color:#383d41;border-color:#383d41}.list-group-item-success{color:#155724;background-color:#c3e6cb}.list-group-item-success.list-group-item-action:focus,.list-group-item-success.list-group-item-action:hover{color:#155724;background-color:#b1dfbb}.list-group-item-success.list-group-item-action.active{color:#fff;background-color:#155724;border-color:#155724}.list-group-item-info{color:#0c5460;background-color:#bee5eb}.list-group-item-info.list-group-item-action:focus,.list-group-item-info.list-group-item-action:hover{color:#0c5460;background-color:#abdde5}.list-group-item-info.list-group-item-action.active{color:#fff;background-color:#0c5460;border-color:#0c5460}.list-group-item-warning{color:#856404;background-color:#ffeeba}.list-group-item-warning.list-group-item-action:focus,.list-group-item-warning.list-group-item-action:hover{color:#856404;background-color:#ffe8a1}.list-group-item-warning.list-group-item-action.active{color:#fff;background-color:#856404;border-color:#856404}.list-group-item-danger{color:#721c24;background-color:#f5c6cb}.list-group-item-danger.list-group-item-action:focus,.list-group-item-danger.list-group-item-action:hover{color:#721c24;background-color:#f1b0b7}.list-group-item-danger.list-group-item-action.active{color:#fff;background-color:#721c24;border-color:#721c24}.list-group-item-light{color:#818182;background-color:#fdfdfe}.list-group-item-light.list-group-item-action:focus,.list-group-item-light.list-group-item-action:hover{color:#818182;background-color:#ececf6}.list-group-item-light.list-group-item-action.active{color:#fff;background-color:#818182;border-color:#818182}.list-group-item-dark{color:#1b1e21;background-color:#c6c8ca}.list-group-item-dark.list-group-item-action:focus,.list-group-item-dark.list-group-item-action:hover{color:#1b1e21;background-color:#b9bbbe}.list-group-item-dark.list-group-item-action.active{color:#fff;background-color:#1b1e21;border-color:#1b1e21}.close{float:right;font-size:24px;font-size:1.5rem;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.5}.close:focus,.close:hover{color:#000;text-decoration:none;opacity:.75}.close:not(:disabled):not(.disabled){cursor:pointer}button.close{padding:0;background-color:transparent;border:0;-webkit-appearance:none}.modal,.modal-open{overflow:hidden}.modal{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1050;display:none;outline:0}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal-dialog{position:relative;width:auto;margin:8px;margin:.5rem;pointer-events:none}.modal.fade .modal-dialog{transition:transform .3s ease-out;transform:translateY(-25%)}.modal.show .modal-dialog{transform:translate(0)}.modal-dialog-centered{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;min-height:calc(100% - 1rem)}.modal-content{position:relative;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;width:100%;pointer-events:auto;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem;outline:0}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{opacity:0}.modal-backdrop.show{opacity:.5}.modal-header{display:-ms-flexbox;display:flex;-ms-flex-align:start;align-items:flex-start;-ms-flex-pack:justify;justify-content:space-between;padding:16px;padding:1rem;border-bottom:1px solid #e9ecef;border-top-left-radius:4.8px;border-top-left-radius:.3rem;border-top-right-radius:4.8px;border-top-right-radius:.3rem}.modal-header .close{padding:16px;padding:1rem;margin:-16px -16px -16px auto;margin:-1rem -1rem -1rem auto}.modal-title{margin-bottom:0;line-height:1.5}.modal-body{position:relative;-ms-flex:1 1 auto;flex:1 1 auto;padding:16px;padding:1rem}.modal-footer{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:end;justify-content:flex-end;padding:16px;padding:1rem;border-top:1px solid #e9ecef}.modal-footer>:not(:first-child){margin-left:4px;margin-left:.25rem}.modal-footer>:not(:last-child){margin-right:4px;margin-right:.25rem}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width:576px){.modal-dialog{max-width:500px;margin:1.75rem auto}.modal-dialog-centered{min-height:calc(100% - 3.5rem)}.modal-sm{max-width:300px}}@media (min-width:992px){.modal-lg{max-width:800px}}.tooltip{position:absolute;z-index:1070;display:block;margin:0;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif;font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:14px;font-size:.875rem;word-wrap:break-word;opacity:0}.tooltip.show{opacity:.9}.tooltip .arrow{position:absolute;display:block;width:12.8px;width:.8rem;height:6.4px;height:.4rem}.tooltip .arrow:before{position:absolute;content:\"\";border-color:transparent;border-style:solid}.bs-tooltip-auto[x-placement^=top],.bs-tooltip-top{padding:6.4px 0;padding:.4rem 0}.bs-tooltip-auto[x-placement^=top] .arrow,.bs-tooltip-top .arrow{bottom:0}.bs-tooltip-auto[x-placement^=top] .arrow:before,.bs-tooltip-top .arrow:before{top:0;border-width:6.4px 6.4px 0;border-width:.4rem .4rem 0;border-top-color:#000}.bs-tooltip-auto[x-placement^=right],.bs-tooltip-right{padding:0 6.4px;padding:0 .4rem}.bs-tooltip-auto[x-placement^=right] .arrow,.bs-tooltip-right .arrow{left:0;width:6.4px;width:.4rem;height:12.8px;height:.8rem}.bs-tooltip-auto[x-placement^=right] .arrow:before,.bs-tooltip-right .arrow:before{right:0;border-width:6.4px 6.4px 6.4px 0;border-width:.4rem .4rem .4rem 0;border-right-color:#000}.bs-tooltip-auto[x-placement^=bottom],.bs-tooltip-bottom{padding:6.4px 0;padding:.4rem 0}.bs-tooltip-auto[x-placement^=bottom] .arrow,.bs-tooltip-bottom .arrow{top:0}.bs-tooltip-auto[x-placement^=bottom] .arrow:before,.bs-tooltip-bottom .arrow:before{bottom:0;border-width:0 6.4px 6.4px;border-width:0 .4rem .4rem;border-bottom-color:#000}.bs-tooltip-auto[x-placement^=left],.bs-tooltip-left{padding:0 6.4px;padding:0 .4rem}.bs-tooltip-auto[x-placement^=left] .arrow,.bs-tooltip-left .arrow{right:0;width:6.4px;width:.4rem;height:12.8px;height:.8rem}.bs-tooltip-auto[x-placement^=left] .arrow:before,.bs-tooltip-left .arrow:before{left:0;border-width:6.4px 0 6.4px 6.4px;border-width:.4rem 0 .4rem .4rem;border-left-color:#000}.tooltip-inner{max-width:200px;padding:4px 8px;padding:.25rem .5rem;color:#fff;text-align:center;background-color:#000;border-radius:.25rem}.popover{top:0;left:0;z-index:1060;max-width:276px;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,sans-serif;font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:14px;font-size:.875rem;word-wrap:break-word;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem}.popover,.popover .arrow{position:absolute;display:block}.popover .arrow{width:16px;width:1rem;height:8px;height:.5rem;margin:0 4.8px;margin:0 .3rem}.popover .arrow:after,.popover .arrow:before{position:absolute;display:block;content:\"\";border-color:transparent;border-style:solid}.bs-popover-auto[x-placement^=top],.bs-popover-top{margin-bottom:8px;margin-bottom:.5rem}.bs-popover-auto[x-placement^=top] .arrow,.bs-popover-top .arrow{bottom:calc((.5rem + 1px) * -1)}.bs-popover-auto[x-placement^=top] .arrow:after,.bs-popover-auto[x-placement^=top] .arrow:before,.bs-popover-top .arrow:after,.bs-popover-top .arrow:before{border-width:8px 8px 0;border-width:.5rem .5rem 0}.bs-popover-auto[x-placement^=top] .arrow:before,.bs-popover-top .arrow:before{bottom:0;border-top-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=top] .arrow:after,.bs-popover-top .arrow:after{bottom:1px;border-top-color:#fff}.bs-popover-auto[x-placement^=right],.bs-popover-right{margin-left:8px;margin-left:.5rem}.bs-popover-auto[x-placement^=right] .arrow,.bs-popover-right .arrow{left:calc((.5rem + 1px) * -1);width:8px;width:.5rem;height:16px;height:1rem;margin:4.8px 0;margin:.3rem 0}.bs-popover-auto[x-placement^=right] .arrow:after,.bs-popover-auto[x-placement^=right] .arrow:before,.bs-popover-right .arrow:after,.bs-popover-right .arrow:before{border-width:8px 8px 8px 0;border-width:.5rem .5rem .5rem 0}.bs-popover-auto[x-placement^=right] .arrow:before,.bs-popover-right .arrow:before{left:0;border-right-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=right] .arrow:after,.bs-popover-right .arrow:after{left:1px;border-right-color:#fff}.bs-popover-auto[x-placement^=bottom],.bs-popover-bottom{margin-top:8px;margin-top:.5rem}.bs-popover-auto[x-placement^=bottom] .arrow,.bs-popover-bottom .arrow{top:calc((.5rem + 1px) * -1)}.bs-popover-auto[x-placement^=bottom] .arrow:after,.bs-popover-auto[x-placement^=bottom] .arrow:before,.bs-popover-bottom .arrow:after,.bs-popover-bottom .arrow:before{border-width:0 8px 8px;border-width:0 .5rem .5rem}.bs-popover-auto[x-placement^=bottom] .arrow:before,.bs-popover-bottom .arrow:before{top:0;border-bottom-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=bottom] .arrow:after,.bs-popover-bottom .arrow:after{top:1px;border-bottom-color:#fff}.bs-popover-auto[x-placement^=bottom] .popover-header:before,.bs-popover-bottom .popover-header:before{position:absolute;top:0;left:50%;display:block;width:16px;width:1rem;margin-left:-8px;margin-left:-.5rem;content:\"\";border-bottom:1px solid #f7f7f7}.bs-popover-auto[x-placement^=left],.bs-popover-left{margin-right:8px;margin-right:.5rem}.bs-popover-auto[x-placement^=left] .arrow,.bs-popover-left .arrow{right:calc((.5rem + 1px) * -1);width:8px;width:.5rem;height:16px;height:1rem;margin:4.8px 0;margin:.3rem 0}.bs-popover-auto[x-placement^=left] .arrow:after,.bs-popover-auto[x-placement^=left] .arrow:before,.bs-popover-left .arrow:after,.bs-popover-left .arrow:before{border-width:8px 0 8px 8px;border-width:.5rem 0 .5rem .5rem}.bs-popover-auto[x-placement^=left] .arrow:before,.bs-popover-left .arrow:before{right:0;border-left-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=left] .arrow:after,.bs-popover-left .arrow:after{right:1px;border-left-color:#fff}.popover-header{padding:8px 12px;padding:.5rem .75rem;margin-bottom:0;font-size:16px;font-size:1rem;color:inherit;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-top-left-radius:calc(.3rem - 1px);border-top-right-radius:calc(.3rem - 1px)}.popover-header:empty{display:none}.popover-body{padding:8px 12px;padding:.5rem .75rem;color:#212529}.carousel{position:relative}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-item{position:relative;display:none;-ms-flex-align:center;align-items:center;width:100%;transition:transform .6s ease;backface-visibility:hidden;perspective:1000px}.carousel-item-next,.carousel-item-prev,.carousel-item.active{display:block}.carousel-item-next,.carousel-item-prev{position:absolute;top:0}.carousel-item-next.carousel-item-left,.carousel-item-prev.carousel-item-right{transform:translateX(0)}@supports (transform-style:preserve-3d){.carousel-item-next.carousel-item-left,.carousel-item-prev.carousel-item-right{transform:translateZ(0)}}.active.carousel-item-right,.carousel-item-next{transform:translateX(100%)}@supports (transform-style:preserve-3d){.active.carousel-item-right,.carousel-item-next{transform:translate3d(100%,0,0)}}.active.carousel-item-left,.carousel-item-prev{transform:translateX(-100%)}@supports (transform-style:preserve-3d){.active.carousel-item-left,.carousel-item-prev{transform:translate3d(-100%,0,0)}}.carousel-control-next,.carousel-control-prev{position:absolute;top:0;bottom:0;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:15%;color:#fff;text-align:center;opacity:.5}.carousel-control-next:focus,.carousel-control-next:hover,.carousel-control-prev:focus,.carousel-control-prev:hover{color:#fff;text-decoration:none;outline:0;opacity:.9}.carousel-control-prev{left:0}.carousel-control-next{right:0}.carousel-control-next-icon,.carousel-control-prev-icon{display:inline-block;width:20px;height:20px;background:transparent no-repeat 50%;background-size:100% 100%}.carousel-control-prev-icon{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' viewBox='0 0 8 8'%3E%3Cpath d='M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z'/%3E%3C/svg%3E\")}.carousel-control-next-icon{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' viewBox='0 0 8 8'%3E%3Cpath d='M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z'/%3E%3C/svg%3E\")}.carousel-indicators{position:absolute;right:0;bottom:10px;left:0;z-index:15;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;padding-left:0;margin-right:15%;margin-left:15%;list-style:none}.carousel-indicators li{position:relative;-ms-flex:0 1 auto;flex:0 1 auto;width:30px;height:3px;margin-right:3px;margin-left:3px;text-indent:-999px;background-color:hsla(0,0%,100%,.5)}.carousel-indicators li:before{top:-10px}.carousel-indicators li:after,.carousel-indicators li:before{position:absolute;left:0;display:inline-block;width:100%;height:10px;content:\"\"}.carousel-indicators li:after{bottom:-10px}.carousel-indicators .active{background-color:#fff}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center}.align-baseline{vertical-align:baseline!important}.align-top{vertical-align:top!important}.align-middle{vertical-align:middle!important}.align-bottom{vertical-align:bottom!important}.align-text-bottom{vertical-align:text-bottom!important}.align-text-top{vertical-align:text-top!important}.bg-primary{background-color:#007bff!important}a.bg-primary:focus,a.bg-primary:hover,button.bg-primary:focus,button.bg-primary:hover{background-color:#0062cc!important}.bg-secondary{background-color:#6c757d!important}a.bg-secondary:focus,a.bg-secondary:hover,button.bg-secondary:focus,button.bg-secondary:hover{background-color:#545b62!important}.bg-success{background-color:#28a745!important}a.bg-success:focus,a.bg-success:hover,button.bg-success:focus,button.bg-success:hover{background-color:#1e7e34!important}.bg-info{background-color:#17a2b8!important}a.bg-info:focus,a.bg-info:hover,button.bg-info:focus,button.bg-info:hover{background-color:#117a8b!important}.bg-warning{background-color:#ffc107!important}a.bg-warning:focus,a.bg-warning:hover,button.bg-warning:focus,button.bg-warning:hover{background-color:#d39e00!important}.bg-danger{background-color:#dc3545!important}a.bg-danger:focus,a.bg-danger:hover,button.bg-danger:focus,button.bg-danger:hover{background-color:#bd2130!important}.bg-light{background-color:#f8f9fa!important}a.bg-light:focus,a.bg-light:hover,button.bg-light:focus,button.bg-light:hover{background-color:#dae0e5!important}.bg-dark{background-color:#343a40!important}a.bg-dark:focus,a.bg-dark:hover,button.bg-dark:focus,button.bg-dark:hover{background-color:#1d2124!important}.bg-white{background-color:#fff!important}.bg-transparent{background-color:transparent!important}.border{border:1px solid #dee2e6!important}.border-top{border-top:1px solid #dee2e6!important}.border-right{border-right:1px solid #dee2e6!important}.border-bottom{border-bottom:1px solid #dee2e6!important}.border-left{border-left:1px solid #dee2e6!important}.border-0{border:0!important}.border-top-0{border-top:0!important}.border-right-0{border-right:0!important}.border-bottom-0{border-bottom:0!important}.border-left-0{border-left:0!important}.border-primary{border-color:#007bff!important}.border-secondary{border-color:#6c757d!important}.border-success{border-color:#28a745!important}.border-info{border-color:#17a2b8!important}.border-warning{border-color:#ffc107!important}.border-danger{border-color:#dc3545!important}.border-light{border-color:#f8f9fa!important}.border-dark{border-color:#343a40!important}.border-white{border-color:#fff!important}.rounded{border-radius:.25rem!important}.rounded-top{border-top-left-radius:4px!important;border-top-left-radius:.25rem!important}.rounded-right,.rounded-top{border-top-right-radius:4px!important;border-top-right-radius:.25rem!important}.rounded-bottom,.rounded-right{border-bottom-right-radius:4px!important;border-bottom-right-radius:.25rem!important}.rounded-bottom,.rounded-left{border-bottom-left-radius:4px!important;border-bottom-left-radius:.25rem!important}.rounded-left{border-top-left-radius:4px!important;border-top-left-radius:.25rem!important}.rounded-circle{border-radius:50%!important}.rounded-0{border-radius:0!important}.clearfix:after{display:block;clear:both;content:\"\"}.d-none{display:none!important}.d-inline{display:inline!important}.d-inline-block{display:inline-block!important}.d-block{display:block!important}.d-table{display:table!important}.d-table-row{display:table-row!important}.d-table-cell{display:table-cell!important}.d-flex{display:-ms-flexbox!important;display:flex!important}.d-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}@media (min-width:576px){.d-sm-none{display:none!important}.d-sm-inline{display:inline!important}.d-sm-inline-block{display:inline-block!important}.d-sm-block{display:block!important}.d-sm-table{display:table!important}.d-sm-table-row{display:table-row!important}.d-sm-table-cell{display:table-cell!important}.d-sm-flex{display:-ms-flexbox!important;display:flex!important}.d-sm-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:768px){.d-md-none{display:none!important}.d-md-inline{display:inline!important}.d-md-inline-block{display:inline-block!important}.d-md-block{display:block!important}.d-md-table{display:table!important}.d-md-table-row{display:table-row!important}.d-md-table-cell{display:table-cell!important}.d-md-flex{display:-ms-flexbox!important;display:flex!important}.d-md-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:992px){.d-lg-none{display:none!important}.d-lg-inline{display:inline!important}.d-lg-inline-block{display:inline-block!important}.d-lg-block{display:block!important}.d-lg-table{display:table!important}.d-lg-table-row{display:table-row!important}.d-lg-table-cell{display:table-cell!important}.d-lg-flex{display:-ms-flexbox!important;display:flex!important}.d-lg-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:1200px){.d-xl-none{display:none!important}.d-xl-inline{display:inline!important}.d-xl-inline-block{display:inline-block!important}.d-xl-block{display:block!important}.d-xl-table{display:table!important}.d-xl-table-row{display:table-row!important}.d-xl-table-cell{display:table-cell!important}.d-xl-flex{display:-ms-flexbox!important;display:flex!important}.d-xl-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}@media print{.d-print-none{display:none!important}.d-print-inline{display:inline!important}.d-print-inline-block{display:inline-block!important}.d-print-block{display:block!important}.d-print-table{display:table!important}.d-print-table-row{display:table-row!important}.d-print-table-cell{display:table-cell!important}.d-print-flex{display:-ms-flexbox!important;display:flex!important}.d-print-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}.embed-responsive{position:relative;display:block;width:100%;padding:0;overflow:hidden}.embed-responsive:before{display:block;content:\"\"}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;bottom:0;left:0;width:100%;height:100%;border:0}.embed-responsive-21by9:before{padding-top:42.857143%}.embed-responsive-16by9:before{padding-top:56.25%}.embed-responsive-4by3:before{padding-top:75%}.embed-responsive-1by1:before{padding-top:100%}.flex-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-center{-ms-flex-align:center!important;align-items:center!important}.align-items-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-auto{-ms-flex-item-align:auto!important;-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-center{-ms-flex-item-align:center!important;-ms-grid-row-align:center!important;align-self:center!important}.align-self-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-stretch{-ms-flex-item-align:stretch!important;-ms-grid-row-align:stretch!important;align-self:stretch!important}@media (min-width:576px){.flex-sm-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-sm-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-sm-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-sm-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-sm-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-sm-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-sm-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-sm-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-sm-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-sm-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-sm-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-sm-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-sm-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-sm-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-sm-center{-ms-flex-align:center!important;align-items:center!important}.align-items-sm-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-sm-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-sm-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-sm-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-sm-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-sm-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-sm-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-sm-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-sm-auto{-ms-flex-item-align:auto!important;-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-sm-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-sm-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-sm-center{-ms-flex-item-align:center!important;-ms-grid-row-align:center!important;align-self:center!important}.align-self-sm-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-sm-stretch{-ms-flex-item-align:stretch!important;-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:768px){.flex-md-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-md-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-md-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-md-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-md-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-md-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-md-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-md-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-md-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-md-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-md-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-md-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-md-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-md-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-md-center{-ms-flex-align:center!important;align-items:center!important}.align-items-md-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-md-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-md-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-md-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-md-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-md-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-md-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-md-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-md-auto{-ms-flex-item-align:auto!important;-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-md-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-md-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-md-center{-ms-flex-item-align:center!important;-ms-grid-row-align:center!important;align-self:center!important}.align-self-md-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-md-stretch{-ms-flex-item-align:stretch!important;-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:992px){.flex-lg-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-lg-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-lg-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-lg-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-lg-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-lg-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-lg-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-lg-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-lg-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-lg-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-lg-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-lg-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-lg-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-lg-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-lg-center{-ms-flex-align:center!important;align-items:center!important}.align-items-lg-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-lg-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-lg-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-lg-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-lg-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-lg-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-lg-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-lg-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-lg-auto{-ms-flex-item-align:auto!important;-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-lg-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-lg-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-lg-center{-ms-flex-item-align:center!important;-ms-grid-row-align:center!important;align-self:center!important}.align-self-lg-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-lg-stretch{-ms-flex-item-align:stretch!important;-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1200px){.flex-xl-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-xl-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-xl-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-xl-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-xl-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-xl-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-xl-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.justify-content-xl-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-xl-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-xl-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-xl-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-xl-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-xl-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-xl-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-xl-center{-ms-flex-align:center!important;align-items:center!important}.align-items-xl-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-xl-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-xl-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-xl-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-xl-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-xl-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-xl-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-xl-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-xl-auto{-ms-flex-item-align:auto!important;-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-xl-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-xl-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-xl-center{-ms-flex-item-align:center!important;-ms-grid-row-align:center!important;align-self:center!important}.align-self-xl-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-xl-stretch{-ms-flex-item-align:stretch!important;-ms-grid-row-align:stretch!important;align-self:stretch!important}}.float-left{float:left!important}.float-right{float:right!important}.float-none{float:none!important}@media (min-width:576px){.float-sm-left{float:left!important}.float-sm-right{float:right!important}.float-sm-none{float:none!important}}@media (min-width:768px){.float-md-left{float:left!important}.float-md-right{float:right!important}.float-md-none{float:none!important}}@media (min-width:992px){.float-lg-left{float:left!important}.float-lg-right{float:right!important}.float-lg-none{float:none!important}}@media (min-width:1200px){.float-xl-left{float:left!important}.float-xl-right{float:right!important}.float-xl-none{float:none!important}}.position-static{position:static!important}.position-relative{position:relative!important}.position-absolute{position:absolute!important}.position-fixed{position:fixed!important}.position-sticky{position:sticky!important}.fixed-top{top:0}.fixed-bottom,.fixed-top{position:fixed;right:0;left:0;z-index:1030}.fixed-bottom{bottom:0}@supports (position:sticky){.sticky-top{position:sticky;top:0;z-index:1020}}.sr-only{position:absolute;width:1px;height:1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;-webkit-clip-path:inset(50%);clip-path:inset(50%);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;overflow:visible;clip:auto;white-space:normal;-webkit-clip-path:none;clip-path:none}.w-25{width:25%!important}.w-50{width:50%!important}.w-75{width:75%!important}.w-100{width:100%!important}.h-25{height:25%!important}.h-50{height:50%!important}.h-75{height:75%!important}.h-100{height:100%!important}.mw-100{max-width:100%!important}.mh-100{max-height:100%!important}.m-0{margin:0!important}.mt-0,.my-0{margin-top:0!important}.mr-0,.mx-0{margin-right:0!important}.mb-0,.my-0{margin-bottom:0!important}.ml-0,.mx-0{margin-left:0!important}.m-1{margin:4px!important;margin:.25rem!important}.mt-1,.my-1{margin-top:4px!important;margin-top:.25rem!important}.mr-1,.mx-1{margin-right:4px!important;margin-right:.25rem!important}.mb-1,.my-1{margin-bottom:4px!important;margin-bottom:.25rem!important}.ml-1,.mx-1{margin-left:4px!important;margin-left:.25rem!important}.m-2{margin:8px!important;margin:.5rem!important}.mt-2,.my-2{margin-top:8px!important;margin-top:.5rem!important}.mr-2,.mx-2{margin-right:8px!important;margin-right:.5rem!important}.mb-2,.my-2{margin-bottom:8px!important;margin-bottom:.5rem!important}.ml-2,.mx-2{margin-left:8px!important;margin-left:.5rem!important}.m-3{margin:16px!important;margin:1rem!important}.mt-3,.my-3{margin-top:16px!important;margin-top:1rem!important}.mr-3,.mx-3{margin-right:16px!important;margin-right:1rem!important}.mb-3,.my-3{margin-bottom:16px!important;margin-bottom:1rem!important}.ml-3,.mx-3{margin-left:16px!important;margin-left:1rem!important}.m-4{margin:24px!important;margin:1.5rem!important}.mt-4,.my-4{margin-top:24px!important;margin-top:1.5rem!important}.mr-4,.mx-4{margin-right:24px!important;margin-right:1.5rem!important}.mb-4,.my-4{margin-bottom:24px!important;margin-bottom:1.5rem!important}.ml-4,.mx-4{margin-left:24px!important;margin-left:1.5rem!important}.m-5{margin:48px!important;margin:3rem!important}.mt-5,.my-5{margin-top:48px!important;margin-top:3rem!important}.mr-5,.mx-5{margin-right:48px!important;margin-right:3rem!important}.mb-5,.my-5{margin-bottom:48px!important;margin-bottom:3rem!important}.ml-5,.mx-5{margin-left:48px!important;margin-left:3rem!important}.p-0{padding:0!important}.pt-0,.py-0{padding-top:0!important}.pr-0,.px-0{padding-right:0!important}.pb-0,.py-0{padding-bottom:0!important}.pl-0,.px-0{padding-left:0!important}.p-1{padding:4px!important;padding:.25rem!important}.pt-1,.py-1{padding-top:4px!important;padding-top:.25rem!important}.pr-1,.px-1{padding-right:4px!important;padding-right:.25rem!important}.pb-1,.py-1{padding-bottom:4px!important;padding-bottom:.25rem!important}.pl-1,.px-1{padding-left:4px!important;padding-left:.25rem!important}.p-2{padding:8px!important;padding:.5rem!important}.pt-2,.py-2{padding-top:8px!important;padding-top:.5rem!important}.pr-2,.px-2{padding-right:8px!important;padding-right:.5rem!important}.pb-2,.py-2{padding-bottom:8px!important;padding-bottom:.5rem!important}.pl-2,.px-2{padding-left:8px!important;padding-left:.5rem!important}.p-3{padding:16px!important;padding:1rem!important}.pt-3,.py-3{padding-top:16px!important;padding-top:1rem!important}.pr-3,.px-3{padding-right:16px!important;padding-right:1rem!important}.pb-3,.py-3{padding-bottom:16px!important;padding-bottom:1rem!important}.pl-3,.px-3{padding-left:16px!important;padding-left:1rem!important}.p-4{padding:24px!important;padding:1.5rem!important}.pt-4,.py-4{padding-top:24px!important;padding-top:1.5rem!important}.pr-4,.px-4{padding-right:24px!important;padding-right:1.5rem!important}.pb-4,.py-4{padding-bottom:24px!important;padding-bottom:1.5rem!important}.pl-4,.px-4{padding-left:24px!important;padding-left:1.5rem!important}.p-5{padding:48px!important;padding:3rem!important}.pt-5,.py-5{padding-top:48px!important;padding-top:3rem!important}.pr-5,.px-5{padding-right:48px!important;padding-right:3rem!important}.pb-5,.py-5{padding-bottom:48px!important;padding-bottom:3rem!important}.pl-5,.px-5{padding-left:48px!important;padding-left:3rem!important}.m-auto{margin:auto!important}.mt-auto,.my-auto{margin-top:auto!important}.mr-auto,.mx-auto{margin-right:auto!important}.mb-auto,.my-auto{margin-bottom:auto!important}.ml-auto,.mx-auto{margin-left:auto!important}@media (min-width:576px){.m-sm-0{margin:0!important}.mt-sm-0,.my-sm-0{margin-top:0!important}.mr-sm-0,.mx-sm-0{margin-right:0!important}.mb-sm-0,.my-sm-0{margin-bottom:0!important}.ml-sm-0,.mx-sm-0{margin-left:0!important}.m-sm-1{margin:.25rem!important}.mt-sm-1,.my-sm-1{margin-top:.25rem!important}.mr-sm-1,.mx-sm-1{margin-right:.25rem!important}.mb-sm-1,.my-sm-1{margin-bottom:.25rem!important}.ml-sm-1,.mx-sm-1{margin-left:.25rem!important}.m-sm-2{margin:.5rem!important}.mt-sm-2,.my-sm-2{margin-top:.5rem!important}.mr-sm-2,.mx-sm-2{margin-right:.5rem!important}.mb-sm-2,.my-sm-2{margin-bottom:.5rem!important}.ml-sm-2,.mx-sm-2{margin-left:.5rem!important}.m-sm-3{margin:1rem!important}.mt-sm-3,.my-sm-3{margin-top:1rem!important}.mr-sm-3,.mx-sm-3{margin-right:1rem!important}.mb-sm-3,.my-sm-3{margin-bottom:1rem!important}.ml-sm-3,.mx-sm-3{margin-left:1rem!important}.m-sm-4{margin:1.5rem!important}.mt-sm-4,.my-sm-4{margin-top:1.5rem!important}.mr-sm-4,.mx-sm-4{margin-right:1.5rem!important}.mb-sm-4,.my-sm-4{margin-bottom:1.5rem!important}.ml-sm-4,.mx-sm-4{margin-left:1.5rem!important}.m-sm-5{margin:3rem!important}.mt-sm-5,.my-sm-5{margin-top:3rem!important}.mr-sm-5,.mx-sm-5{margin-right:3rem!important}.mb-sm-5,.my-sm-5{margin-bottom:3rem!important}.ml-sm-5,.mx-sm-5{margin-left:3rem!important}.p-sm-0{padding:0!important}.pt-sm-0,.py-sm-0{padding-top:0!important}.pr-sm-0,.px-sm-0{padding-right:0!important}.pb-sm-0,.py-sm-0{padding-bottom:0!important}.pl-sm-0,.px-sm-0{padding-left:0!important}.p-sm-1{padding:.25rem!important}.pt-sm-1,.py-sm-1{padding-top:.25rem!important}.pr-sm-1,.px-sm-1{padding-right:.25rem!important}.pb-sm-1,.py-sm-1{padding-bottom:.25rem!important}.pl-sm-1,.px-sm-1{padding-left:.25rem!important}.p-sm-2{padding:.5rem!important}.pt-sm-2,.py-sm-2{padding-top:.5rem!important}.pr-sm-2,.px-sm-2{padding-right:.5rem!important}.pb-sm-2,.py-sm-2{padding-bottom:.5rem!important}.pl-sm-2,.px-sm-2{padding-left:.5rem!important}.p-sm-3{padding:1rem!important}.pt-sm-3,.py-sm-3{padding-top:1rem!important}.pr-sm-3,.px-sm-3{padding-right:1rem!important}.pb-sm-3,.py-sm-3{padding-bottom:1rem!important}.pl-sm-3,.px-sm-3{padding-left:1rem!important}.p-sm-4{padding:1.5rem!important}.pt-sm-4,.py-sm-4{padding-top:1.5rem!important}.pr-sm-4,.px-sm-4{padding-right:1.5rem!important}.pb-sm-4,.py-sm-4{padding-bottom:1.5rem!important}.pl-sm-4,.px-sm-4{padding-left:1.5rem!important}.p-sm-5{padding:3rem!important}.pt-sm-5,.py-sm-5{padding-top:3rem!important}.pr-sm-5,.px-sm-5{padding-right:3rem!important}.pb-sm-5,.py-sm-5{padding-bottom:3rem!important}.pl-sm-5,.px-sm-5{padding-left:3rem!important}.m-sm-auto{margin:auto!important}.mt-sm-auto,.my-sm-auto{margin-top:auto!important}.mr-sm-auto,.mx-sm-auto{margin-right:auto!important}.mb-sm-auto,.my-sm-auto{margin-bottom:auto!important}.ml-sm-auto,.mx-sm-auto{margin-left:auto!important}}@media (min-width:768px){.m-md-0{margin:0!important}.mt-md-0,.my-md-0{margin-top:0!important}.mr-md-0,.mx-md-0{margin-right:0!important}.mb-md-0,.my-md-0{margin-bottom:0!important}.ml-md-0,.mx-md-0{margin-left:0!important}.m-md-1{margin:.25rem!important}.mt-md-1,.my-md-1{margin-top:.25rem!important}.mr-md-1,.mx-md-1{margin-right:.25rem!important}.mb-md-1,.my-md-1{margin-bottom:.25rem!important}.ml-md-1,.mx-md-1{margin-left:.25rem!important}.m-md-2{margin:.5rem!important}.mt-md-2,.my-md-2{margin-top:.5rem!important}.mr-md-2,.mx-md-2{margin-right:.5rem!important}.mb-md-2,.my-md-2{margin-bottom:.5rem!important}.ml-md-2,.mx-md-2{margin-left:.5rem!important}.m-md-3{margin:1rem!important}.mt-md-3,.my-md-3{margin-top:1rem!important}.mr-md-3,.mx-md-3{margin-right:1rem!important}.mb-md-3,.my-md-3{margin-bottom:1rem!important}.ml-md-3,.mx-md-3{margin-left:1rem!important}.m-md-4{margin:1.5rem!important}.mt-md-4,.my-md-4{margin-top:1.5rem!important}.mr-md-4,.mx-md-4{margin-right:1.5rem!important}.mb-md-4,.my-md-4{margin-bottom:1.5rem!important}.ml-md-4,.mx-md-4{margin-left:1.5rem!important}.m-md-5{margin:3rem!important}.mt-md-5,.my-md-5{margin-top:3rem!important}.mr-md-5,.mx-md-5{margin-right:3rem!important}.mb-md-5,.my-md-5{margin-bottom:3rem!important}.ml-md-5,.mx-md-5{margin-left:3rem!important}.p-md-0{padding:0!important}.pt-md-0,.py-md-0{padding-top:0!important}.pr-md-0,.px-md-0{padding-right:0!important}.pb-md-0,.py-md-0{padding-bottom:0!important}.pl-md-0,.px-md-0{padding-left:0!important}.p-md-1{padding:.25rem!important}.pt-md-1,.py-md-1{padding-top:.25rem!important}.pr-md-1,.px-md-1{padding-right:.25rem!important}.pb-md-1,.py-md-1{padding-bottom:.25rem!important}.pl-md-1,.px-md-1{padding-left:.25rem!important}.p-md-2{padding:.5rem!important}.pt-md-2,.py-md-2{padding-top:.5rem!important}.pr-md-2,.px-md-2{padding-right:.5rem!important}.pb-md-2,.py-md-2{padding-bottom:.5rem!important}.pl-md-2,.px-md-2{padding-left:.5rem!important}.p-md-3{padding:1rem!important}.pt-md-3,.py-md-3{padding-top:1rem!important}.pr-md-3,.px-md-3{padding-right:1rem!important}.pb-md-3,.py-md-3{padding-bottom:1rem!important}.pl-md-3,.px-md-3{padding-left:1rem!important}.p-md-4{padding:1.5rem!important}.pt-md-4,.py-md-4{padding-top:1.5rem!important}.pr-md-4,.px-md-4{padding-right:1.5rem!important}.pb-md-4,.py-md-4{padding-bottom:1.5rem!important}.pl-md-4,.px-md-4{padding-left:1.5rem!important}.p-md-5{padding:3rem!important}.pt-md-5,.py-md-5{padding-top:3rem!important}.pr-md-5,.px-md-5{padding-right:3rem!important}.pb-md-5,.py-md-5{padding-bottom:3rem!important}.pl-md-5,.px-md-5{padding-left:3rem!important}.m-md-auto{margin:auto!important}.mt-md-auto,.my-md-auto{margin-top:auto!important}.mr-md-auto,.mx-md-auto{margin-right:auto!important}.mb-md-auto,.my-md-auto{margin-bottom:auto!important}.ml-md-auto,.mx-md-auto{margin-left:auto!important}}@media (min-width:992px){.m-lg-0{margin:0!important}.mt-lg-0,.my-lg-0{margin-top:0!important}.mr-lg-0,.mx-lg-0{margin-right:0!important}.mb-lg-0,.my-lg-0{margin-bottom:0!important}.ml-lg-0,.mx-lg-0{margin-left:0!important}.m-lg-1{margin:.25rem!important}.mt-lg-1,.my-lg-1{margin-top:.25rem!important}.mr-lg-1,.mx-lg-1{margin-right:.25rem!important}.mb-lg-1,.my-lg-1{margin-bottom:.25rem!important}.ml-lg-1,.mx-lg-1{margin-left:.25rem!important}.m-lg-2{margin:.5rem!important}.mt-lg-2,.my-lg-2{margin-top:.5rem!important}.mr-lg-2,.mx-lg-2{margin-right:.5rem!important}.mb-lg-2,.my-lg-2{margin-bottom:.5rem!important}.ml-lg-2,.mx-lg-2{margin-left:.5rem!important}.m-lg-3{margin:1rem!important}.mt-lg-3,.my-lg-3{margin-top:1rem!important}.mr-lg-3,.mx-lg-3{margin-right:1rem!important}.mb-lg-3,.my-lg-3{margin-bottom:1rem!important}.ml-lg-3,.mx-lg-3{margin-left:1rem!important}.m-lg-4{margin:1.5rem!important}.mt-lg-4,.my-lg-4{margin-top:1.5rem!important}.mr-lg-4,.mx-lg-4{margin-right:1.5rem!important}.mb-lg-4,.my-lg-4{margin-bottom:1.5rem!important}.ml-lg-4,.mx-lg-4{margin-left:1.5rem!important}.m-lg-5{margin:3rem!important}.mt-lg-5,.my-lg-5{margin-top:3rem!important}.mr-lg-5,.mx-lg-5{margin-right:3rem!important}.mb-lg-5,.my-lg-5{margin-bottom:3rem!important}.ml-lg-5,.mx-lg-5{margin-left:3rem!important}.p-lg-0{padding:0!important}.pt-lg-0,.py-lg-0{padding-top:0!important}.pr-lg-0,.px-lg-0{padding-right:0!important}.pb-lg-0,.py-lg-0{padding-bottom:0!important}.pl-lg-0,.px-lg-0{padding-left:0!important}.p-lg-1{padding:.25rem!important}.pt-lg-1,.py-lg-1{padding-top:.25rem!important}.pr-lg-1,.px-lg-1{padding-right:.25rem!important}.pb-lg-1,.py-lg-1{padding-bottom:.25rem!important}.pl-lg-1,.px-lg-1{padding-left:.25rem!important}.p-lg-2{padding:.5rem!important}.pt-lg-2,.py-lg-2{padding-top:.5rem!important}.pr-lg-2,.px-lg-2{padding-right:.5rem!important}.pb-lg-2,.py-lg-2{padding-bottom:.5rem!important}.pl-lg-2,.px-lg-2{padding-left:.5rem!important}.p-lg-3{padding:1rem!important}.pt-lg-3,.py-lg-3{padding-top:1rem!important}.pr-lg-3,.px-lg-3{padding-right:1rem!important}.pb-lg-3,.py-lg-3{padding-bottom:1rem!important}.pl-lg-3,.px-lg-3{padding-left:1rem!important}.p-lg-4{padding:1.5rem!important}.pt-lg-4,.py-lg-4{padding-top:1.5rem!important}.pr-lg-4,.px-lg-4{padding-right:1.5rem!important}.pb-lg-4,.py-lg-4{padding-bottom:1.5rem!important}.pl-lg-4,.px-lg-4{padding-left:1.5rem!important}.p-lg-5{padding:3rem!important}.pt-lg-5,.py-lg-5{padding-top:3rem!important}.pr-lg-5,.px-lg-5{padding-right:3rem!important}.pb-lg-5,.py-lg-5{padding-bottom:3rem!important}.pl-lg-5,.px-lg-5{padding-left:3rem!important}.m-lg-auto{margin:auto!important}.mt-lg-auto,.my-lg-auto{margin-top:auto!important}.mr-lg-auto,.mx-lg-auto{margin-right:auto!important}.mb-lg-auto,.my-lg-auto{margin-bottom:auto!important}.ml-lg-auto,.mx-lg-auto{margin-left:auto!important}}@media (min-width:1200px){.m-xl-0{margin:0!important}.mt-xl-0,.my-xl-0{margin-top:0!important}.mr-xl-0,.mx-xl-0{margin-right:0!important}.mb-xl-0,.my-xl-0{margin-bottom:0!important}.ml-xl-0,.mx-xl-0{margin-left:0!important}.m-xl-1{margin:.25rem!important}.mt-xl-1,.my-xl-1{margin-top:.25rem!important}.mr-xl-1,.mx-xl-1{margin-right:.25rem!important}.mb-xl-1,.my-xl-1{margin-bottom:.25rem!important}.ml-xl-1,.mx-xl-1{margin-left:.25rem!important}.m-xl-2{margin:.5rem!important}.mt-xl-2,.my-xl-2{margin-top:.5rem!important}.mr-xl-2,.mx-xl-2{margin-right:.5rem!important}.mb-xl-2,.my-xl-2{margin-bottom:.5rem!important}.ml-xl-2,.mx-xl-2{margin-left:.5rem!important}.m-xl-3{margin:1rem!important}.mt-xl-3,.my-xl-3{margin-top:1rem!important}.mr-xl-3,.mx-xl-3{margin-right:1rem!important}.mb-xl-3,.my-xl-3{margin-bottom:1rem!important}.ml-xl-3,.mx-xl-3{margin-left:1rem!important}.m-xl-4{margin:1.5rem!important}.mt-xl-4,.my-xl-4{margin-top:1.5rem!important}.mr-xl-4,.mx-xl-4{margin-right:1.5rem!important}.mb-xl-4,.my-xl-4{margin-bottom:1.5rem!important}.ml-xl-4,.mx-xl-4{margin-left:1.5rem!important}.m-xl-5{margin:3rem!important}.mt-xl-5,.my-xl-5{margin-top:3rem!important}.mr-xl-5,.mx-xl-5{margin-right:3rem!important}.mb-xl-5,.my-xl-5{margin-bottom:3rem!important}.ml-xl-5,.mx-xl-5{margin-left:3rem!important}.p-xl-0{padding:0!important}.pt-xl-0,.py-xl-0{padding-top:0!important}.pr-xl-0,.px-xl-0{padding-right:0!important}.pb-xl-0,.py-xl-0{padding-bottom:0!important}.pl-xl-0,.px-xl-0{padding-left:0!important}.p-xl-1{padding:.25rem!important}.pt-xl-1,.py-xl-1{padding-top:.25rem!important}.pr-xl-1,.px-xl-1{padding-right:.25rem!important}.pb-xl-1,.py-xl-1{padding-bottom:.25rem!important}.pl-xl-1,.px-xl-1{padding-left:.25rem!important}.p-xl-2{padding:.5rem!important}.pt-xl-2,.py-xl-2{padding-top:.5rem!important}.pr-xl-2,.px-xl-2{padding-right:.5rem!important}.pb-xl-2,.py-xl-2{padding-bottom:.5rem!important}.pl-xl-2,.px-xl-2{padding-left:.5rem!important}.p-xl-3{padding:1rem!important}.pt-xl-3,.py-xl-3{padding-top:1rem!important}.pr-xl-3,.px-xl-3{padding-right:1rem!important}.pb-xl-3,.py-xl-3{padding-bottom:1rem!important}.pl-xl-3,.px-xl-3{padding-left:1rem!important}.p-xl-4{padding:1.5rem!important}.pt-xl-4,.py-xl-4{padding-top:1.5rem!important}.pr-xl-4,.px-xl-4{padding-right:1.5rem!important}.pb-xl-4,.py-xl-4{padding-bottom:1.5rem!important}.pl-xl-4,.px-xl-4{padding-left:1.5rem!important}.p-xl-5{padding:3rem!important}.pt-xl-5,.py-xl-5{padding-top:3rem!important}.pr-xl-5,.px-xl-5{padding-right:3rem!important}.pb-xl-5,.py-xl-5{padding-bottom:3rem!important}.pl-xl-5,.px-xl-5{padding-left:3rem!important}.m-xl-auto{margin:auto!important}.mt-xl-auto,.my-xl-auto{margin-top:auto!important}.mr-xl-auto,.mx-xl-auto{margin-right:auto!important}.mb-xl-auto,.my-xl-auto{margin-bottom:auto!important}.ml-xl-auto,.mx-xl-auto{margin-left:auto!important}}.text-justify{text-align:justify!important}.text-nowrap{white-space:nowrap!important}.text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-center{text-align:center!important}@media (min-width:576px){.text-sm-left{text-align:left!important}.text-sm-right{text-align:right!important}.text-sm-center{text-align:center!important}}@media (min-width:768px){.text-md-left{text-align:left!important}.text-md-right{text-align:right!important}.text-md-center{text-align:center!important}}@media (min-width:992px){.text-lg-left{text-align:left!important}.text-lg-right{text-align:right!important}.text-lg-center{text-align:center!important}}@media (min-width:1200px){.text-xl-left{text-align:left!important}.text-xl-right{text-align:right!important}.text-xl-center{text-align:center!important}}.text-lowercase{text-transform:lowercase!important}.text-uppercase{text-transform:uppercase!important}.text-capitalize{text-transform:capitalize!important}.font-weight-light{font-weight:300!important}.font-weight-normal{font-weight:400!important}.font-weight-bold{font-weight:700!important}.font-italic{font-style:italic!important}.text-white{color:#fff!important}.text-primary{color:#007bff!important}a.text-primary:focus,a.text-primary:hover{color:#0062cc!important}.text-secondary{color:#6c757d!important}a.text-secondary:focus,a.text-secondary:hover{color:#545b62!important}.text-success{color:#28a745!important}a.text-success:focus,a.text-success:hover{color:#1e7e34!important}.text-info{color:#17a2b8!important}a.text-info:focus,a.text-info:hover{color:#117a8b!important}.text-warning{color:#ffc107!important}a.text-warning:focus,a.text-warning:hover{color:#d39e00!important}.text-danger{color:#dc3545!important}a.text-danger:focus,a.text-danger:hover{color:#bd2130!important}.text-light{color:#f8f9fa!important}a.text-light:focus,a.text-light:hover{color:#dae0e5!important}.text-dark{color:#343a40!important}a.text-dark:focus,a.text-dark:hover{color:#1d2124!important}.text-muted{color:#6c757d!important}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.visible{visibility:visible!important}.invisible{visibility:hidden!important}@media print{*,:after,:before{text-shadow:none!important;box-shadow:none!important}a:not(.btn){text-decoration:underline}abbr[title]:after{content:\" (\" attr(title) \")\"}pre{white-space:pre-wrap!important}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}@page{size:a3}.container,body{min-width:992px!important}.navbar{display:none}.badge{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #ddd!important}}", undefined);

    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





    function createCommonjsModule(fn, module) {
        return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var tribute_min$1 = createCommonjsModule(function (module, exports) {
    !function(e,t){module.exports=t();}(commonjsGlobal,(function(){"use strict";function e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function t(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i);}}function n(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],i=!0,r=!1,o=void 0;try{for(var u,l=e[Symbol.iterator]();!(i=(u=l.next()).done)&&(n.push(u.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e;}finally{try{i||null==l.return||l.return();}finally{if(r)throw o}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}if(Array.prototype.find||(Array.prototype.find=function(e){if(null===this)throw new TypeError("Array.prototype.find called on null or undefined");if("function"!=typeof e)throw new TypeError("predicate must be a function");for(var t,n=Object(this),i=n.length>>>0,r=arguments[1],o=0;o<i;o++)if(t=n[o],e.call(r,t,o,n))return t}),window&&"function"!=typeof window.CustomEvent){var r=function(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n};void 0!==window.Event&&(r.prototype=window.Event.prototype),window.CustomEvent=r;}var o=function(){function t(n){e(this,t),this.tribute=n,this.tribute.events=this;}return n(t,[{key:"bind",value:function(e){e.boundKeydown=this.keydown.bind(e,this),e.boundKeyup=this.keyup.bind(e,this),e.boundInput=this.input.bind(e,this),e.addEventListener("keydown",e.boundKeydown,!1),e.addEventListener("keyup",e.boundKeyup,!1),e.addEventListener("input",e.boundInput,!1);}},{key:"unbind",value:function(e){e.removeEventListener("keydown",e.boundKeydown,!1),e.removeEventListener("keyup",e.boundKeyup,!1),e.removeEventListener("input",e.boundInput,!1),delete e.boundKeydown,delete e.boundKeyup,delete e.boundInput;}},{key:"keydown",value:function(e,n){e.shouldDeactivate(n)&&(e.tribute.isActive=!1,e.tribute.hideMenu());var i=this;e.commandEvent=!1,t.keys().forEach((function(t){t.key===n.keyCode&&(e.commandEvent=!0,e.callbacks()[t.value.toLowerCase()](n,i));}));}},{key:"input",value:function(e,t){e.inputEvent=!0,e.keyup.call(this,e,t);}},{key:"click",value:function(e,t){var n=e.tribute;if(n.menu&&n.menu.contains(t.target)){var i=t.target;for(t.preventDefault(),t.stopPropagation();"li"!==i.nodeName.toLowerCase();)if(!(i=i.parentNode)||i===n.menu)throw new Error("cannot find the <li> container for the click");n.selectItemAtIndex(i.getAttribute("data-index"),t),n.hideMenu();}else n.current.element&&!n.current.externalTrigger&&(n.current.externalTrigger=!1,setTimeout((function(){return n.hideMenu()})));}},{key:"keyup",value:function(e,t){if(e.inputEvent&&(e.inputEvent=!1),e.updateSelection(this),27!==t.keyCode){if(!e.tribute.allowSpaces&&e.tribute.hasTrailingSpace)return e.tribute.hasTrailingSpace=!1,e.commandEvent=!0,void e.callbacks().space(t,this);if(!e.tribute.isActive)if(e.tribute.autocompleteMode)e.callbacks().triggerChar(t,this,"");else{var n=e.getKeyCode(e,this,t);if(isNaN(n)||!n)return;var i=e.tribute.triggers().find((function(e){return e.charCodeAt(0)===n}));void 0!==i&&e.callbacks().triggerChar(t,this,i);}e.tribute.current.mentionText.length<e.tribute.current.collection.menuShowMinLength||((e.tribute.current.trigger||e.tribute.autocompleteMode)&&!1===e.commandEvent||e.tribute.isActive&&8===t.keyCode)&&e.tribute.showMenuFor(this,!0);}}},{key:"shouldDeactivate",value:function(e){if(!this.tribute.isActive)return!1;if(0===this.tribute.current.mentionText.length){var n=!1;return t.keys().forEach((function(t){e.keyCode===t.key&&(n=!0);})),!n}return!1}},{key:"getKeyCode",value:function(e,t,n){var i=e.tribute,r=i.range.getTriggerInfo(!1,i.hasTrailingSpace,!0,i.allowSpaces,i.autocompleteMode);return!!r&&r.mentionTriggerChar.charCodeAt(0)}},{key:"updateSelection",value:function(e){this.tribute.current.element=e;var t=this.tribute.range.getTriggerInfo(!1,this.tribute.hasTrailingSpace,!0,this.tribute.allowSpaces,this.tribute.autocompleteMode);t&&(this.tribute.current.selectedPath=t.mentionSelectedPath,this.tribute.current.mentionText=t.mentionText,this.tribute.current.selectedOffset=t.mentionSelectedOffset);}},{key:"callbacks",value:function(){var e=this;return{triggerChar:function(t,n,i){var r=e.tribute;r.current.trigger=i;var o=r.collection.find((function(e){return e.trigger===i}));r.current.collection=o,r.current.mentionText.length>=r.current.collection.menuShowMinLength&&r.inputEvent&&r.showMenuFor(n,!0);},enter:function(t,n){e.tribute.isActive&&e.tribute.current.filteredItems&&(t.preventDefault(),t.stopPropagation(),setTimeout((function(){e.tribute.selectItemAtIndex(e.tribute.menuSelected,t),e.tribute.hideMenu();}),0));},escape:function(t,n){e.tribute.isActive&&(t.preventDefault(),t.stopPropagation(),e.tribute.isActive=!1,e.tribute.hideMenu());},tab:function(t,n){e.callbacks().enter(t,n);},space:function(t,n){e.tribute.isActive&&(e.tribute.spaceSelectsMatch?e.callbacks().enter(t,n):e.tribute.allowSpaces||(t.stopPropagation(),setTimeout((function(){e.tribute.hideMenu(),e.tribute.isActive=!1;}),0)));},up:function(t,n){if(e.tribute.isActive&&e.tribute.current.filteredItems){t.preventDefault(),t.stopPropagation();var i=e.tribute.current.filteredItems.length,r=e.tribute.menuSelected;i>r&&r>0?(e.tribute.menuSelected--,e.setActiveLi()):0===r&&(e.tribute.menuSelected=i-1,e.setActiveLi(),e.tribute.menu.scrollTop=e.tribute.menu.scrollHeight);}},down:function(t,n){if(e.tribute.isActive&&e.tribute.current.filteredItems){t.preventDefault(),t.stopPropagation();var i=e.tribute.current.filteredItems.length-1,r=e.tribute.menuSelected;i>r?(e.tribute.menuSelected++,e.setActiveLi()):i===r&&(e.tribute.menuSelected=0,e.setActiveLi(),e.tribute.menu.scrollTop=0);}},delete:function(t,n){e.tribute.isActive&&e.tribute.current.mentionText.length<1?e.tribute.hideMenu():e.tribute.isActive&&e.tribute.showMenuFor(n);}}}},{key:"setActiveLi",value:function(e){var t=this.tribute.menu.querySelectorAll("li"),n=t.length>>>0;e&&(this.tribute.menuSelected=parseInt(e));for(var i=0;i<n;i++){var r=t[i];if(i===this.tribute.menuSelected){r.classList.add(this.tribute.current.collection.selectClass);var o=r.getBoundingClientRect(),u=this.tribute.menu.getBoundingClientRect();if(o.bottom>u.bottom){var l=o.bottom-u.bottom;this.tribute.menu.scrollTop+=l;}else if(o.top<u.top){var s=u.top-o.top;this.tribute.menu.scrollTop-=s;}}else r.classList.remove(this.tribute.current.collection.selectClass);}}},{key:"getFullHeight",value:function(e,t){var n=e.getBoundingClientRect().height;if(t){var i=e.currentStyle||window.getComputedStyle(e);return n+parseFloat(i.marginTop)+parseFloat(i.marginBottom)}return n}}],[{key:"keys",value:function(){return[{key:9,value:"TAB"},{key:8,value:"DELETE"},{key:13,value:"ENTER"},{key:27,value:"ESCAPE"},{key:32,value:"SPACE"},{key:38,value:"UP"},{key:40,value:"DOWN"}]}}]),t}(),u=function(){function t(n){e(this,t),this.tribute=n,this.tribute.menuEvents=this,this.menu=this.tribute.menu;}return n(t,[{key:"bind",value:function(e){var t=this;this.menuClickEvent=this.tribute.events.click.bind(null,this),this.menuContainerScrollEvent=this.debounce((function(){t.tribute.isActive&&t.tribute.showMenuFor(t.tribute.current.element,!1);}),300,!1),this.windowResizeEvent=this.debounce((function(){t.tribute.isActive&&t.tribute.range.positionMenuAtCaret(!0);}),300,!1),this.tribute.range.getDocument().addEventListener("MSPointerDown",this.menuClickEvent,!1),this.tribute.range.getDocument().addEventListener("mousedown",this.menuClickEvent,!1),window.addEventListener("resize",this.windowResizeEvent),this.menuContainer?this.menuContainer.addEventListener("scroll",this.menuContainerScrollEvent,!1):window.addEventListener("scroll",this.menuContainerScrollEvent);}},{key:"unbind",value:function(e){this.tribute.range.getDocument().removeEventListener("mousedown",this.menuClickEvent,!1),this.tribute.range.getDocument().removeEventListener("MSPointerDown",this.menuClickEvent,!1),window.removeEventListener("resize",this.windowResizeEvent),this.menuContainer?this.menuContainer.removeEventListener("scroll",this.menuContainerScrollEvent,!1):window.removeEventListener("scroll",this.menuContainerScrollEvent);}},{key:"debounce",value:function(e,t,n){var i,r=arguments,o=this;return function(){var u=o,l=r,s=n&&!i;clearTimeout(i),i=setTimeout((function(){i=null,n||e.apply(u,l);}),t),s&&e.apply(u,l);}}}]),t}(),l=function(){function t(n){e(this,t),this.tribute=n,this.tribute.range=this;}return n(t,[{key:"getDocument",value:function(){var e;return this.tribute.current.collection&&(e=this.tribute.current.collection.iframe),e?e.contentWindow.document:document}},{key:"positionMenuAtCaret",value:function(e){var t,n=this,i=this.tribute.current,r=this.getTriggerInfo(!1,this.tribute.hasTrailingSpace,!0,this.tribute.allowSpaces,this.tribute.autocompleteMode);if(void 0!==r){if(!this.tribute.positionMenu)return void(this.tribute.menu.style.cssText="display: block;");t=this.isContentEditable(i.element)?this.getContentEditableCaretPosition(r.mentionPosition):this.getTextAreaOrInputUnderlinePosition(this.tribute.current.element,r.mentionPosition),this.tribute.menu.style.cssText="top: ".concat(t.top,"px;\n                                     left: ").concat(t.left,"px;\n                                     right: ").concat(t.right,"px;\n                                     bottom: ").concat(t.bottom,"px;\n                                     position: absolute;\n                                     display: block;"),"auto"===t.left&&(this.tribute.menu.style.left="auto"),"auto"===t.top&&(this.tribute.menu.style.top="auto"),e&&this.scrollIntoView(),window.setTimeout((function(){var i={width:n.tribute.menu.offsetWidth,height:n.tribute.menu.offsetHeight},r=n.isMenuOffScreen(t,i),o=window.innerWidth>i.width&&(r.left||r.right),u=window.innerHeight>i.height&&(r.top||r.bottom);(o||u)&&(n.tribute.menu.style.cssText="display: none",n.positionMenuAtCaret(e));}),0);}else this.tribute.menu.style.cssText="display: none";}},{key:"selectElement",value:function(e,t,n){var i,r=e;if(t)for(var o=0;o<t.length;o++){if(void 0===(r=r.childNodes[t[o]]))return;for(;r.length<n;)n-=r.length,r=r.nextSibling;0!==r.childNodes.length||r.length||(r=r.previousSibling);}var u=this.getWindowSelection();(i=this.getDocument().createRange()).setStart(r,n),i.setEnd(r,n),i.collapse(!0);try{u.removeAllRanges();}catch(e){}u.addRange(i),e.focus();}},{key:"replaceTriggerText",value:function(e,t,n,i,r){var o=this.getTriggerInfo(!0,n,t,this.tribute.allowSpaces,this.tribute.autocompleteMode);if(void 0!==o){var u=this.tribute.current,l=new CustomEvent("tribute-replaced",{detail:{item:r,instance:u,context:o,event:i}});if(this.isContentEditable(u.element)){e+="string"==typeof this.tribute.replaceTextSuffix?this.tribute.replaceTextSuffix:" ";var s=o.mentionPosition+o.mentionText.length;this.tribute.autocompleteMode||(s+=o.mentionTriggerChar.length),this.pasteHtml(e,o.mentionPosition,s);}else{var a=this.tribute.current.element,c="string"==typeof this.tribute.replaceTextSuffix?this.tribute.replaceTextSuffix:" ";e+=c;var h=o.mentionPosition,d=o.mentionPosition+o.mentionText.length+c.length;this.tribute.autocompleteMode||(d+=o.mentionTriggerChar.length-1),a.value=a.value.substring(0,h)+e+a.value.substring(d,a.value.length),a.selectionStart=h+e.length,a.selectionEnd=h+e.length;}u.element.dispatchEvent(new CustomEvent("input",{bubbles:!0})),u.element.dispatchEvent(l);}}},{key:"pasteHtml",value:function(e,t,n){var i,r;r=this.getWindowSelection(),(i=this.getDocument().createRange()).setStart(r.anchorNode,t),i.setEnd(r.anchorNode,n),i.deleteContents();var o=this.getDocument().createElement("div");o.innerHTML=e;for(var u,l,s=this.getDocument().createDocumentFragment();u=o.firstChild;)l=s.appendChild(u);i.insertNode(s),l&&((i=i.cloneRange()).setStartAfter(l),i.collapse(!0),r.removeAllRanges(),r.addRange(i));}},{key:"getWindowSelection",value:function(){return this.tribute.collection.iframe?this.tribute.collection.iframe.contentWindow.getSelection():window.getSelection()}},{key:"getNodePositionInParent",value:function(e){if(null===e.parentNode)return 0;for(var t=0;t<e.parentNode.childNodes.length;t++){if(e.parentNode.childNodes[t]===e)return t}}},{key:"getContentEditableSelectedPath",value:function(e){var t=this.getWindowSelection(),n=t.anchorNode,i=[];if(null!=n){for(var r,o=n.contentEditable;null!==n&&"true"!==o;)r=this.getNodePositionInParent(n),i.push(r),null!==(n=n.parentNode)&&(o=n.contentEditable);return i.reverse(),{selected:n,path:i,offset:t.getRangeAt(0).startOffset}}}},{key:"getTextPrecedingCurrentSelection",value:function(){var e=this.tribute.current,t="";if(this.isContentEditable(e.element)){var n=this.getWindowSelection().anchorNode;if(null!=n){var i=n.textContent,r=this.getWindowSelection().getRangeAt(0).startOffset;i&&r>=0&&(t=i.substring(0,r));}}else{var o=this.tribute.current.element;if(o){var u=o.selectionStart;o.value&&u>=0&&(t=o.value.substring(0,u));}}return t}},{key:"getLastWordInText",value:function(e){var t=(e=e.replace(/\u00A0/g," ")).split(/\s+/);return t[t.length-1].trim()}},{key:"getTriggerInfo",value:function(e,t,n,i,r){var o,u,l,s=this,a=this.tribute.current;if(this.isContentEditable(a.element)){var c=this.getContentEditableSelectedPath(a);c&&(o=c.selected,u=c.path,l=c.offset);}else o=this.tribute.current.element;var h=this.getTextPrecedingCurrentSelection(),d=this.getLastWordInText(h);if(r)return{mentionPosition:h.length-d.length,mentionText:d,mentionSelectedElement:o,mentionSelectedPath:u,mentionSelectedOffset:l};if(null!=h){var f,m=-1;if(this.tribute.collection.forEach((function(e){var t=e.trigger,i=e.requireLeadingSpace?s.lastIndexWithLeadingSpace(h,t):h.lastIndexOf(t);i>m&&(m=i,f=t,n=e.requireLeadingSpace);})),m>=0&&(0===m||!n||/[\xA0\s]/g.test(h.substring(m-1,m)))){var p=h.substring(m+f.length,h.length);f=h.substring(m,m+f.length);var v=p.substring(0,1),g=p.length>0&&(" "===v||" "===v);t&&(p=p.trim());var b=i?/[^\S ]/g:/[\xA0\s]/g;if(this.tribute.hasTrailingSpace=b.test(p),!g&&(e||!b.test(p)))return{mentionPosition:m,mentionText:p,mentionSelectedElement:o,mentionSelectedPath:u,mentionSelectedOffset:l,mentionTriggerChar:f}}}}},{key:"lastIndexWithLeadingSpace",value:function(e,t){for(var n=e.split("").reverse().join(""),i=-1,r=0,o=e.length;r<o;r++){for(var u=r===e.length-1,l=/\s/.test(n[r+1]),s=!0,a=t.length-1;a>=0;a--)if(t[a]!==n[r-a]){s=!1;break}if(s&&(u||l)){i=e.length-1-r;break}}return i}},{key:"isContentEditable",value:function(e){return"INPUT"!==e.nodeName&&"TEXTAREA"!==e.nodeName}},{key:"isMenuOffScreen",value:function(e,t){var n=window.innerWidth,i=window.innerHeight,r=document.documentElement,o=(window.pageXOffset||r.scrollLeft)-(r.clientLeft||0),u=(window.pageYOffset||r.scrollTop)-(r.clientTop||0),l="number"==typeof e.top?e.top:u+i-e.bottom-t.height,s="number"==typeof e.right?e.right:e.left+t.width,a="number"==typeof e.bottom?e.bottom:e.top+t.height,c="number"==typeof e.left?e.left:o+n-e.right-t.width;return{top:l<Math.floor(u),right:s>Math.ceil(o+n),bottom:a>Math.ceil(u+i),left:c<Math.floor(o)}}},{key:"getMenuDimensions",value:function(){var e={width:null,height:null};return this.tribute.menu.style.cssText="top: 0px;\n                                 left: 0px;\n                                 position: fixed;\n                                 display: block;\n                                 visibility; hidden;",e.width=this.tribute.menu.offsetWidth,e.height=this.tribute.menu.offsetHeight,this.tribute.menu.style.cssText="display: none;",e}},{key:"getTextAreaOrInputUnderlinePosition",value:function(e,t,n){var i=null!==window.mozInnerScreenX,r=this.getDocument().createElement("div");r.id="input-textarea-caret-position-mirror-div",this.getDocument().body.appendChild(r);var o=r.style,u=window.getComputedStyle?getComputedStyle(e):e.currentStyle;o.whiteSpace="pre-wrap","INPUT"!==e.nodeName&&(o.wordWrap="break-word"),o.position="absolute",o.visibility="hidden",["direction","boxSizing","width","height","overflowX","overflowY","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","paddingTop","paddingRight","paddingBottom","paddingLeft","fontStyle","fontVariant","fontWeight","fontStretch","fontSize","fontSizeAdjust","lineHeight","fontFamily","textAlign","textTransform","textIndent","textDecoration","letterSpacing","wordSpacing"].forEach((function(e){o[e]=u[e];})),i?(o.width="".concat(parseInt(u.width)-2,"px"),e.scrollHeight>parseInt(u.height)&&(o.overflowY="scroll")):o.overflow="hidden",r.textContent=e.value.substring(0,t),"INPUT"===e.nodeName&&(r.textContent=r.textContent.replace(/\s/g," "));var l=this.getDocument().createElement("span");l.textContent=e.value.substring(t)||".",r.appendChild(l);var s=e.getBoundingClientRect(),a=document.documentElement,c=(window.pageXOffset||a.scrollLeft)-(a.clientLeft||0),h=(window.pageYOffset||a.scrollTop)-(a.clientTop||0),d=0,f=0;this.menuContainerIsBody&&(d=s.top,f=s.left);var m={top:d+h+l.offsetTop+parseInt(u.borderTopWidth)+parseInt(u.fontSize)-e.scrollTop,left:f+c+l.offsetLeft+parseInt(u.borderLeftWidth)},p=window.innerWidth,v=window.innerHeight,g=this.getMenuDimensions(),b=this.isMenuOffScreen(m,g);b.right&&(m.right=p-m.left,m.left="auto");var y=this.tribute.menuContainer?this.tribute.menuContainer.offsetHeight:this.getDocument().body.offsetHeight;if(b.bottom){var w=y-(v-(this.tribute.menuContainer?this.tribute.menuContainer.getBoundingClientRect():this.getDocument().body.getBoundingClientRect()).top);m.bottom=w+(v-s.top-l.offsetTop),m.top="auto";}return(b=this.isMenuOffScreen(m,g)).left&&(m.left=p>g.width?c+p-g.width:c,delete m.right),b.top&&(m.top=v>g.height?h+v-g.height:h,delete m.bottom),this.getDocument().body.removeChild(r),m}},{key:"getContentEditableCaretPosition",value:function(e){var t,n=this.getWindowSelection();(t=this.getDocument().createRange()).setStart(n.anchorNode,e),t.setEnd(n.anchorNode,e),t.collapse(!1);var i=t.getBoundingClientRect(),r=document.documentElement,o=(window.pageXOffset||r.scrollLeft)-(r.clientLeft||0),u=(window.pageYOffset||r.scrollTop)-(r.clientTop||0),l={left:i.left+o,top:i.top+i.height+u},s=window.innerWidth,a=window.innerHeight,c=this.getMenuDimensions(),h=this.isMenuOffScreen(l,c);h.right&&(l.left="auto",l.right=s-i.left-o);var d=this.tribute.menuContainer?this.tribute.menuContainer.offsetHeight:this.getDocument().body.offsetHeight;if(h.bottom){var f=d-(a-(this.tribute.menuContainer?this.tribute.menuContainer.getBoundingClientRect():this.getDocument().body.getBoundingClientRect()).top);l.top="auto",l.bottom=f+(a-i.top);}return(h=this.isMenuOffScreen(l,c)).left&&(l.left=s>c.width?o+s-c.width:o,delete l.right),h.top&&(l.top=a>c.height?u+a-c.height:u,delete l.bottom),this.menuContainerIsBody||(l.left=l.left?l.left-this.tribute.menuContainer.offsetLeft:l.left,l.top=l.top?l.top-this.tribute.menuContainer.offsetTop:l.top),l}},{key:"scrollIntoView",value:function(e){var t,n=this.menu;if(void 0!==n){for(;void 0===t||0===t.height;)if(0===(t=n.getBoundingClientRect()).height&&(void 0===(n=n.childNodes[0])||!n.getBoundingClientRect))return;var i=t.top,r=i+t.height;if(i<0)window.scrollTo(0,window.pageYOffset+t.top-20);else if(r>window.innerHeight){var o=window.pageYOffset+t.top-20;o-window.pageYOffset>100&&(o=window.pageYOffset+100);var u=window.pageYOffset-(window.innerHeight-r);u>o&&(u=o),window.scrollTo(0,u);}}}},{key:"menuContainerIsBody",get:function(){return this.tribute.menuContainer===document.body||!this.tribute.menuContainer}}]),t}(),s=function(){function t(n){e(this,t),this.tribute=n,this.tribute.search=this;}return n(t,[{key:"simpleFilter",value:function(e,t){var n=this;return t.filter((function(t){return n.test(e,t)}))}},{key:"test",value:function(e,t){return null!==this.match(e,t)}},{key:"match",value:function(e,t,n){n=n||{};t.length;var i=n.pre||"",r=n.post||"",o=n.caseSensitive&&t||t.toLowerCase();if(n.skip)return{rendered:t,score:0};e=n.caseSensitive&&e||e.toLowerCase();var u=this.traverse(o,e,0,0,[]);return u?{rendered:this.render(t,u.cache,i,r),score:u.score}:null}},{key:"traverse",value:function(e,t,n,i,r){if(t.length===i)return{score:this.calculateScore(r),cache:r.slice()};if(!(e.length===n||t.length-i>e.length-n)){for(var o,u,l=t[i],s=e.indexOf(l,n);s>-1;){if(r.push(s),u=this.traverse(e,t,s+1,i+1,r),r.pop(),!u)return o;(!o||o.score<u.score)&&(o=u),s=e.indexOf(l,s+1);}return o}}},{key:"calculateScore",value:function(e){var t=0,n=1;return e.forEach((function(i,r){r>0&&(e[r-1]+1===i?n+=n+1:n=1),t+=n;})),t}},{key:"render",value:function(e,t,n,i){var r=e.substring(0,t[0]);return t.forEach((function(o,u){r+=n+e[o]+i+e.substring(o+1,t[u+1]?t[u+1]:e.length);})),r}},{key:"filter",value:function(e,t,n){var i=this;return n=n||{},t.reduce((function(t,r,o,u){var l=r;n.extract&&((l=n.extract(r))||(l=""));var s=i.match(e,l,n);return null!=s&&(t[t.length]={string:s.rendered,score:s.score,index:o,original:r}),t}),[]).sort((function(e,t){var n=t.score-e.score;return n||e.index-t.index}))}}]),t}();return function(){function t(n){var i,r=this,a=n.values,c=void 0===a?null:a,h=n.iframe,d=void 0===h?null:h,f=n.selectClass,m=void 0===f?"highlight":f,p=n.containerClass,v=void 0===p?"tribute-container":p,g=n.itemClass,b=void 0===g?"":g,y=n.trigger,w=void 0===y?"@":y,T=n.autocompleteMode,C=void 0!==T&&T,S=n.selectTemplate,E=void 0===S?null:S,k=n.menuItemTemplate,x=void 0===k?null:k,M=n.lookup,A=void 0===M?"key":M,L=n.fillAttr,I=void 0===L?"value":L,N=n.collection,O=void 0===N?null:N,D=n.menuContainer,P=void 0===D?null:D,R=n.noMatchTemplate,W=void 0===R?null:R,H=n.requireLeadingSpace,B=void 0===H||H,F=n.allowSpaces,_=void 0!==F&&F,j=n.replaceTextSuffix,Y=void 0===j?null:j,z=n.positionMenu,K=void 0===z||z,q=n.spaceSelectsMatch,U=void 0!==q&&q,X=n.searchOpts,Q=void 0===X?{}:X,V=n.menuItemLimit,G=void 0===V?null:V,J=n.menuShowMinLength,Z=void 0===J?0:J;if(e(this,t),this.autocompleteMode=C,this.menuSelected=0,this.current={},this.inputEvent=!1,this.isActive=!1,this.menuContainer=P,this.allowSpaces=_,this.replaceTextSuffix=Y,this.positionMenu=K,this.hasTrailingSpace=!1,this.spaceSelectsMatch=U,this.autocompleteMode&&(w="",_=!1),c)this.collection=[{trigger:w,iframe:d,selectClass:m,containerClass:v,itemClass:b,selectTemplate:(E||t.defaultSelectTemplate).bind(this),menuItemTemplate:(x||t.defaultMenuItemTemplate).bind(this),noMatchTemplate:(i=W,"string"==typeof i?""===i.trim()?null:i:"function"==typeof i?i.bind(r):W||function(){return"<li>No Match Found!</li>"}.bind(r)),lookup:A,fillAttr:I,values:c,requireLeadingSpace:B,searchOpts:Q,menuItemLimit:G,menuShowMinLength:Z}];else{if(!O)throw new Error("[Tribute] No collection specified.");this.autocompleteMode&&console.warn("Tribute in autocomplete mode does not work for collections"),this.collection=O.map((function(e){return{trigger:e.trigger||w,iframe:e.iframe||d,selectClass:e.selectClass||m,containerClass:e.containerClass||v,itemClass:e.itemClass||b,selectTemplate:(e.selectTemplate||t.defaultSelectTemplate).bind(r),menuItemTemplate:(e.menuItemTemplate||t.defaultMenuItemTemplate).bind(r),noMatchTemplate:function(e){return"string"==typeof e?""===e.trim()?null:e:"function"==typeof e?e.bind(r):W||function(){return"<li>No Match Found!</li>"}.bind(r)}(W),lookup:e.lookup||A,fillAttr:e.fillAttr||I,values:e.values,requireLeadingSpace:e.requireLeadingSpace,searchOpts:e.searchOpts||Q,menuItemLimit:e.menuItemLimit||G,menuShowMinLength:e.menuShowMinLength||Z}}));}new l(this),new o(this),new u(this),new s(this);}return n(t,[{key:"triggers",value:function(){return this.collection.map((function(e){return e.trigger}))}},{key:"attach",value:function(e){if(!e)throw new Error("[Tribute] Must pass in a DOM node or NodeList.");if("undefined"!=typeof jQuery&&e instanceof jQuery&&(e=e.get()),e.constructor===NodeList||e.constructor===HTMLCollection||e.constructor===Array)for(var t=e.length,n=0;n<t;++n)this._attach(e[n]);else this._attach(e);}},{key:"_attach",value:function(e){e.hasAttribute("data-tribute")&&console.warn("Tribute was already bound to "+e.nodeName),this.ensureEditable(e),this.events.bind(e),e.setAttribute("data-tribute",!0);}},{key:"ensureEditable",value:function(e){if(-1===t.inputTypes().indexOf(e.nodeName)){if(!e.contentEditable)throw new Error("[Tribute] Cannot bind to "+e.nodeName);e.contentEditable=!0;}}},{key:"createMenu",value:function(e){var t=this.range.getDocument().createElement("div"),n=this.range.getDocument().createElement("ul");return t.className=e,t.appendChild(n),this.menuContainer?this.menuContainer.appendChild(t):this.range.getDocument().body.appendChild(t)}},{key:"showMenuFor",value:function(e,t){var n=this;if(!this.isActive||this.current.element!==e||this.current.mentionText!==this.currentMentionTextSnapshot){this.currentMentionTextSnapshot=this.current.mentionText,this.menu||(this.menu=this.createMenu(this.current.collection.containerClass),e.tributeMenu=this.menu,this.menuEvents.bind(this.menu)),this.isActive=!0,this.menuSelected=0,this.current.mentionText||(this.current.mentionText="");var r=function(e){if(n.isActive){var r=n.search.filter(n.current.mentionText,e,{pre:n.current.collection.searchOpts.pre||"<span>",post:n.current.collection.searchOpts.post||"</span>",skip:n.current.collection.searchOpts.skip,extract:function(e){if("string"==typeof n.current.collection.lookup)return e[n.current.collection.lookup];if("function"==typeof n.current.collection.lookup)return n.current.collection.lookup(e,n.current.mentionText);throw new Error("Invalid lookup attribute, lookup must be string or function.")}});n.current.collection.menuItemLimit&&(r=r.slice(0,n.current.collection.menuItemLimit)),n.current.filteredItems=r;var o=n.menu.querySelector("ul");if(n.range.positionMenuAtCaret(t),!r.length){var u=new CustomEvent("tribute-no-match",{detail:n.menu});return n.current.element.dispatchEvent(u),void("function"==typeof n.current.collection.noMatchTemplate&&!n.current.collection.noMatchTemplate()||!n.current.collection.noMatchTemplate?n.hideMenu():"function"==typeof n.current.collection.noMatchTemplate?o.innerHTML=n.current.collection.noMatchTemplate():o.innerHTML=n.current.collection.noMatchTemplate)}o.innerHTML="";var l=n.range.getDocument().createDocumentFragment();r.forEach((function(e,t){var r=n.range.getDocument().createElement("li");r.setAttribute("data-index",t),r.className=n.current.collection.itemClass,r.addEventListener("mousemove",(function(e){var t=i(n._findLiTarget(e.target),2),r=(t[0],t[1]);0!==e.movementY&&n.events.setActiveLi(r);})),n.menuSelected===t&&r.classList.add(n.current.collection.selectClass),r.innerHTML=n.current.collection.menuItemTemplate(e),l.appendChild(r);})),o.appendChild(l);}};"function"==typeof this.current.collection.values?this.current.collection.values(this.current.mentionText,r):r(this.current.collection.values);}}},{key:"_findLiTarget",value:function(e){if(!e)return[];var t=e.getAttribute("data-index");return t?[e,t]:this._findLiTarget(e.parentNode)}},{key:"showMenuForCollection",value:function(e,t){e!==document.activeElement&&this.placeCaretAtEnd(e),this.current.collection=this.collection[t||0],this.current.externalTrigger=!0,this.current.element=e,e.isContentEditable?this.insertTextAtCursor(this.current.collection.trigger):this.insertAtCaret(e,this.current.collection.trigger),this.showMenuFor(e);}},{key:"placeCaretAtEnd",value:function(e){if(e.focus(),void 0!==window.getSelection&&void 0!==document.createRange){var t=document.createRange();t.selectNodeContents(e),t.collapse(!1);var n=window.getSelection();n.removeAllRanges(),n.addRange(t);}else if(void 0!==document.body.createTextRange){var i=document.body.createTextRange();i.moveToElementText(e),i.collapse(!1),i.select();}}},{key:"insertTextAtCursor",value:function(e){var t,n;(n=(t=window.getSelection()).getRangeAt(0)).deleteContents();var i=document.createTextNode(e);n.insertNode(i),n.selectNodeContents(i),n.collapse(!1),t.removeAllRanges(),t.addRange(n);}},{key:"insertAtCaret",value:function(e,t){var n=e.scrollTop,i=e.selectionStart,r=e.value.substring(0,i),o=e.value.substring(e.selectionEnd,e.value.length);e.value=r+t+o,i+=t.length,e.selectionStart=i,e.selectionEnd=i,e.focus(),e.scrollTop=n;}},{key:"hideMenu",value:function(){this.menu&&(this.menu.style.cssText="display: none;",this.isActive=!1,this.menuSelected=0,this.current={});}},{key:"selectItemAtIndex",value:function(e,t){if("number"==typeof(e=parseInt(e))&&!isNaN(e)){var n=this.current.filteredItems[e],i=this.current.collection.selectTemplate(n);null!==i&&this.replaceText(i,t,n);}}},{key:"replaceText",value:function(e,t,n){this.range.replaceTriggerText(e,!0,!0,t,n);}},{key:"_append",value:function(e,t,n){if("function"==typeof e.values)throw new Error("Unable to append to values, as it is a function.");e.values=n?t:e.values.concat(t);}},{key:"append",value:function(e,t,n){var i=parseInt(e);if("number"!=typeof i)throw new Error("please provide an index for the collection to update.");var r=this.collection[i];this._append(r,t,n);}},{key:"appendCurrent",value:function(e,t){if(!this.isActive)throw new Error("No active state. Please use append instead and pass an index.");this._append(this.current.collection,e,t);}},{key:"detach",value:function(e){if(!e)throw new Error("[Tribute] Must pass in a DOM node or NodeList.");if("undefined"!=typeof jQuery&&e instanceof jQuery&&(e=e.get()),e.constructor===NodeList||e.constructor===HTMLCollection||e.constructor===Array)for(var t=e.length,n=0;n<t;++n)this._detach(e[n]);else this._detach(e);}},{key:"_detach",value:function(e){var t=this;this.events.unbind(e),e.tributeMenu&&this.menuEvents.unbind(e.tributeMenu),setTimeout((function(){e.removeAttribute("data-tribute"),t.isActive=!1,e.tributeMenu&&e.tributeMenu.remove();}));}},{key:"isActive",get:function(){return this._isActive},set:function(e){if(this._isActive!=e&&(this._isActive=e,this.current.element)){var t=new CustomEvent("tribute-active-".concat(e));this.current.element.dispatchEvent(t);}}}],[{key:"defaultSelectTemplate",value:function(e){return void 0===e?"".concat(this.current.collection.trigger).concat(this.current.mentionText):this.range.isContentEditable(this.current.element)?'<span class="tribute-mention">'+(this.current.collection.trigger+e.original[this.current.collection.fillAttr])+"</span>":this.current.collection.trigger+e.original[this.current.collection.fillAttr]}},{key:"defaultMenuItemTemplate",value:function(e){return e.string}},{key:"inputTypes",value:function(){return["TEXTAREA","INPUT"]}}]),t}()}));

    });

    // const nodes = {
    //   doc: NodeSpec,
    //   paragraph: NodeSpec,
    //   text: NodeSpec,
    //   hard_break: NodeSpec
    // };
    // const marks = {
    //   link: MarkSpec,
    //   em: MarkSpec,
    //   strong: MarkSpec
    // };


    var mySchema = new Schema({
      nodes: addListNodes(schema.spec.nodes, "paragraph block*", "block"),
      marks: schema.spec.marks
    });

    delete mySchema.nodes.blockquote;
    delete mySchema.nodes.heading;
    delete mySchema.nodes.code_block;
    delete mySchema.nodes.horizontal_rule;
    delete mySchema.nodes.image;
    delete mySchema.marks.code;

    var tribute = new tribute_min$1({
      values: [{ key: "Ian Copeland", value: "Ian", id: "TPC2JH3P" }, { key: "Geraint Pickard-Skeats", value: "Gez", id: "JX8KANFP" }, { key: "Dorota Kortas", value: "Dee", id: "KVNA2TWK" }, { key: "Stephanie Henson", value: "Steph", id: "X949X79R" }, { key: "Wayne Ponce", value: "Wayne", id: "WPWTH9XC" }, { key: "Tom Cracknell", value: "Tom", id: "W248J6TQ" }],
      selectTemplate: function selectTemplate(item) {
        return '<span contenteditable="false"><a href="https://sixticks.portal.sixticks.rocks/staff-profile/?user=' + item.original.id + '" target="_blank" title="' + item.original.value + '" contenteditable="false">@' + item.original.key + "</a></span>";
      }
    });
    tribute.attach(document.getElementById("editor"));

    window.view = new EditorView(document.querySelector("#editor"), {
      state: EditorState.create({
        doc: DOMParser.fromSchema(mySchema).parse(document.querySelector("#content")),
        plugins: exampleSetup({ schema: mySchema })
      })
    });
    $('#editor').attr('contenteditable', 'false');

    if ($('.ProseMirror-menubar').length) {
      var disallowedItems = ["Undo last change", "Redo last undone change", "Select parent node"];
      $('.ProseMirror-menubar').children("span").each(function (i, obj) {
        if (disallowedItems.indexOf($(obj).children("div").attr("title")) != -1 && $(obj).children("div").attr("title") || $(obj).children("div").attr("class") == "ProseMirror-menu-dropdown-wrap" || $(obj).attr("class") == "ProseMirror-menuseparator") {
          $(obj).remove();
        }
      });
    }

    }());
    //# sourceMappingURL=data:application/json;charset=utf-8;base64,
